{"version":3,"file":"default-src_app_POS_pos-accueil_view-state_service_ts-src_app_admin-page_MODELS_cfa-currency_-059e64.js","mappings":"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","sources":["./src/app/POS/pos-accueil/view-state.service.ts","./src/app/admin-page/MODELS/cfa-currency.pipe.ts","./src/app/admin-page/SERVICES/CaisseService/boutique-state.service.ts","./src/app/admin-page/SERVICES/SearchService.ts","./src/app/admin-page/SERVICES/VenteService/calculator.service.ts","./src/app/admin-page/SERVICES/VenteService/scanner.service.ts","./src/app/admin-page/SERVICES/commande-state.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ViewStateService {\n  private isListViewSubject = new BehaviorSubject<boolean>(true);\n  isListView$ = this.isListViewSubject.asObservable();\n\n  setViewPreference(isList: boolean) {\n    this.isListViewSubject.next(isList);\n    localStorage.setItem('viewPreference', isList ? 'list' : 'grid');\n  }\n}","// creez un fichier : cfa-currency.pipe.ts\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'cfaCurrency'\n})\nexport class CfaCurrencyPipe implements PipeTransform {\n  transform(value: number | null | undefined): string {\n    if (value === null || value === undefined || isNaN(value)) {\n      return 'N/A';\n    }\n    const hasDecimals = value % 1 !== 0;\n      const formattedValue = value\n      .toFixed(hasDecimals ? 2 : 0)\n      .replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n\n    return `${formattedValue} FCFA`;\n  }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class BoutiqueStateService {\n  private readonly STORAGE_KEY = 'selectedBoutiqueId';\n\n  // initialisation avec la valeur sessionStorage (ou migration depuis localStorage)\n  private selectedBoutiqueSubject = new BehaviorSubject<number | null>(this.loadInitial());\n  selectedBoutique$ = this.selectedBoutiqueSubject.asObservable();\n\n  constructor() {\n    // rien d'autre à faire ici (loadInitial a déjà effectué la migration si nécessaire)\n  }\n\n  /** Charge la valeur initiale depuis sessionStorage.\n   *  Si une valeur existe dans localStorage (ancienne app), on la migre vers sessionStorage. */\n  private loadInitial(): number | null {\n    // migration depuis localStorage (si nécessaire)\n    const legacy = localStorage.getItem(this.STORAGE_KEY);\n    if (legacy !== null) {\n      try {\n        // transférer dans sessionStorage puis supprimer l'ancien\n        sessionStorage.setItem(this.STORAGE_KEY, legacy);\n      } catch (e) {\n        console.warn('Impossible de migrer la boutique depuis localStorage', e);\n      }\n      localStorage.removeItem(this.STORAGE_KEY);\n    }\n\n    const saved = sessionStorage.getItem(this.STORAGE_KEY);\n    return saved !== null ? Number(saved) : null;\n  }\n\n  setSelectedBoutique(boutiqueId: number | null): void {\n    if (boutiqueId !== null) {\n      sessionStorage.setItem(this.STORAGE_KEY, boutiqueId.toString());\n    } else {\n      sessionStorage.removeItem(this.STORAGE_KEY);\n    }\n    this.selectedBoutiqueSubject.next(boutiqueId);\n  }\n\n  /** retourne la valeur actuelle (ou null si aucune) */\n  getCurrentValue(): number | null {\n    const saved = sessionStorage.getItem(this.STORAGE_KEY);\n    return saved !== null ? Number(saved) : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SearchService {\n  private searchSubject = new BehaviorSubject<string>('');\n  search$ = this.searchSubject.asObservable();\n\n  setSearch(term: string) {\n    this.searchSubject.next(term);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\ninterface CalcState {\n  display: string;\n  operand: number | null;\n  operator: string | null;\n  waitingForOperand: boolean;\n  memory: number;\n  gtAccumulator: number;\n  lastMemoryRecall: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalculatorService {\n  private state: CalcState = this.createInitialState();\n  private _solarDisplay: string = '0000';\n  // private _isActive = new BehaviorSubject<boolean>(true);\n  private _isActive = new BehaviorSubject<boolean>(false);\n  public isActive$ = this._isActive.asObservable();\n\n  private createInitialState(): CalcState {\n    return {\n      display: '0',\n      operand: null,\n      operator: null,\n      waitingForOperand: false,\n      memory: 0,\n      gtAccumulator: 0,\n      lastMemoryRecall: false\n    };\n  }\n\n    /** getters exposés */\n  get display(): string { return this.state.display; }\n  get solarDisplay(): string { return this._solarDisplay; }\n\n  /** Gère l'état actif de la calculatrice pour la capture clavier */\n  setActive(isActive: boolean) {\n    this._isActive.next(isActive);\n  }\n\n  /** Public single entry point for UI */\n  handleKey(key: string) {\n      if (!key) return;\n      // digits\n      if (/^[0-9]|^00$/.test(key)) { this.inputDigit(key); return; }\n      switch (key) {\n      case '.': this.inputDot(); return;\n      case '+': case '−': case '-': case '×': case '*': case '÷': case '/':\n          this.onOperator((key === '*' ? '×' : key === '/' ? '÷' : (key === '-' ? '−' : key)));\n          return;\n      case '=': this.onEquals(); return;\n      case 'ON/AC': this.allClear(); return;\n      case 'C.CE': this.clearEntry(); return;\n      case '▶': this.backspace(); return;\n      case '+/-': this.toggleSign(); return;\n      case '√': this.sqrt(); return;\n      case '%': this.percent(); return;\n      case 'M+': this.memoryAdd(); return;\n      case 'M-': this.memorySub(); return;\n      case 'MC': this.memoryClear(); return;\n      case 'MR': this.memoryRecall(); return;\n      case 'MRC': this.memoryRecallClearToggle(); return;\n      case 'GT': this.getGrandTotal(); return;\n      case '00': this.inputDigit('00'); return;\n      // autres touches laissées en placeholder\n      default: return;\n      }\n  }\n\n  private inputDigit(d: string) {\n    if (this.state.waitingForOperand) {\n      // démarrer une nouvelle saisie : le digit remplace l'affichage\n      this.state.display = (d === '00' ? '0' : d);\n      this.state.waitingForOperand = false;\n      return;\n    }\n    if (d === '00') {\n      if (this.state.display === '0') return;\n      this.state.display = this.state.display + '00';\n      return;\n    }\n    this.state.display = (this.state.display === '0') ? d : this.state.display + d;\n  }\n\n  private inputDot() {\n    if (this.state.waitingForOperand) {\n      this.state.display = '0.';\n      this.state.waitingForOperand = false;\n      return;\n    }\n    if (!this.state.display.includes('.')) {\n      this.state.display = this.state.display + '.';\n    }\n  }\n\n  private clearEntry() {\n    this.state.display = '0';\n    this.state.waitingForOperand = true;\n  }\n\n  private allClear() {\n    this.state = this.createInitialState();\n    this._solarDisplay = '0000';\n  }\n\n  private toggleSign() {\n    if (this.state.display === '0') return;\n    this.state.display = this.state.display.startsWith('-') ? this.state.display.slice(1) : '-' + this.state.display;\n  }\n\n  private backspace() {\n    if (this.state.waitingForOperand) return;\n    const s = this.state.display;\n    if (s.length <= 1 || (s.length === 2 && s.startsWith('-'))) {\n      this.state.display = '0';\n    } else {\n      this.state.display = s.slice(0, -1);\n    }\n  }\n\n  private performOperator(op: string) {\n    const inputValue = parseFloat(this.state.display);\n    if (this.state.operand == null) {\n      this.state.operand = inputValue;\n    } else if (this.state.operator) {\n      const result = this.calculate(this.state.operand, inputValue, this.state.operator);\n      this.state.display = this.formatResult(result);\n      this.state.operand = result;\n      // if user pressed '=' accumulate result to GT\n      if (op === '=' || this.state.operator === '=') {\n        this.state.gtAccumulator += result;\n      }\n    }\n\n    // If op is '=' we clear the operator, otherwise set it\n    this.state.operator = (op === '=' ? null : op);\n    this.state.waitingForOperand = true;\n  }\n\n  private calculate(a: number, b: number, op: string): number {\n    switch (op) {\n      case '+': return a + b;\n      case '−': case '-': return a - b;\n      case '×': return a * b;\n      case '÷': return b === 0 ? NaN : a / b;\n      default: return b;\n    }\n  }\n\nprivate percent() {\n    const cur = parseFloat(this.state.display);\n    if (this.state.operand != null) {\n      const res = this.state.operand * cur / 100;\n      this.state.display = this.formatResult(res);\n      this.state.waitingForOperand = true;\n    } else {\n      this.state.display = this.formatResult(cur / 100);\n      this.state.waitingForOperand = true;\n    }\n  }\n\nprivate sqrt() {\n    const v = parseFloat(this.state.display);\n    if (v < 0) { this.state.display = 'Erreur'; return; }\n    this.state.display = this.formatResult(Math.sqrt(v));\n    this.state.waitingForOperand = true;\n  }\n\n  // simple exponential e^x\n  private exp() {\n    const v = parseFloat(this.state.display);\n    this.state.display = this.formatResult(Math.exp(v));\n    this.state.waitingForOperand = true;\n  }\n\n  // MU: placeholder behaviour — par défaut rien; tu peux remplacer par ta logique commerciale\n  private placeholderMU() {\n    // Exemple : MU peut calculer prix de vente à partir d'un coût + marge.\n    // Ici on n'implémente pas de logique métier par défaut.\n    // Laisser tel quel pour éviter comportement inattendu.\n    return;\n  }\n  \n  /** Lorsqu'on appuie sur un opérateur (ex: + - × ÷) :\n   *  - on stocke la valeur courante dans operand\n   *  - on place cette valeur dans le solarDisplay\n   *  - on remet l'affichage principal à 0 (prêt pour la saisie suivante)\n   */\n  private onOperator(op: string) {\n    const cur = parseFloat(this.state.display);\n    // si operand n'existe pas => stocke la valeur\n    if (this.state.operand == null) {\n      this.state.operand = isNaN(cur) ? 0 : cur;\n    } else if (!this.state.waitingForOperand && this.state.operator) {\n      // si on avait déjà un opérateur et qu'on a saisi un nouveau nombre,\n      // on peut faire un calcul intermédiaire (chaînage) et stocker le résultat\n      const result = this.calculate(this.state.operand, cur, this.state.operator);\n      this.state.operand = result;\n    }\n\n    // afficher dans solar la valeur stockée (ex: 300)\n    this._solarDisplay = this.formatResult(this.state.operand ?? 0);\n\n    // mettre en attente pour remplacer l'écran principal par la prochaine saisie\n    this.state.display = '0';\n    this.state.waitingForOperand = true;\n    this.state.operator = op;\n  }\n\n  /** = : calcule operand operator currentDisplay et affiche le total */\n  private onEquals() {\n    const cur = parseFloat(this.state.display);\n    if (this.state.operand == null || !this.state.operator) {\n      // rien à calculer\n      return;\n    }\n    const result = this.calculate(this.state.operand, cur, this.state.operator);\n    // solar : montrer l'expression (ex: \"300 + 50 =\")\n    this._solarDisplay = `${this.formatResult(this.state.operand)} ${this.state.operator} ${this.formatResult(cur)} =`;\n    // afficher le résultat\n    this.state.display = this.formatResult(result);\n    // reset opérateur mais on peut garder operand si on veut réutiliser\n    this.state.operand = result;\n    this.state.operator = null;\n    this.state.waitingForOperand = true;\n  }\n\n  // Memory & GT (identiques à l'implémentation précédente)\n  private memoryAdd() { this.state.memory += parseFloat(this.state.display); this.state.lastMemoryRecall = false; }\n  private memorySub() { this.state.memory -= parseFloat(this.state.display); this.state.lastMemoryRecall = false; }\n  private memoryClear() { this.state.memory = 0; this.state.lastMemoryRecall = false; }\n  private memoryRecall() { this.state.display = this.formatResult(this.state.memory); this.state.lastMemoryRecall = true; this.state.waitingForOperand = true; }\n  private memoryRecallClearToggle() { if (this.state.lastMemoryRecall) { this.memoryClear(); } else { this.memoryRecall(); } }\n  private getGrandTotal() { this.state.display = this.formatResult(this.state.gtAccumulator); this.state.waitingForOperand = true; }\n\n  private formatResult(value: number): string {\n      if (!isFinite(value)) return 'Erreur';\n      const s = Number.parseFloat(String(value)).toPrecision(12);\n      return parseFloat(s).toString();\n  }\n  \n  public handleComputerKeyboard(event: KeyboardEvent): void {\n    if (!this._isActive.value) return;\n    // Ne fait rien si la calculatrice n'est pas active\n    // if (!this._isActive.value) {\n    //   return;\n    // }\n\n    const key = event.key;\n    \n    // Mapper les touches du clavier aux touches de la calculatrice\n    const keyMap: {[key: string]: string} = {\n      'Enter': '=',\n      'Escape': 'ON/AC',\n      'Backspace': '▶',\n      '+': '+',\n      '-': '−',\n      '*': '×',\n      '/': '÷',\n      '.': '.',\n      '%': '%'\n    };\n    \n    // Gestion des chiffres\n    if (/^[0-9]$/.test(key)) {\n      this.inputDigit(key);\n      return;\n    }\n    \n    // Gestion des touches spéciales mappées\n    if (keyMap[key]) {\n      this.handleKey(keyMap[key]);\n      event.preventDefault();\n      return;\n    }\n    \n    // Gestion de la touche 00\n    if (key === '0' && event.shiftKey) {\n      this.inputDigit('00');\n      event.preventDefault();\n    }\n  }\n\n}\n","// src/app/admin-page/SERVICES/scanner.service.ts\nimport { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nexport interface ScanResult {\n  code: string;\n  success: boolean;\n  message?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScannerService {\n  private scanSubject = new Subject<string>();\n  private scanningSubject = new Subject<boolean>();\n  private barcode = '';\n  private timer: any;\n  private isEnabled = true;\n  private isUserTyping = false;\n  private lastKeyTime = 0;\n  private readonly SCAN_TIMEOUT = 100; // 150ms pour détecter la fin du scan\n  private isScanning = false;\n\n  constructor() {\n    this.setupScannerListener();\n  }\n\n  private setupScannerListener(): void {\n    // Utiliser un listener global pour capturer tous les événements clavier\n    document.addEventListener('keydown', (event: KeyboardEvent) => {\n      this.handleKeyEvent(event);\n    }, true); // true = capture phase pour intercepter avant les autres handlers\n  }\n\n  private handleKeyEvent(event: KeyboardEvent): void {\n    if (!this.isEnabled || this.isScanning) return; // Empêcher les nouveaux scans pendant le traitement\n    // if (!this.isEnabled) return;\n\n    const now = Date.now();\n    const timeSinceLastKey = now - this.lastKeyTime;\n    this.lastKeyTime = now;\n\n    // Ignorer si on est dans un champ de saisie\n    const target = event.target as HTMLElement;\n    if (target && (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable)) {\n      console.log('Scanner: Ignoré - dans un champ de saisie');\n      return;\n    }\n\n    // Si l'utilisateur tape normalement (délai > 200ms entre touches)\n    if (timeSinceLastKey > 200) {\n      console.log('Scanner: Ignoré - utilisateur tape normalement');\n      this.resetScan();\n      return;\n    }\n\n    // Scanner détecté (délai < 100ms entre touches)\n    if (timeSinceLastKey < this.SCAN_TIMEOUT) {\n      console.log('Scanner: Événement de scan détecté, délai:', timeSinceLastKey, 'ms');\n      \n      const key = this.mapAzertyKey(event.key); // Mapper les touches AZERTY\n      \n      if (key === 'Enter') {\n        if (this.barcode.length >= 3) {\n        console.log('Scanner: Code complet détecté:', this.barcode);\n        this.isScanning = true; // Marquer le scan comme en cours\n        this.scanningSubject.next(true);\n        this.scanSubject.next(this.barcode);\n        \n        setTimeout(() => {\n          this.scanningSubject.next(false);\n          this.isScanning = false; // Réactiver après le traitement\n          this.resetScan();\n        }, 100);\n      } else if (this.isScanning) {\n          console.log('Scanner: Scan déjà en cours, ignoré');\n        } else {\n          console.log('Scanner: Code trop court:', this.barcode);\n        }\n        this.resetScan();\n      } else if (key.length === 1 && !event.ctrlKey && !event.metaKey) {\n        this.barcode += key;\n        console.log('Scanner: Caractère ajouté:', key, 'Buffer:', this.barcode);\n        \n        // Réinitialiser le timer\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => {\n          console.log('Scanner: Timeout, reset buffer');\n          this.resetScan();\n        }, 500); // 500ms pour détecter la fin du scan\n      }\n    }\n  }\n\n  // Mapper les touches AZERTY vers QWERTY\n  private mapAzertyKey(key: string): string {\n    const azertyMap: {[key: string]: string} = {\n      '&': '1', 'é': '2', '\"': '3', \"'\": '4', '(': '5',\n      '-': '6', 'è': '7', '_': '8', 'ç': '9', 'à': '0',\n      'ù': '0', '²': '2', '°': '0'\n    };\n    \n    return azertyMap[key] || key;\n  }\n\n  // Réinitialiser l'état du scan\n  private resetScan(): void {\n    this.barcode = '';\n    clearTimeout(this.timer);\n    this.isScanning = false;\n  }\n\n  getScanObservable(): Observable<string> {\n    return this.scanSubject.asObservable();\n  }\n\n  getScanningObservable(): Observable<boolean> {\n    return this.scanningSubject.asObservable();\n  }\n\n  setUserTyping(typing: boolean): void {\n    this.isUserTyping = typing;\n    console.log('Scanner: User typing:', typing);\n  }\n\n  enableScanner(): void {\n    this.isEnabled = true;\n    console.log('Scanner: Activé');\n  }\n\n  disableScanner(): void {\n    this.isEnabled = false;\n    console.log('Scanner: Désactivé');\n  }\n\n  // Méthode de test pour simuler un scan\n  simulateScan(code: string): void {\n    console.log('Scanner: Simulation de scan avec:', code);\n    this.scanSubject.next(code);\n  }\n\n  destroy(): void {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    console.log('Scanner: Service détruit');\n  }\n}","// commande-state.service.ts\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\ninterface Commande {\n  id: string;\n  cart: Map<number, number>;\n  createdAt: Date;\n  totalItems?: number;\n  totalAmount?: number;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class CommandeStateService {\n  // Correction: Changer le type de commandesMap\n  private commandesMap = new Map<string, Commande>();\n  private commandesIds: string[] = ['001'];\n  private activeCommandeId = new BehaviorSubject<string>('001');\n  \n  activeCommandeId$ = this.activeCommandeId.asObservable();\n\n  private commandesIdsSubject = new BehaviorSubject<string[]>(this.commandesIds);\n  commandesIds$ = this.commandesIdsSubject.asObservable();\n\n  private commandeUpdated = new Subject<void>();\n  commandeUpdated$ = this.commandeUpdated.asObservable();\n\n\n  constructor() {\n    this.commandesMap.set('001', { \n      id: '001', \n      cart: new Map<number, number>(),\n      createdAt: new Date()\n    });\n  }\n\n  getCommandeDetails(id: string): Commande | undefined {\n    return this.commandesMap.get(id);\n  }\n\n  updateCommandeTotals(id: string, totalItems: number, totalAmount: number) {\n    const commande = this.commandesMap.get(id);\n    if (commande) {\n      commande.totalItems = totalItems;\n      commande.totalAmount = totalAmount;\n      this.commandesMap.set(id, commande);\n      \n    }\n  }\n\n  setActiveCommande(id: string) {\n    if (!this.commandesMap.has(id)) {\n      this.commandesMap.set(id, { \n        id, \n        cart: new Map<number, number>(),\n        createdAt: new Date()\n      });\n      this.commandesIds.push(id);\n    }\n    this.activeCommandeId.next(id);\n  }\n\n  // Correction: Retourner le cart de la commande\n  getActiveCart() {\n    const activeId = this.activeCommandeId.getValue();\n    const commande = this.commandesMap.get(activeId);\n    return commande ? commande.cart : new Map<number, number>();\n  }\n\n  updateActiveCart(cart: Map<number, number>) {\n    const activeId = this.activeCommandeId.getValue();\n    const commande = this.commandesMap.get(activeId);\n    if (commande) {\n      commande.cart = new Map(cart);\n      this.commandesMap.set(activeId, commande);\n    }\n  }\n\n  getAllCommandesIds() {\n    return [...this.commandesIds];\n  }\n\n  addNewCommande() {\n    const newId = (this.commandesIds.length + 1).toString().padStart(3, '0');\n    const newCommande: Commande = {\n      id: newId,\n      cart: new Map<number, number>(),\n      createdAt: new Date()\n    };\n    this.commandesMap.set(newId, newCommande);\n    this.commandesIds.push(newId);\n    this.commandesIdsSubject.next([...this.commandesIds]); // Notifier du changement\n    return newId;\n  }\n\n  // Ajout de la méthode removeCommande\n  removeCommande(id: string): void {\n    if (id === '001') {\n      // Ne pas supprimer la commande par défaut\n      return;\n    }\n    this.commandesMap.delete(id);\n    this.commandeUpdated.next();\n    const index = this.commandesIds.indexOf(id);\n    if (index !== -1) {\n      this.commandesIds.splice(index, 1);\n    }\n    // Si on supprime la commande active, on active la première commande\n    if (this.activeCommandeId.getValue() === id) {\n      this.activeCommandeId.next(this.commandesIds[0] || '001');\n    }\n    this.commandesIdsSubject.next([...this.commandesIds]);\n  }\n  \n  // Ajout d'une méthode pour obtenir l'ID actif\n  getActiveCommandeId(): string {\n    return this.activeCommandeId.getValue();\n  }\n}"],"names":["BehaviorSubject","ViewStateService","constructor","isListViewSubject","isListView$","asObservable","setViewPreference","isList","next","localStorage","setItem","factory","ɵfac","providedIn","CfaCurrencyPipe","transform","value","undefined","isNaN","hasDecimals","formattedValue","toFixed","replace","pure","BoutiqueStateService","STORAGE_KEY","selectedBoutiqueSubject","loadInitial","selectedBoutique$","legacy","getItem","sessionStorage","e","console","warn","removeItem","saved","Number","setSelectedBoutique","boutiqueId","toString","getCurrentValue","SearchService","searchSubject","search$","setSearch","term","CalculatorService","state","createInitialState","_solarDisplay","_isActive","isActive$","display","operand","operator","waitingForOperand","memory","gtAccumulator","lastMemoryRecall","solarDisplay","setActive","isActive","handleKey","key","test","inputDigit","inputDot","onOperator","onEquals","allClear","clearEntry","backspace","toggleSign","sqrt","percent","memoryAdd","memorySub","memoryClear","memoryRecall","memoryRecallClearToggle","getGrandTotal","d","includes","startsWith","slice","s","length","performOperator","op","inputValue","parseFloat","result","calculate","formatResult","a","b","NaN","cur","res","v","Math","exp","placeholderMU","isFinite","String","toPrecision","handleComputerKeyboard","event","keyMap","preventDefault","shiftKey","Subject","ScannerService","scanSubject","scanningSubject","barcode","isEnabled","isUserTyping","lastKeyTime","SCAN_TIMEOUT","isScanning","setupScannerListener","document","addEventListener","handleKeyEvent","now","Date","timeSinceLastKey","target","tagName","isContentEditable","log","resetScan","mapAzertyKey","setTimeout","ctrlKey","metaKey","clearTimeout","timer","azertyMap","getScanObservable","getScanningObservable","setUserTyping","typing","enableScanner","disableScanner","simulateScan","code","destroy","CommandeStateService","commandesMap","Map","commandesIds","activeCommandeId","activeCommandeId$","commandesIdsSubject","commandesIds$","commandeUpdated","commandeUpdated$","set","id","cart","createdAt","getCommandeDetails","get","updateCommandeTotals","totalItems","totalAmount","commande","setActiveCommande","has","push","getActiveCart","activeId","getValue","updateActiveCart","getAllCommandesIds","addNewCommande","newId","padStart","newCommande","removeCommande","delete","index","indexOf","splice","getActiveCommandeId"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}