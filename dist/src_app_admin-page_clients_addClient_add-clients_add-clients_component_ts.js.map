{"version":3,"file":"src_app_admin-page_clients_addClient_add-clients_add-clients_component_ts.js","mappings":"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","sources":["./src/app/admin-page/SERVICES/entreprise-service.ts","./src/app/admin-page/clients/addClient/add-clients/add-clients.component.ts","./src/app/admin-page/clients/addClient/add-clients/add-clients.component.html"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, catchError, Observable, switchMap, tap, throwError } from \"rxjs\";\nimport { Entreprise } from \"../MODELS/entreprise-model\";\nimport { EntrepriseClient } from \"../MODELS/entreprise-clients-model\";\nimport { environment } from \"src/environments/environment\";\nimport { UsersService } from \"./users.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntrepriseService {\n    private apiUrl = environment.apiBaseUrl;\n  \n\n  private entrepriseSubject = new BehaviorSubject<Entreprise[]>([]);\n  public entreprise$ = this.entrepriseSubject.asObservable(); \n  constructor(private http: HttpClient, private usersService: UsersService) { }\n\n  // Dans client.service.ts\n// Dans entreprise.service.ts\n getListEntreprises(): Observable<EntrepriseClient[]> {\n  return this.usersService.getValidAccessToken().pipe(\n    switchMap(token => {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n      return this.http.get<EntrepriseClient[]>(`${this.apiUrl}/entreprises`, { headers });\n    }),\n    catchError(error => {\n      let errorMsg = 'Erreur inconnue';\n      if (error.error instanceof ErrorEvent) {\n        errorMsg = `Erreur: ${error.error.message}`;\n      } else if (error.status === 404) {\n        errorMsg = 'Aucune entreprise trouvée';\n      }\n      return throwError(() => new Error(errorMsg));\n    })\n  );\n}\n\n\n  // Ajouter une entreprise\n addEntreprise(entreprise: Entreprise): Observable<Entreprise> {\n  return this.usersService.getValidAccessToken().pipe(\n    switchMap(token => {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n\n      return this.http.post<Entreprise>(`${this.apiUrl}/entreprise-clients`, entreprise, { headers });\n    }),\n    tap((newEntreprise) => {\n      const currentEntreprise = this.entrepriseSubject.value;\n      this.entrepriseSubject.next([...currentEntreprise, newEntreprise]);\n    }),\n    catchError(error => {\n      let errorMsg = 'Erreur inconnue';\n      if (error.error instanceof ErrorEvent) {\n        errorMsg = `Erreur: ${error.error.message}`;\n      } else if (error.status === 400) {\n        errorMsg = error.error || 'Données invalides';\n      }\n      return throwError(() => new Error(errorMsg));\n    })\n  );\n}\n\n\n  // List de tout les entreprises\n getListEntreprise(): Observable<Entreprise[]> {\n  return this.usersService.getValidAccessToken().pipe(\n    switchMap(token => {\n      if (!token) {\n        console.error('Token vide ou non défini ! Vérifiez que l\\'utilisateur est bien connecté.');\n        return throwError(() => new Error('Token manquant'));\n      }\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n      console.log(\"En-têtes envoyés : \", headers);\n\n      return this.http.get<Entreprise[]>(`${this.apiUrl}/entreprises`, { headers });\n    }),\n    tap(data => {\n      this.entrepriseSubject.next(data);\n    }),\n    catchError(error => {\n      console.error('Erreur lors de la récupération des entreprises:', error);\n      return throwError(() => error);\n    })\n  );\n}\n\n\n\n  // Recuperer information d'une entreprise de la user connecter\n getEntrepriseById(id: number): Observable<Entreprise> {\n  return this.usersService.getValidAccessToken().pipe(\n    switchMap(token => {\n      if (!token) {\n        console.error('Token manquant');\n        return throwError(() => new Error('Token manquant'));\n      }\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n      return this.http.get<Entreprise>(`${this.apiUrl}/entreprises/${id}`, { headers });\n    }),\n    catchError(error => {\n      let errorMsg = 'Erreur inconnue';\n      if (error.error instanceof ErrorEvent) {\n        errorMsg = `Erreur: ${error.error.message}`;\n      } else if (error.status === 404) {\n        errorMsg = 'Entreprise non trouvée';\n      }\n      return throwError(() => new Error(errorMsg));\n    })\n  );\n}\n\n\n  updateEntreprise(id: number, formData: FormData): Observable<string> {\n  return this.usersService.getValidAccessToken().pipe(\n    switchMap(token => {\n      if (!token) {\n        return throwError(() => new Error('Token manquant'));\n      }\n\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n\n      return this.http.patch(`${this.apiUrl}/updateEntreprise/${id}`, formData, {\n        headers,\n        responseType: 'text' // réponse en texte brut\n      });\n    }),\n    catchError(error => {\n      let errorMsg = 'Erreur inconnue';\n      if (error.error instanceof ErrorEvent) {\n        errorMsg = `Erreur: ${error.error.message}`;\n      } else if (error.status === 400) {\n        errorMsg = error.error || 'Données invalides';\n      }\n      return throwError(() => new Error(errorMsg));\n    })\n  );\n}\n\n\n  // updateEntreprise(id: number, formData: FormData): Observable<any> {\n  //   const token = localStorage.getItem('accessToken') || '';\n  //   const headers = new HttpHeaders({\n  //     'Authorization': `Bearer ${token}`\n  //   });\n\n  //   return this.http.patch(`${this.apiUrl}/updateEntreprise/${id}`, formData, { headers }).pipe(\n  //     catchError(error => {\n  //       let errorMsg = 'Erreur inconnue';\n  //       if (error.error instanceof ErrorEvent) {\n  //         errorMsg = `Erreur: ${error.error.message}`;\n  //       } else if (error.status === 400) {\n  //         errorMsg = error.error || 'Données invalides';\n  //       }\n  //       return throwError(() => new Error(errorMsg));\n  //     })\n  //   );\n  // }\n\n  // Get entreprise d'un user\n  getEntrepriseInfo(): Observable<Entreprise> {\n  return this.usersService.getValidAccessToken().pipe(\n    switchMap(token => {\n      if (!token) {\n        return throwError(() => new Error('Aucun token trouvé'));\n      }\n\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${token}`\n      });\n\n      return this.http.get<Entreprise>(`${this.apiUrl}/myEntreprise`, { headers }).pipe(\n        tap(entreprise => {\n          localStorage.setItem('entreprise', JSON.stringify(entreprise));\n        })\n      );\n    }),\n    catchError(error => {\n      console.error('Erreur récupération info entreprise:', error);\n      return throwError(() => error);\n    })\n  );\n}\n\n\n  // Simpl dcodage JWT pour vérifier si le token est expiré\n  decodeJwt(token: string): any {\n    return JSON.parse(atob(token.split('.')[1]));\n  }\n  \n  // Vérifier si le token est expiré\n  isTokenExpired(decodedToken: any): boolean {\n    const expirationDate = new Date(decodedToken.exp * 1000);\n    return expirationDate < new Date();\n  }\n    \n  // Rafraîchir le token avec un refresh token (si applicable)\n  getNewTokenFromApi(): Observable<{ token: string }> {\n    const refreshToken = localStorage.getItem('refreshToken');\n    return this.http.post<{ token: string }>(`${this.apiUrl}/refresh-token`, { refreshToken });\n  }\n\n \n}","\nimport { CommonModule } from '@angular/common';\nimport { Token } from '@angular/compiler';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { Router } from '@angular/router';\nimport imageCompression from 'browser-image-compression';\nimport { Observable, startWith, map, of, BehaviorSubject, combineLatest, switchMap, throwError } from 'rxjs';\nimport { Clients } from 'src/app/admin-page/MODELS/clients-model';\nimport { Entreprise } from 'src/app/admin-page/MODELS/entreprise-model';\nimport { ClientService } from 'src/app/admin-page/SERVICES/client-service';\nimport { EntrepriseService } from 'src/app/admin-page/SERVICES/entreprise-service';\nimport { UsersService } from 'src/app/admin-page/SERVICES/users.service';\n\n@Component({\n  selector: 'app-add-clients',\n  standalone: true,\n  imports: [\n    FormsModule,\n    CommonModule,\n    ReactiveFormsModule,\n    MatAutocompleteModule, \n  ],\n  templateUrl: './add-clients.component.html',\n  styleUrl: './add-clients.component.scss'\n})\nexport class AddClientsComponent implements OnInit {\n  errorMessage: string = '';\n  errorMessageApi: string = '';\n  successMessage = '';\n  clientForm!: FormGroup;\n  entrepriseForm!: FormGroup;\n  isEntrepriseSelected = false;\n  showPopup = false;\n  urllink: string = \"assets/img/appareil.jpg\";\n  newPhotoUrl: string | null = null;\n  selectedFile: File | null | undefined = null;\n  imageFile: File | null = null;\n  control = new FormControl();\n  filteredOptions: Observable<Entreprise[]> = of([]);\n  loading = false;\n  optionsEntreprise$ = new BehaviorSubject<Entreprise[]>([]);\n  entrepriseRequiredError = false;\n  isLoading: boolean = false;\n  indicatif: string = '';\n  maxPhoneLength: number = 0;\n  entrepriseIndicatif: string = '';\n  entrepriseMaxPhoneLength: number = 0;\n\n  paysIndicatifs: { [key: string]: { indicatif: string, longueur: number } } = {\n  'Mali': { indicatif: '+223', longueur: 8 },\n  'Sénégal': { indicatif: '+221', longueur: 9 },\n  'Côte d\\'Ivoire': { indicatif: '+225', longueur: 10 },\n  'Burkina Faso': { indicatif: '+226', longueur: 8 },\n  'Niger': { indicatif: '+227', longueur: 8 },\n  'France': { indicatif: '+33', longueur: 9 },\n  'Belgique': { indicatif: '+32', longueur: 9 },\n  'Suisse': { indicatif: '+41', longueur: 9 },\n  'Canada': { indicatif: '+1', longueur: 10 },\n  'États-Unis': { indicatif: '+1', longueur: 10 },\n  'Maroc': { indicatif: '+212', longueur: 9 },\n  'Algérie': { indicatif: '+213', longueur: 9 },\n  'Tunisie': { indicatif: '+216', longueur: 8 },\n  'Togo': { indicatif: '+228', longueur: 8 },\n  'Bénin': { indicatif: '+229', longueur: 8 },\n  'Guinée': { indicatif: '+224', longueur: 9 },\n  'Tchad': { indicatif: '+235', longueur: 8 },\n  'Cameroun': { indicatif: '+237', longueur: 9 },\n  'RDC': { indicatif: '+243', longueur: 9 },\n  'Gabon': { indicatif: '+241', longueur: 9 },\n  'Afrique du Sud': { indicatif: '+27', longueur: 9 },\n  'Rwanda': { indicatif: '+250', longueur: 9 },\n  'Kenya': { indicatif: '+254', longueur: 9 },\n  'Nigéria': { indicatif: '+234', longueur: 10 },\n  'Ghana': { indicatif: '+233', longueur: 9 },\n  'Éthiopie': { indicatif: '+251', longueur: 9 },\n  'Égypte': { indicatif: '+20', longueur: 10 },\n  'Inde': { indicatif: '+91', longueur: 10 },\n  'Chine': { indicatif: '+86', longueur: 11 },\n  'Mexique': { indicatif: '+52', longueur: 10 },\n  'Allemagne': { indicatif: '+49', longueur: 10 },\n  'Espagne': { indicatif: '+34', longueur: 9 },\n  'Italie': { indicatif: '+39', longueur: 10 },\n  'Royaume-Uni': { indicatif: '+44', longueur: 10 },\n  'Pays-Bas': { indicatif: '+31', longueur: 9 },\n  'Portugal': { indicatif: '+351', longueur: 9 }\n  };\n\n  paysKeys: string[] = Object.keys(this.paysIndicatifs);\n\n  constructor(\n    private router: Router,\n    private fb: FormBuilder,\n    private entrepriseService: EntrepriseService,\n    private clientService: ClientService,\n    private usersService: UsersService,\n  ) {}\n\nonPaysChange(event: any): void {\n  const paysSelectionne = event.target.value;\n  const paysInfo = this.paysIndicatifs[paysSelectionne];\n\n  if (!paysInfo) return;\n\n  this.indicatif = paysInfo.indicatif;\n  this.maxPhoneLength = paysInfo.longueur;\n\n  const ctrl = this.clientForm.get('telephone');\n  let currentValue = ctrl?.value ?? '';\n\n  const prefix = this.indicatif.replace(/\\D/g, '');\n  const valueNumerique = currentValue.replace(/\\D/g, '');\n\n  if (!valueNumerique.startsWith(prefix)) {\n    ctrl?.setValue(this.indicatif);\n  } else {\n    const reste = valueNumerique.slice(prefix.length, prefix.length + this.maxPhoneLength);\n    ctrl?.setValue(this.indicatif + reste);\n  }\n\n  this.updatePhoneValidator(paysInfo.longueur);\n}\n\n\n\nprivate updatePhoneValidator(longueur: number): void {\n  const ctrl = this.clientForm.get('telephone');\n  const regex = new RegExp(`^\\\\${this.indicatif}\\\\s?\\\\d{${longueur}}$`);\n  ctrl?.setValidators([Validators.required, Validators.pattern(regex)]);\n  ctrl?.updateValueAndValidity();\n}\n\n  \n  formatPhoneNumber(): void {\n    let valeur = this.clientForm.get('telephone')?.value;\n    \n    if (!valeur.startsWith(this.indicatif)) {\n      this.clientForm.get('telephone')?.setValue(this.indicatif);\n      return;\n    }\n  \n    const chiffres = valeur.replace(this.indicatif, '').replace(/\\D/g, '');\n    const numeroFormate = this.indicatif + chiffres;\n    this.clientForm.get('telephone')?.setValue(numeroFormate.slice(0, this.indicatif.length + this.maxPhoneLength));\n  }\n\n  async testImageCompression(file: File) {\n    if (!file) {\n      console.log('Aucun fichier sélectionné.');\n      return;\n    }\n  \n    console.log('Taille originale:', file.size / 1024, 'Ko');\n  \n    // Options de compression\n    const options = {\n      maxSizeMB: 1,\n      maxWidthOrHeight: 1000,\n      useWebWorker: true,\n    };\n  \n    try {\n      const compressedFile = await imageCompression(file, options);\n      console.log('Taille après compression:', compressedFile.size / 1024, 'Ko');\n  \n      // Vérifier si le fichier est bien en PNG/JPEG après compression\n      if (compressedFile.type !== 'image/png' && compressedFile.type !== 'image/jpeg') {\n        console.error('Le fichier compressé n\\'est pas un format supporté (PNG ou JPEG).');\n        this.errorMessage = 'Erreur de compression : Le format de l\\'image n\\'est pas valide.';\n        return;\n      }\n  \n      // Lire l'image compressée et afficher l'aperçu\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        this.newPhotoUrl = e.target?.result as string;\n        console.log('Image compressée prête à être affichée !');\n      };\n      reader.readAsDataURL(compressedFile);\n    } catch (error) {\n      console.error('Erreur lors de la compression:', error);\n    }\n  }\n\n  onFileSelected(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    if (input.files && input.files.length > 0) {\n      const file = input.files[0];\n  \n      // Vérification du format du fichier\n      const allowedFormats = ['image/jpeg', 'image/png', 'image/jpg'];\n      if (!allowedFormats.includes(file.type)) {\n        this.errorMessage = 'Le fichier doit être une image (JPG, PNG)';\n        return;\n      }\n      this.selectedFile = file;\n      this.imageFile = file;\n  \n      // Tester la compression\n      this.testImageCompression(file);\n\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        this.newPhotoUrl = e.target?.result as string;\n      };\n      reader.readAsDataURL(this.selectedFile);\n    }\n  }\n\n  goToStock() {\n    this.router.navigate(['/clients']);\n  }\n\n  ngOnInit() {\n    this.getListEntreprise();\n    this.initEntreprise();\n    this.getClientForm();\n    // this.getEntrepriseForm();\n    this.loadEntreprises();\n  }\n\n  getClientForm() {\n    this.clientForm = this.fb.group({\n      nomComplet: ['', [Validators.required, Validators.minLength(2)]],\n      email: ['', [Validators.email]],\n      telephone: ['', Validators.required],\n      adresse: [''],\n      poste: [''],\n      pays: [''],\n      ville: ['']\n    });\n  }\n\n  // getEntrepriseForm() {\n  //   this.entrepriseForm = this.fb.group({\n  //     nom: ['', Validators.required],\n  //     email: ['', Validators.email],\n  //     telephone: [''],\n  //     adresse: ['']\n  //   });\n  // }\n\n  onEntreprisePaysChange(event: any): void {\n    const paysSelectionne = event.target.value;\n    const paysInfo = this.paysIndicatifs[paysSelectionne];\n  \n    if (paysInfo) {\n      this.entrepriseIndicatif = `${paysInfo.indicatif} `;\n      this.entrepriseMaxPhoneLength = this.entrepriseIndicatif.length + paysInfo.longueur;\n  \n      if (!this.entrepriseForm.get('telephone')?.value.startsWith(this.entrepriseIndicatif)) {\n        this.entrepriseForm.get('telephone')?.setValue(this.entrepriseIndicatif);\n      }\n  \n      this.updateEntreprisePhoneValidator(paysInfo.longueur);\n    }\n  }\n\n  updateEntreprisePhoneValidator(longueur: number): void {\n    this.entrepriseForm.controls['telephone'].setValidators([\n      Validators.pattern(`^\\\\${this.entrepriseIndicatif}\\\\d{${longueur}}$`)\n    ]);\n    this.entrepriseForm.controls['telephone'].updateValueAndValidity();\n  }\n  \n  formatEntreprisePhoneNumber(): void {\n    let valeur = this.entrepriseForm.get('telephone')?.value;\n    \n    if (!valeur.startsWith(this.entrepriseIndicatif)) {\n      this.entrepriseForm.get('telephone')?.setValue(this.entrepriseIndicatif);\n      return;\n    }\n  \n    const chiffres = valeur.replace(this.entrepriseIndicatif, '').replace(/\\D/g, '');\n    const numeroFormate = this.entrepriseIndicatif + chiffres;\n    this.entrepriseForm.get('telephone')?.setValue(numeroFormate.slice(0, this.entrepriseIndicatif.length + this.entrepriseMaxPhoneLength));\n  }\n\n  private loadEntreprises() {\n    const token = localStorage.getItem('accessToken') || '';\n    if (!token) return;\n\n    this.entrepriseService.getListEntreprise().subscribe(\n        (list: Entreprise[]) => {\n            this.optionsEntreprise$.next(list);\n            this.setupAutocomplete();\n        },\n        err => {\n            // console.error('Erreur lors de la récupération des entreprises :', err);\n            // this.errorMessage = err.error?.error || 'Client physiques';\n        }\n    );\n  }\n\n  // Ajouter une nouvelle méthode pour configurer l'autocomplete :\n  private setupAutocomplete() {\n    this.filteredOptions = combineLatest([\n      this.control.valueChanges.pipe(\n        startWith(''),\n        map(value => typeof value === 'string' ? value : value?.nom)\n      ),\n      this.optionsEntreprise$\n    ]).pipe(\n      map(([name, entreprises]) => \n        name ? this._filter(name, entreprises) : entreprises\n      )\n    );\n  }\n\ngetListEntreprise() {\n  this.usersService.getValidAccessToken().pipe(\n    switchMap(token => {\n      if (!token) {\n        console.error('Aucun token valide trouvé !');\n        return throwError(() => new Error('Aucun token trouvé'));\n      }\n      return this.entrepriseService.getListEntreprise();\n    })\n  ).subscribe({\n    next: (entreprises) => {\n      console.log('Entreprises reçues depuis l\\'API :', entreprises);\n      this.optionsEntreprise$.next(entreprises); \n\n      this.filteredOptions = this.control.valueChanges.pipe(\n        startWith<string | Entreprise>(''),\n        map(value => (value ? (typeof value === 'string' ? value : value.nom) : '')),\n        map(name => (name ? this._filter(name, this.optionsEntreprise$.value) : this.optionsEntreprise$.value.slice()))\n      );\n    },\n    error: (error) => {\n      // console.error('Erreur lors de la récupération des entreprises :', error);\n    }\n  });\n}\n\n\n  private _filter(name: string, entreprises: Entreprise[]): Entreprise[] {\n    const filterValue = name.toLowerCase();\n    return entreprises.filter(e =>\n        e.nom.toLowerCase().includes(filterValue)\n    );\n  }\n\n  displayFnEntreprise(e?: Entreprise): string {\n    return e ? e.nom : '';\n  }\n\n  // Methode pour la selection d'un entreprise\n  onEntrepriseSelected(event: any): void {\n    // console.log(\"Entreprise selectionner :\", event.entreprise.value);\n    // if (event.entreprise && event.entreprise.value) {\n    //   this.ajouteEntrepriseForm.get('entrepriseId')?.setValue(event.option.value.id);\n    // } else {\n    //   this.ajouteEntrepriseForm.get('entrepriseId')?.setValue(null);\n    // }\n  }\n\n  // Ouvre/ferme le popup d’entreprise\n  openPopup() { this.showPopup = true; }\n  closePopup() { this.showPopup = false; }\n  \n  initEntreprise() {\n    this.entrepriseForm = this.fb.group({\n      nom: ['', Validators.required],\n      pays: [''],\n      email: [''],\n      telephone: [''],\n      adresse: [''],\n      siege: [''],\n      secteur: [''],\n    });\n  }\n\n  ajouterEntreprise() {\n    if (this.entrepriseForm.invalid) return;\n  \n    const newEntreprise: Entreprise = {\n      nom: this.entrepriseForm.value.nom,\n      pays: this.entrepriseForm.value.pays,\n      email: this.entrepriseForm.value.email,\n      telephone: this.entrepriseForm.value.telephone,\n      adresse: this.entrepriseForm.value.adresse,\n      siege: this.entrepriseForm.value.siege,\n      secteur: this.entrepriseForm.value.secteur,\n      logo : this.entrepriseForm.value.logo,\n      nif: this.entrepriseForm.value.nif,\n      nina: this.entrepriseForm.value.nina,\n      banque: this.entrepriseForm.value.banque,\n      rccm: this.entrepriseForm.value.rccm,\n      siteWeb: this.entrepriseForm.value.siteWeb,\n      signataire: this.entrepriseForm.value.signataire,\n      signataireNom: this.entrepriseForm.value.signataireNom,\n      prefixe: this.entrepriseForm.value.prefixe,\n      suffixe: this.entrepriseForm.value.suffixe,\n      tauxTva: this.entrepriseForm.value.tauxTva,\n      signaturNum: this.entrepriseForm.value.signaturNum,\n      cachetNum: this.entrepriseForm.value.cachetNum\n\n\n\n\n    };\n  \n    this.entrepriseService.addEntreprise(newEntreprise).subscribe({\n      next: (createdEntreprise) => {\n        const current = this.optionsEntreprise$.value;\n        this.optionsEntreprise$.next([createdEntreprise, ...current]);\n        this.control.setValue(createdEntreprise);\n        this.closePopup();\n        this.entrepriseForm.reset();\n      },\n      error: (error) => {\n        this.errorMessageApi = error.message || 'Erreur lors de la création';\n      }\n    });\n  }\n\n  // Soumission du formulaire client\n  ajouterClient() {\n    this.errorMessage = '';\n    this.successMessage = '';\n    this.entrepriseRequiredError = false;\n  \n    // Vérification de la sélection d'entreprise\n    if (this.isEntrepriseSelected) {\n      const entrepriseSelectionnee = this.control.value; \n      if (!entrepriseSelectionnee || !entrepriseSelectionnee.id) {\n        this.entrepriseRequiredError = true;\n        return;\n      }\n    }\n  \n    if (this.clientForm.invalid) {\n      this.errorMessage = 'Veuillez corriger les erreurs du formulaire.';\n      return;\n    }\n  \n    this.isLoading = true; // Active le loading\n  \n    const client: Clients = this.clientForm.value;\n    \n    if (this.isEntrepriseSelected) {\n      const selected = this.control.value as Entreprise;\n      if (selected && selected.id) {\n        client.entrepriseClient = { id: selected.id } as Entreprise;\n      }\n    }\n  \n    // Simuler un délai (optionnel)\n    setTimeout(() => {\n      this.clientService.addClient(client).subscribe({\n        next: res => {\n          this.isLoading = false; // Désactive le loading\n          this.successMessage = res.message;\n          this.clientForm.reset();\n          this.isEntrepriseSelected = false;\n          this.goToClients();\n        },\n        error: err => {\n          this.isLoading = false; // Désactive le loading en cas d'erreur\n          this.errorMessage = err.error?.error || 'Erreur lors de la création';\n        }\n      });\n    }, 2000); // Retirez le setTimeout si non nécessaire\n  }\n\n  // Annuler et revenir à la liste\n  goToClients() {\n    this.router.navigate(['/clients']);\n  }\n\n  navigateBack() {\n    this.router.navigate(['/clients'])\n  }\n\n}\n","<div class=\"container_global\">\n  <div *ngIf=\"isLoading\" class=\"loading-overlay\">\n    <div class=\"loading-content\">\n      <div class=\"spinner\"></div>\n      <p>Creation en cours...</p>\n    </div>\n  </div>\n\n    <div class=\"content_formulaire\">\n      <div class=\"modal-body\">\n        <form [formGroup]=\"clientForm\" class=\"container_formulaire\">\n\n          <!-- Icon return  -->\n          <p class=\"retour_icon_text\" (click)=\"navigateBack()\" style=\"cursor: pointer; color: #0672E4; margin-bottom: 15px;\" title=\"Retour sur la page client\">\n              <i class=\"ri-arrow-left-s-line\"></i> <span style=\"margin-left: 8px; font-size: 12px;\">Clients</span>\n          </p>\n\n          <!-- Titre d'ajout de produits -->\n          <div class=\"Title\">\n            <h3>Ajouter un client individuel</h3>\n          </div>\n  \n          <div class=\"form_left_right\">\n            <div class=\"formulaire\">\n              <!-- Cadre contenant le select et la description -->\n              <div class=\"information_cadre\">\n                <div class=\"info_titre_input\">\n                  \n                  <div class=\"double_input\">\n                    <!-- Nom et prenom -->\n                    <div class=\"champ_input champ_input2\">\n                      <input type=\"text\" class=\"input_focus\"\n                                id=\"nomComplet\" formControlName=\"nomComplet\"\n                                name=\"nomComplet\"\n                                placeholder=\"Saisis le nom et prénom\">\n                      <label for=\"nomComplet\" class=\"label\">Nom et prénom</label>\n                      <div *ngIf=\"clientForm.get('nomComplet')?.touched && clientForm.get('nomComplet')?.invalid\" class=\"error\">\n                        <small *ngIf=\"clientForm.get('nomComplet')?.errors?.['required']\">Champ requis.</small>\n                        <small *ngIf=\"clientForm.get('nomComplet')?.errors?.['minlength']\">Au moins 2 caractères.</small>\n                      </div>\n                    </div>\n                    <!-- Email -->\n                    <div class=\"champ_input champ_input2\">\n                      <input type=\"email\" class=\"input_focus\"\n                                id=\"email\" formControlName=\"email\"\n                                name=\"email\"\n                                placeholder=\"Saisis l'email\">\n                      <label for=\"email\" class=\"label\">Email</label>\n                      <div *ngIf=\"clientForm.get('email')?.touched && clientForm.get('email')?.invalid\" class=\"error\">\n                        <small *ngIf=\"clientForm.get('email')?.errors?.['email']\">Format invalide.</small>\n                      </div>\n                    </div>\n\n                  </div>\n                  <div class=\"double_input\">\n                    <!-- Adresse -->\n                    <div class=\"champ_input champ_input2\">\n                      <input class=\"input_focus\"\n                                id=\"adresse\" formControlName=\"adresse\"\n                                name=\"adresse\"\n                                placeholder=\"Saisis l'adresse\">\n                      <label for=\"adresse\" class=\"label\">Adresse</label>\n                    </div>\n\n                    <!-- Poste -->\n                    <div class=\"champ_input champ_input2\">\n                      <input class=\"input_focus\"\n                                id=\"poste\" formControlName=\"poste\"\n                                name=\"poste\"\n                                placeholder=\"Saisissez votre poste \">\n                      <label for=\"poste\" class=\"label\">Poste</label>\n                    </div>\n\n                  </div>\n\n                  <!-- Modifiez le sélecteur de pays et le champ téléphone -->\n                  <div class=\"grid_colonne\">\n                    <!-- Pays -->\n                       <div class=\"champ_input div1\">\n                  <select class=\"input_focus\" formControlName=\"pays\" (change)=\"onPaysChange($event)\">\n                    <option value=\"\" disabled selected>Pays</option>\n                    <option *ngFor=\"let nomPays of paysKeys\" [value]=\"nomPays\">\n                      {{ nomPays }} ({{ paysIndicatifs[nomPays].indicatif }})\n                    </option>\n                  </select>\n                  <label for=\"pays\" class=\"label\">Pays</label>\n                  <div *ngIf=\"clientForm.get('pays')?.invalid && clientForm.get('pays')?.touched\" class=\"error\">\n                    <small>Ce champ est requis</small>\n                  </div>\n                </div>\n\n                    <!-- Téléphone -->\n                    <div class=\"champ_input div2\">\n                      <input type=\"tel\" class=\"input_focus\"\n                             id=\"telephone\" formControlName=\"telephone\"\n                             name=\"telephone\"\n                             placeholder=\"Saisis le numéro de téléphone\"\n                             (input)=\"formatPhoneNumber()\">\n                      <label for=\"telephone\" class=\"label\">Téléphone</label>\n                    \n                      <!-- Message d'erreur si pattern invalide -->\n                      <div *ngIf=\"\n                            clientForm.get('telephone')?.touched &&\n                            clientForm.get('telephone')?.errors?.['pattern'] &&\n                            clientForm.get('pays')?.value as pays\n                          \" class=\"error\">\n                        <small>\n                          Le numéro doit contenir\n                          {{ paysIndicatifs[pays].longueur }}\n                          chiffres après l’indicatif {{ paysIndicatifs[pays].indicatif.trim() }}.\n                        </small>\n                      </div>\n                    \n                      <!-- Éventuellement, message pour champ requis -->\n                      <div *ngIf=\"\n                            clientForm.get('telephone')?.touched &&\n                            clientForm.get('telephone')?.errors?.['required']\n                          \" class=\"error\">\n                        <small>Le téléphone est requis.</small>\n                      </div>\n                    </div>                    \n\n                    <!-- Ville -->\n                    <div class=\"champ_input div3\">\n                      <input class=\"input_focus\"\n                                id=\"ville\" formControlName=\"ville\"\n                                name=\"ville\"\n                                placeholder=\"Saisis la ville\">\n                      <label for=\"ville\" class=\"label\">Ville</label>\n                    </div>\n                  </div>\n                                    \n                </div>\n              </div>\n\n              <!-- Les information des produit Inventaire  -->\n              <div class=\"information_cadre\">\n                <div class=\"info_titre_input\">\n                  <h4>Entreprise</h4>\n              \n                  <!-- Input de produits inventaire -->\n                  <div class=\"champ_input_inventaire\">\n                    <p>J'appartient à une entreprise</p>\n              \n                    <label class=\"switch\">\n                      <input type=\"checkbox\" [(ngModel)]=\"isEntrepriseSelected\" [ngModelOptions]=\"{standalone: true}\"/>\n                      <span class=\"slider round\"></span>\n                    </label>\n                  </div>\n                </div>    \n              </div>\n\n              <div class=\"information_cadre\"  *ngIf=\"isEntrepriseSelected\">\n                <div class=\"info_titre_input\">\n                  <div class=\"champ_input\">\n                    <input type=\"text\"\n                          placeholder=\"Selectionner un entreprise\"\n                          [formControl]=\"control\" matInput\n                          [matAutocomplete]=\"auto\"\n                          class=\"input_focus input_cursor\">\n                    <label for=\"categorieId\" class=\"label\">Mon entreprise</label>\n                    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onEntrepriseSelected($event)\" [displayWith]=\"displayFnEntreprise\">\n\n                      <mat-option class=\"select-option\" (click)=\"openPopup()\">\n                        <div style=\"display: flex; align-items: center; color: #0672E4;\">\n                          <!-- <i class=\"ri-checkbox-multiple-line\"></i> -->\n                          <i class=\"ri-community-line\"></i>\n                          <span style=\"margin-left: 8px;\">Créer une entreprise</span>\n                        </div>\n                      </mat-option>\n\n                      <mat-option *ngFor=\"let ent of filteredOptions | async\" [value]=\"ent\">\n                        <div class=\"option-content\">\n                          {{ ent.nom }}\n                        </div>\n                      </mat-option>\n\n                    </mat-autocomplete>\n                    <!-- // icon  -->\n                    <div class=\"icon_arrow\">\n                      <i class=\"ri-arrow-down-s-line\"></i>\n                    </div>\n                  </div>\n                </div>    \n              </div>\n\n              <!-- Les information des produit Photo  -->\n              <!-- <div class=\"information_cadre\">\n                <div class=\"info_titre_input\">\n                  <h4>Ajouter une image</h4>\n  \n                  <div class=\"container_file\"> \n                    <div class=\"header_file\"> \n                      <img class=\"roudel\" [src]=\"newPhotoUrl || urllink\" alt=\"Aperçu de l'image\" style=\"max-width:200px;\">\n                    </div> \n                    \n                    <div>\n                      <label for=\"file\" class=\"footer_file\"> \n                        <i class=\"ri-file-3-fill\"></i>\n                        <p>Choisir un fichier</p>\n                      </label> \n                      <input type=\"file\" accept=\"image/*\" id=\"file\" (change)=\"onFileSelected($event)\" hidden>\n                    </div>\n                  </div>\n                </div>\n              </div> -->\n  \n              <!-- Boutons Ajouter et Sauvegarder -->\n              <div class=\"information_cadre information_cadre_save\">\n                 <!-- Message d'erreur global -->\n                <div class=\"container_error_message\">\n                    <!-- Messages API -->\n                    <div *ngIf=\"errorMessage\" class=\"error-messageApi2\">{{ errorMessage }}</div>\n                    <div *ngIf=\"successMessage\" class=\"success-messageApi2\">{{ successMessage }}</div>\n                    <!-- Ajouter ce bloc d'erreur -->\n                    <div *ngIf=\"entrepriseRequiredError\" class=\"error\" style=\"margin-top: 8px;\">\n                      <p>Vous devez sélectionner ou créer une entreprise</p>\n                    </div>\n                </div>\n\n                <div class=\"info_titre_input info_titre_input_btn\">\n                  <div class=\"btn_annuler\">\n                    <button class=\"btn_cancel\" (click)=\"goToClients()\">Annuler</button>\n                  </div>\n                  <div class=\"btn_ajouter\">\n                    <button class=\"btn_save\" (click)=\"ajouterClient()\"\n                          [disabled]=\"clientForm.invalid\"\n                          [disabled]=\"clientForm.invalid\" \n                          [style.backgroundColor]=\"clientForm.valid ? '#0672E4' : '#0671e434'\"\n                          [style.color]=\"clientForm.valid ? '#ffffff' : '#00000073'\"\n                          [style.cursor]=\"clientForm.valid ? 'pointer' : 'no-drop'\">\n                      Ajouter\n                  </button>\n                  </div>\n                </div>\n              </div>\n  \n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n</div>\n\n<!-- Popup overlay -->\n<div class=\"popup-overlay\" *ngIf=\"showPopup\">\n  <div class=\"popup-content\">\n      <div class=\"popup-header\">\n          <h4>Ajouter une entreprise</h4>\n          <button class=\"close-btn\" (click)=\"closePopup()\">&times;</button>\n      </div>\n      <form [formGroup]=\"entrepriseForm\">\n        <div class=\"popup-body\">\n          <div class=\"champ_grid\">\n            <!-- Nom entreprise -->\n            <div class=\"champ_input\">\n              <input class=\"input_focus\" \n                     type=\"text\" \n                     formControlName=\"nom\"\n                     placeholder=\"Saisis le nom de l'entreprise\">\n              <label class=\"label\">Nom entreprise <span style=\"color: #ff0000; margin-left: 5px;\">*</span></label>\n              <div *ngIf=\"entrepriseForm.get('nom')?.invalid && entrepriseForm.get('nom')?.touched\" \n                   class=\"error-text\">\n                Ce champ est requis\n              </div>\n            </div>\n      \n            <!-- Email -->\n            <div class=\"champ_input\">\n              <input class=\"input_focus\" \n                     type=\"email\" \n                     formControlName=\"email\"\n                     placeholder=\"Saisis l'email\">\n              <label class=\"label\">Email</label>\n              <!-- <div *ngIf=\"entrepriseForm.get('email')?.errors?.['email']\" \n                   class=\"error-text\">\n                Format email invalide\n              </div> -->\n            </div>\n          </div>\n      \n          <div class=\"champ_grid\">\n            <!-- Adresse -->\n            <div class=\"champ_input\">\n              <input class=\"input_focus\" \n                     type=\"text\" \n                     formControlName=\"adresse\"\n                     placeholder=\"Saisis l'adresse\">\n              <label class=\"label\">Adresse</label>\n            </div>\n      \n            <!-- Siege -->\n            <div class=\"champ_input\">\n              <input class=\"input_focus\" \n                     type=\"text\" \n                     formControlName=\"siege\"\n                     placeholder=\"Saisis le siège\">\n              <label class=\"label\">Ville</label>\n            </div>\n\n          </div>\n\n          <!-- Modifiez le sélecteur de pays et le champ téléphone -->\n          <div class=\"grid_colonne\">\n            <!-- Pays -->\n            <div class=\"champ_input div1\">\n              <select class=\"input_focus\" \n                      formControlName=\"pays\" \n                      (change)=\"onEntreprisePaysChange($event)\">\n                <option value=\"\" disabled selected>Pays</option>\n                <option value=\"Mali\">Mali</option>\n                <option value=\"Sénégal\">Sénégal</option>\n                <option value=\"Côte d'Ivoire\">Côte d'Ivoire</option>\n              </select>\n              <label for=\"pays\" class=\"label\">Pays</label>\n            </div>\n\n            <!-- Téléphone -->\n            <div class=\"champ_input div2\">\n              <input type=\"tel\" \n                     class=\"input_focus\"\n                     formControlName=\"telephone\"\n                     placeholder=\"Saisis le numéro de téléphone\"\n                     (input)=\"formatEntreprisePhoneNumber()\">\n              <label for=\"telephone\" class=\"label\">Téléphone</label>\n            </div>\n\n            <!-- Ville -->\n            <div class=\"champ_input div3\">\n              <input class=\"input_focus\"\n                        id=\"ville\" formControlName=\"secteur\"\n                        name=\"ville\"\n                        placeholder=\"Saisis la ville\">\n              <label for=\"ville\" class=\"label\">Secteur</label>\n            </div>\n          </div>\n\n        </div>\n\n        <div class=\"container_error_message\">\n          <div *ngIf=\"errorMessageApi\" class=\"error-messageApi\">\n          {{ errorMessageApi }}\n          </div>\n        </div>\n      \n        <div class=\"popup-footer\">\n          <button type=\"button\" class=\"btn-cancel\" (click)=\"closePopup()\">Annuler</button>\n          <button type=\"submit\" class=\"btn-submit\" \n                [disabled]=\"entrepriseForm.invalid\" \n                [style.backgroundColor]=\"entrepriseForm.valid ? '#0672E4' : '#0671e434'\"\n                [style.color]=\"entrepriseForm.valid ? '#ffffff' : '#00000073'\"\n                [style.cursor]=\"entrepriseForm.valid ? 'pointer' : 'no-drop'\" (click)=\"ajouterEntreprise()\">\n            Ajouter\n          </button>\n        </div>\n      </form>\n  </div>\n</div>"],"names":["HttpHeaders","BehaviorSubject","catchError","switchMap","tap","throwError","environment","EntrepriseService","constructor","http","usersService","apiUrl","apiBaseUrl","entrepriseSubject","entreprise$","asObservable","getListEntreprises","getValidAccessToken","pipe","token","headers","get","error","errorMsg","ErrorEvent","message","status","Error","addEntreprise","entreprise","post","newEntreprise","currentEntreprise","value","next","getListEntreprise","console","set","log","data","getEntrepriseById","id","updateEntreprise","formData","patch","responseType","getEntrepriseInfo","Authorization","localStorage","setItem","JSON","stringify","decodeJwt","parse","atob","split","isTokenExpired","decodedToken","expirationDate","Date","exp","getNewTokenFromApi","refreshToken","getItem","i0","ɵɵinject","i1","HttpClient","i2","UsersService","factory","ɵfac","providedIn","CommonModule","FormControl","FormsModule","ReactiveFormsModule","Validators","MatAutocompleteModule","imageCompression","startWith","map","of","combineLatest","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","AddClientsComponent_div_21_small_1_Template","AddClientsComponent_div_21_small_2_Template","ɵɵadvance","ɵɵproperty","tmp_1_0","ctx_r0","clientForm","errors","tmp_2_0","AddClientsComponent_div_26_small_1_Template","nomPays_r2","ɵɵtextInterpolate2","paysIndicatifs","indicatif","pays_r3","longueur","trim","ent_r5","ɵɵtextInterpolate1","nom","ɵɵlistener","AddClientsComponent_div_65_Template_mat_autocomplete_optionSelected_6_listener","$event","ɵɵrestoreView","_r4","ɵɵnextContext","ɵɵresetView","onEntrepriseSelected","AddClientsComponent_div_65_Template_mat_option_click_8_listener","openPopup","AddClientsComponent_div_65_mat_option_13_Template","control","auto_r6","displayFnEntreprise","ɵɵpipeBind1","filteredOptions","ɵɵtextInterpolate","errorMessage","successMessage","errorMessageApi","AddClientsComponent_div_78_Template_button_click_5_listener","_r7","closePopup","AddClientsComponent_div_78_div_16_Template","AddClientsComponent_div_78_Template_select_change_32_listener","onEntreprisePaysChange","AddClientsComponent_div_78_Template_input_input_44_listener","formatEntreprisePhoneNumber","AddClientsComponent_div_78_div_52_Template","AddClientsComponent_div_78_Template_button_click_54_listener","AddClientsComponent_div_78_Template_button_click_56_listener","ajouterEntreprise","entrepriseForm","invalid","touched","ɵɵstyleProp","valid","AddClientsComponent","router","fb","entrepriseService","clientService","isEntrepriseSelected","showPopup","urllink","newPhotoUrl","selectedFile","imageFile","loading","optionsEntreprise$","entrepriseRequiredError","isLoading","maxPhoneLength","entrepriseIndicatif","entrepriseMaxPhoneLength","paysKeys","Object","keys","onPaysChange","event","paysSelectionne","target","paysInfo","ctrl","currentValue","prefix","replace","valueNumerique","startsWith","setValue","reste","slice","length","updatePhoneValidator","regex","RegExp","setValidators","required","pattern","updateValueAndValidity","formatPhoneNumber","valeur","chiffres","numeroFormate","testImageCompression","file","_this","_asyncToGenerator","size","options","maxSizeMB","maxWidthOrHeight","useWebWorker","compressedFile","type","reader","FileReader","onload","e","result","readAsDataURL","onFileSelected","input","files","allowedFormats","includes","goToStock","navigate","ngOnInit","initEntreprise","getClientForm","loadEntreprises","group","nomComplet","minLength","email","telephone","adresse","poste","pays","ville","updateEntreprisePhoneValidator","controls","subscribe","list","setupAutocomplete","err","valueChanges","name","entreprises","_filter","filterValue","toLowerCase","filter","siege","secteur","logo","nif","nina","banque","rccm","siteWeb","signataire","signataireNom","prefixe","suffixe","tauxTva","signaturNum","cachetNum","createdEntreprise","current","reset","ajouterClient","entrepriseSelectionnee","client","selected","entrepriseClient","setTimeout","addClient","res","goToClients","navigateBack","ɵɵdirectiveInject","Router","FormBuilder","i3","i4","ClientService","i5","selectors","decls","vars","consts","template","AddClientsComponent_Template","rf","ctx","AddClientsComponent_div_1_Template","AddClientsComponent_Template_p_click_5_listener","AddClientsComponent_div_21_Template","AddClientsComponent_div_26_Template","AddClientsComponent_Template_select_change_38_listener","AddClientsComponent_option_41_Template","AddClientsComponent_div_44_Template","AddClientsComponent_Template_input_input_46_listener","AddClientsComponent_div_49_Template","AddClientsComponent_div_50_Template","ɵɵtwoWayListener","AddClientsComponent_Template_input_ngModelChange_63_listener","ɵɵtwoWayBindingSet","AddClientsComponent_div_65_Template","AddClientsComponent_div_68_Template","AddClientsComponent_div_69_Template","AddClientsComponent_div_70_Template","AddClientsComponent_Template_button_click_73_listener","AddClientsComponent_Template_button_click_76_listener","AddClientsComponent_div_78_Template","tmp_3_0","tmp_5_0","tmp_6_0","tmp_7_0","ɵɵtwoWayProperty","ɵɵpureFunction0","_c0","ɵNgNoValidate","NgSelectOption","ɵNgSelectMultipleOption","DefaultValueAccessor","CheckboxControlValueAccessor","SelectControlValueAccessor","NgControlStatus","NgControlStatusGroup","NgModel","i6","NgForOf","NgIf","AsyncPipe","FormControlDirective","FormGroupDirective","FormControlName","i7","MatAutocomplete","MatOption","MatAutocompleteTrigger","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}