{"version":3,"file":"default-node_modules_angular_material_fesm2022_index-DOxJc1m4_mjs.js","mappings":";;;;;;;;;;;;;;;;;;AAAoC;AACK;AACmB;AACQ;AACK;AACY;AAErF,MAAMS,eAAe,CAAC;EAClB,OAAOC,IAAI,YAAAC,wBAAAC,iBAAA;IAAA,YAAAA,iBAAA,IAAwFH,eAAe;EAAA;EAClH,OAAOI,IAAI,kBAD8Eb,8DAAE;IAAAe,IAAA,EACSN;EAAe;EACnH,OAAOO,IAAI,kBAF8EhB,8DAAE;IAAAkB,OAAA,GAEoCf,kDAAe,EAAEC,0DAAe,EAAEI,mEAAuB;EAAA;AAC5L;AACA;EAAA,QAAAW,SAAA,oBAAAA,SAAA,KAJ6FnB,+DAAE,CAIJS,eAAe,EAAc,CAAC;IAC7GM,IAAI,EAAEd,mDAAQ;IACdoB,IAAI,EAAE,CAAC;MACCH,OAAO,EAAE,CAACf,kDAAe,EAAEC,0DAAe,EAAEI,mEAAuB,EAAEH,mDAAS,EAAEE,mDAAW,CAAC;MAC5Fe,OAAO,EAAE,CAACjB,mDAAS,EAAEE,mDAAW;IACpC,CAAC;EACT,CAAC,CAAC;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBuC;AACoB;AACjC;AAC6K;AAClL;AACwB;AACiB;AACQ;AACK;;AAErF;AACA;AACA;AAFA,MAAAwC,GAAA;AAAA,MAAAC,GAAA;AAAA,MAAAC,GAAA;AAAA,MAAAC,GAAA;AAAA,MAAAC,GAAA;AAAA,SAAAC,iCAAAC,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA8C6FrD,uDAAE,4BAoNk6C,CAAC;EAAA;EAAA,IAAAqD,EAAA;IAAA,MAAAG,MAAA,GApNr6CxD,2DAAE;IAAFA,wDAAE,aAAAwD,MAAA,CAAAG,QAoNqzC,CAAC,UAAAH,MAAA,CAAAI,QAAA,0BAAuD,CAAC;EAAA;AAAA;AAAA,SAAAC,iCAAAR,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IApNh3CrD,uDAAE,4BAoNu4D,CAAC;EAAA;EAAA,IAAAqD,EAAA;IAAA,MAAAG,MAAA,GApN14DxD,2DAAE;IAAFA,wDAAE,aAAAwD,MAAA,CAAAG,QAoNuxD,CAAC;EAAA;AAAA;AAAA,SAAAG,iCAAAT,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IApN1xDrD,4DAAE,aAoNkiE,CAAC;IApNriEA,oDAAE,EAoNqjE,CAAC;IApNxjEA,0DAAE,CAoN4jE,CAAC;EAAA;EAAA,IAAAqD,EAAA;IAAA,MAAAG,MAAA,GApN/jExD,2DAAE;IAAFA,uDAAE,CAoNqjE,CAAC;IApNxjEA,gEAAE,MAAAwD,MAAA,CAAAY,KAAA,CAAAC,KAAA,KAoNqjE,CAAC;EAAA;AAAA;AA/PrpE,MAAMC,2BAA2B,GAAG,IAAI3C,yDAAc,CAAC,6BAA6B,CAAC;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4C,YAAY,GAAG,IAAI5C,yDAAc,CAAC,aAAa,CAAC;AACtD;AACA;AACA;AACA,MAAMpB,WAAW,CAAC;EACd;EACA8D,KAAK;EACL;EACAV,QAAQ,GAAG,KAAK;EAChB;EACAa,QAAQ,GAAG5C,qDAAM,CAACL,gDAAY,CAAC,CAACkD,KAAK,CAAC,qBAAqB,CAAC;EAC5D;EACAC,MAAM;EACNC,WAAWA,CAAA,EAAG;IACV,MAAMC,MAAM,GAAGhD,qDAAM,CAAC0C,2BAA2B,EAAE;MAAEO,QAAQ,EAAE;IAAK,CAAC,CAAC;IACtE,IAAI,CAACH,MAAM,GAAGE,MAAM,EAAEE,WAAW,IAAI,KAAK;EAC9C;EACA,OAAOpE,IAAI,YAAAqE,oBAAAnE,iBAAA;IAAA,YAAAA,iBAAA,IAAwFL,WAAW;EAAA;EAC9G,OAAOyE,IAAI,kBAD8EhF,+DAAE;IAAAe,IAAA,EACJR,WAAW;IAAA2E,SAAA;IAAAC,SAAA;IAAAC,QAAA;IAAAC,YAAA,WAAAC,yBAAAjC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QADTrD,yDAAE,SAAAsD,GAAA,CAAAoB,MAAA,GACK,IAAI,GAAG,OAAO,mBAAApB,GAAA,CAAAoB,MAAA,GAAd,IAAI,GAAGpB,GAAA,CAAAK,QAAA,CAAA6B,QAAA,CAAkB,CAAC,qBAAAlC,GAAA,CAAAoB,MAAA,GAA1B,IAAI,GAAApB,GAAA,CAAAkB,QAAA;MAAA;IAAA;IAAAiB,MAAA;MAAApB,KAAA;MAAAV,QAAA,8BAA2G9B,2DAAgB;IAAA;IAAA6D,QAAA;IAAAC,QAAA,GADtI3F,gEAAE,CAC6W,CAAC;MAAE6F,OAAO,EAAEtB,YAAY;MAAEuB,WAAW,EAAEvF;IAAY,CAAC,CAAC,GADpaP,sEAAE;IAAAgG,kBAAA,EAAAhD,GAAA;IAAAiD,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,qBAAAhD,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QAAFrD,6DAAE,CAAA+C,GAAA;QAAF/C,4DAAE,aAC+lB,CAAC,aAA+C,CAAC;QADlpBA,oDAAE,EAC2pB,CAAC;QAD9pBA,0DAAE,EACorB,CAAC;QADvrBA,0DAAE,CAC2rB,CAAC,CAAQ,CAAC;QADvsBA,0DAAE,KACqwB,CAAC;MAAA;MAAA,IAAAqD,EAAA;QADxwBrD,yDAAE,4BAAAsD,GAAA,CAAAK,QACykB,CAAC;QAD5kB3D,wDAAE,OAAAsD,GAAA,CAAAkB,QAC8lB,CAAC;QADjmBxE,uDAAE,EAC2pB,CAAC;QAD9pBA,gEAAE,KAAAsD,GAAA,CAAAe,KAAA,KAC2pB,CAAC;MAAA;IAAA;IAAAoC,MAAA;IAAAC,aAAA;IAAAC,eAAA;EAAA;AAC3vB;AACA;EAAA,QAAAxF,SAAA,oBAAAA,SAAA,KAH6FnB,+DAAE,CAGJO,WAAW,EAAc,CAAC;IACzGQ,IAAI,EAAEe,oDAAS;IACfT,IAAI,EAAE,CAAC;MAAEuF,QAAQ,EAAE,cAAc;MAAElB,QAAQ,EAAE,aAAa;MAAEgB,aAAa,EAAE3E,4DAAiB,CAAC8E,IAAI;MAAEF,eAAe,EAAE3E,kEAAuB,CAAC8E,MAAM;MAAEC,IAAI,EAAE;QAC9I,OAAO,EAAE,kBAAkB;QAC3B,aAAa,EAAE,yBAAyB;QACxC,sBAAsB,EAAE,qCAAqC;QAC7D,wBAAwB,EAAE;MAC9B,CAAC;MAAEC,SAAS,EAAE,CAAC;QAAEnB,OAAO,EAAEtB,YAAY;QAAEuB,WAAW,EAAEvF;MAAY,CAAC,CAAC;MAAE6F,QAAQ,EAAE,kTAAkT;MAAEK,MAAM,EAAE,CAAC,29BAA29B;IAAE,CAAC;EACt3C,CAAC,CAAC,EAAkB,MAAM,EAAE,EAAkB;IAAEpC,KAAK,EAAE,CAAC;MAChDtD,IAAI,EAAEkB,gDAAKA;IACf,CAAC,CAAC;IAAE0B,QAAQ,EAAE,CAAC;MACX5C,IAAI,EAAEkB,gDAAK;MACXZ,IAAI,EAAE,CAAC;QAAE4F,SAAS,EAAEpF,2DAAgBA;MAAC,CAAC;IAC1C,CAAC;EAAE,CAAC;AAAA;;AAEhB;AACA,MAAMqF,wBAAwB,CAAC;EAC3BC,MAAM;EACNC,WAAW;EACXzC,WAAWA,CACX;EACAwC,MAAM,EACN;EACAC,WAAW,GAAG,KAAK,EAAE;IACjB,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;AACJ;AACA;AACA;AACA;AACA,MAAM/G,SAAS,CAAC;EACZgH,QAAQ,GAAGzF,qDAAM,CAACM,qDAAU,CAAC;EAC7BoF,kBAAkB,GAAG1F,qDAAM,CAACO,4DAAiB,CAAC;EAC9CoF,OAAO,GAAG3F,qDAAM,CAAC0C,2BAA2B,EAAE;IAAEO,QAAQ,EAAE;EAAK,CAAC,CAAC;EACjET,KAAK,GAAGxC,qDAAM,CAAC2C,YAAY,EAAE;IAAEM,QAAQ,EAAE;EAAK,CAAC,CAAC;EAChD2C,oBAAoB,GAAG,KAAK;EAC5BC,SAAS,GAAG,KAAK;EACjBC,OAAO,GAAG,KAAK;EACfC,SAAS,GAAG,KAAK;EACjBC,oBAAoB,GAAG,EAAE;EACzB;EACA,IAAIC,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACN,OAAO,IAAI,IAAI,CAACA,OAAO,CAACM,QAAQ;EAChD;EACA;EACA,IAAIjE,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAAC6D,SAAS;EACzB;EACA;EACAK,KAAK;EACL;EACAC,EAAE,GAAGnG,qDAAM,CAACL,gDAAY,CAAC,CAACkD,KAAK,CAAC,aAAa,CAAC;EAC9C;EACA,IAAId,QAAQA,CAAA,EAAG;IACX,OAAQ,IAAI,CAACS,KAAK,IAAI,IAAI,CAACA,KAAK,CAACT,QAAQ,IAAK,IAAI,CAACgE,SAAS;EAChE;EACA,IAAIhE,QAAQA,CAACmE,KAAK,EAAE;IAChB,IAAI,CAACH,SAAS,GAAGG,KAAK;EAC1B;EACA;EACA,IAAIE,aAAaA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACR,oBAAoB,GAC1B,IAAI,CAACD,OAAO,CAACS,aAAa,CAAC,CAAC,GAC5B,CAAC,CAAC,IAAI,CAACT,OAAO,EAAES,aAAa;EACvC;EACA;EACA,IAAIC,4BAA4BA,CAAA,EAAG;IAC/B,OAAO,CAAC,EAAE,IAAI,CAACV,OAAO,IAAI,IAAI,CAACA,OAAO,CAACU,4BAA4B,CAAC;EACxE;EACA;EACA;EACAC,iBAAiB,GAAG,IAAI9F,uDAAY,CAAC,CAAC;EACtC;EACA+F,KAAK;EACL;EACAC,aAAa,GAAG,IAAI5F,yCAAO,CAAC,CAAC;EAC7BmC,WAAWA,CAAA,EAAG;IACV,MAAM0D,WAAW,GAAGzG,qDAAM,CAACiB,mDAAsB,CAAC;IAClDwF,WAAW,CAACC,IAAI,CAAC1F,8DAAuB,CAAC;IACzCyF,WAAW,CAACC,IAAI,CAACxF,uEAAqB,CAAC;IACvC,IAAI,CAAC0E,oBAAoB,GAAG,CAAC,CAAC,IAAI,CAACD,OAAO,IAAIlF,uDAAQ,CAAC,IAAI,CAACkF,OAAO,CAACS,aAAa,CAAC;EACtF;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIO,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACb,OAAO;EACvB;EACA;AACJ;AACA;AACA;EACI,IAAIc,SAASA,CAAA,EAAG;IACZ;IACA,OAAO,CAAC,IAAI,CAACL,KAAK,EAAEM,aAAa,CAACC,WAAW,IAAI,EAAE,EAAEC,IAAI,CAAC,CAAC;EAC/D;EACA;EACAC,MAAMA,CAACC,SAAS,GAAG,IAAI,EAAE;IACrB,IAAI,CAAC,IAAI,CAACpB,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAG,IAAI;MACrB,IAAI,CAACH,kBAAkB,CAACwB,YAAY,CAAC,CAAC;MACtC,IAAID,SAAS,EAAE;QACX,IAAI,CAACE,yBAAyB,CAAC,CAAC;MACpC;IACJ;EACJ;EACA;EACAC,QAAQA,CAACH,SAAS,GAAG,IAAI,EAAE;IACvB,IAAI,IAAI,CAACpB,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,GAAG,KAAK;MACtB,IAAI,CAACH,kBAAkB,CAACwB,YAAY,CAAC,CAAC;MACtC,IAAID,SAAS,EAAE;QACX,IAAI,CAACE,yBAAyB,CAAC,CAAC;MACpC;IACJ;EACJ;EACA;EACAE,KAAKA,CAACC,OAAO,EAAEC,OAAO,EAAE;IACpB;IACA;IACA,MAAMC,OAAO,GAAG,IAAI,CAACC,eAAe,CAAC,CAAC;IACtC,IAAI,OAAOD,OAAO,CAACH,KAAK,KAAK,UAAU,EAAE;MACrCG,OAAO,CAACH,KAAK,CAACE,OAAO,CAAC;IAC1B;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIG,eAAeA,CAAA,EAAG;IACd,IAAI,CAAC,IAAI,CAAC5B,OAAO,EAAE;MACf,IAAI,CAACA,OAAO,GAAG,IAAI;MACnB,IAAI,CAACJ,kBAAkB,CAACwB,YAAY,CAAC,CAAC;IAC1C;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIS,iBAAiBA,CAAA,EAAG;IAChB,IAAI,IAAI,CAAC7B,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,GAAG,KAAK;MACpB,IAAI,CAACJ,kBAAkB,CAACwB,YAAY,CAAC,CAAC;IAC1C;EACJ;EACA;EACAU,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAAChB,SAAS;EACzB;EACA;EACAiB,cAAcA,CAACC,KAAK,EAAE;IAClB,IAAI,CAACA,KAAK,CAACC,OAAO,KAAKnI,oDAAK,IAAIkI,KAAK,CAACC,OAAO,KAAKlI,oDAAK,KAAK,CAACC,qEAAc,CAACgI,KAAK,CAAC,EAAE;MAChF,IAAI,CAACE,qBAAqB,CAAC,CAAC;MAC5B;MACAF,KAAK,CAACG,cAAc,CAAC,CAAC;IAC1B;EACJ;EACA;AACJ;AACA;AACA;EACID,qBAAqBA,CAAA,EAAG;IACpB,IAAI,CAAC,IAAI,CAACjG,QAAQ,EAAE;MAChB,IAAI,CAAC8D,SAAS,GAAG,IAAI,CAACI,QAAQ,GAAG,CAAC,IAAI,CAACJ,SAAS,GAAG,IAAI;MACvD,IAAI,CAACH,kBAAkB,CAACwB,YAAY,CAAC,CAAC;MACtC,IAAI,CAACC,yBAAyB,CAAC,IAAI,CAAC;IACxC;EACJ;EACA;EACA;EACA;EACA;EACAe,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAACnG,QAAQ,GAAG,IAAI,GAAG,GAAG;EACrC;EACA;EACA0F,eAAeA,CAAA,EAAG;IACd,OAAO,IAAI,CAAChC,QAAQ,CAACoB,aAAa;EACtC;EACAsB,kBAAkBA,CAAA,EAAG;IACjB;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAACtC,SAAS,EAAE;MAChB,MAAMe,SAAS,GAAG,IAAI,CAACA,SAAS;MAChC,IAAIA,SAAS,KAAK,IAAI,CAACZ,oBAAoB,EAAE;QACzC,IAAI,IAAI,CAACA,oBAAoB,EAAE;UAC3B,IAAI,CAACQ,aAAa,CAAC4B,IAAI,CAAC,CAAC;QAC7B;QACA,IAAI,CAACpC,oBAAoB,GAAGY,SAAS;MACzC;IACJ;EACJ;EACAyB,WAAWA,CAAA,EAAG;IACV,IAAI,CAAC7B,aAAa,CAAC8B,QAAQ,CAAC,CAAC;EACjC;EACA;EACAnB,yBAAyBA,CAAC3B,WAAW,GAAG,KAAK,EAAE;IAC3C,IAAI,CAACc,iBAAiB,CAACiC,IAAI,CAAC,IAAIjD,wBAAwB,CAAC,IAAI,EAAEE,WAAW,CAAC,CAAC;EAChF;EACA,OAAO1G,IAAI,YAAA0J,kBAAAxJ,iBAAA;IAAA,YAAAA,iBAAA,IAAwFP,SAAS;EAAA;EAC5G,OAAO2E,IAAI,kBApN8EhF,+DAAE;IAAAe,IAAA,EAoNJV,SAAS;IAAA6E,SAAA;IAAAmF,SAAA,WAAAC,gBAAAjH,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QApNPrD,yDAAE,CAAAiD,GAAA;MAAA;MAAA,IAAAI,EAAA;QAAA,IAAAmH,EAAA;QAAFxK,4DAAE,CAAAwK,EAAA,GAAFxK,yDAAE,QAAAsD,GAAA,CAAA6E,KAAA,GAAAqC,EAAA,CAAAG,KAAA;MAAA;IAAA;IAAAxF,SAAA,WAoNkO,QAAQ;IAAAC,QAAA;IAAAC,YAAA,WAAAuF,uBAAAvH,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QApN5OrD,wDAAE,mBAAA8K,mCAAA;UAAA,OAoNJxH,GAAA,CAAAsG,qBAAA,CAAsB,CAAC;QAAA,CAAf,CAAC,qBAAAmB,qCAAAC,MAAA;UAAA,OAAT1H,GAAA,CAAAmG,cAAA,CAAAuB,MAAqB,CAAC;QAAA,CAAd,CAAC;MAAA;MAAA,IAAA3H,EAAA;QApNPrD,4DAAE,OAAAsD,GAAA,CAAAyE,EAoNI,CAAC;QApNP/H,yDAAE,kBAAAsD,GAAA,CAAAM,QAAA,mBAoNJN,GAAA,CAAAK,QAAA,CAAA6B,QAAA,CAAkB,CAAC;QApNjBxF,yDAAE,4BAAAsD,GAAA,CAAAM,QAoNI,CAAC,4BAAAN,GAAA,CAAAuE,QAAD,CAAC,0BAAAvE,GAAA,CAAAiF,MAAD,CAAC,4BAAAjF,GAAA,CAAAK,QAAD,CAAC;MAAA;IAAA;IAAA8B,MAAA;MAAAqC,KAAA;MAAAC,EAAA;MAAApE,QAAA,8BAAqH9B,2DAAgB;IAAA;IAAAqJ,OAAA;MAAAhD,iBAAA;IAAA;IAAAxC,QAAA;IAAAC,QAAA,GApN5I3F,sEAAE;IAAAgG,kBAAA,EAAA7C,GAAA;IAAA8C,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAA+E,mBAAA9H,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QAAFrD,6DAAE,CAAAkD,GAAA;QAAFlD,wDAAE,IAAAoD,gCAAA,gCAoNwsC,CAAC;QApN3sCpD,0DAAE,EAoNs9C,CAAC;QApNz9CA,4DAAE,gBAoN4gD,CAAC;QApN/gDA,0DAAE,KAoNqiD,CAAC;QApNxiDA,0DAAE,CAoN4iD,CAAC;QApN/iDA,wDAAE,IAAA6D,gCAAA,gCAoN0qD,CAAC,IAAAC,gCAAA,iBAA6U,CAAC;QApN3/D9D,uDAAE,YAoNqwE,CAAC;MAAA;MAAA,IAAAqD,EAAA;QApNxwErD,2DAAE,CAAAsD,GAAA,CAAAuE,QAAA,SAoNq6C,CAAC;QApNx6C7H,uDAAE,EAoN04D,CAAC;QApN74DA,2DAAE,EAAAsD,GAAA,CAAAuE,QAAA,IAAAvE,GAAA,CAAAM,QAAA,KAAAN,GAAA,CAAA2E,4BAAA,SAoN04D,CAAC;QApN74DjI,uDAAE,CAoN+jE,CAAC;QApNlkEA,2DAAE,CAAAsD,GAAA,CAAAc,KAAA,IAAAd,GAAA,CAAAc,KAAA,CAAAM,MAAA,SAoN+jE,CAAC;QApNlkE1E,uDAAE,CAoN0sE,CAAC;QApN7sEA,wDAAE,qBAAAsD,GAAA,CAAA+F,eAAA,EAoN0sE,CAAC,sBAAA/F,GAAA,CAAAK,QAAA,IAAAL,GAAA,CAAA0E,aAAiD,CAAC;MAAA;IAAA;IAAAsD,YAAA,GAAqzH5I,4DAAiB,EAA6GD,mDAAS;IAAAgE,MAAA;IAAAC,aAAA;IAAAC,eAAA;EAAA;AACxxM;AACA;EAAA,QAAAxF,SAAA,oBAAAA,SAAA,KAtN6FnB,+DAAE,CAsNJK,SAAS,EAAc,CAAC;IACvGU,IAAI,EAAEe,oDAAS;IACfT,IAAI,EAAE,CAAC;MAAEuF,QAAQ,EAAE,YAAY;MAAElB,QAAQ,EAAE,WAAW;MAAEqB,IAAI,EAAE;QAClD,MAAM,EAAE,QAAQ;QAChB,iCAAiC,EAAE,UAAU;QAC7C,iCAAiC,EAAE,UAAU;QAC7C,+BAA+B,EAAE,QAAQ;QACzC,iCAAiC,EAAE,UAAU;QAC7C,MAAM,EAAE,IAAI;QACZ;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,sBAAsB,EAAE,UAAU;QAClC,sBAAsB,EAAE,qBAAqB;QAC7C,SAAS,EAAE,yBAAyB;QACpC,WAAW,EAAE,wBAAwB;QACrC,OAAO,EAAE;MACb,CAAC;MAAEL,aAAa,EAAE3E,4DAAiB,CAAC8E,IAAI;MAAEF,eAAe,EAAE3E,kEAAuB,CAAC8E,MAAM;MAAE5F,OAAO,EAAE,CAACwB,4DAAiB,EAAED,mDAAS,CAAC;MAAE2D,QAAQ,EAAE,w9CAAw9C;MAAEK,MAAM,EAAE,CAAC,ivHAAivH;IAAE,CAAC;EACj3K,CAAC,CAAC,EAAkB,MAAM,EAAE,EAAkB;IAAEqB,KAAK,EAAE,CAAC;MAChD/G,IAAI,EAAEkB,gDAAKA;IACf,CAAC,CAAC;IAAE8F,EAAE,EAAE,CAAC;MACLhH,IAAI,EAAEkB,gDAAKA;IACf,CAAC,CAAC;IAAE0B,QAAQ,EAAE,CAAC;MACX5C,IAAI,EAAEkB,gDAAK;MACXZ,IAAI,EAAE,CAAC;QAAE4F,SAAS,EAAEpF,2DAAgBA;MAAC,CAAC;IAC1C,CAAC,CAAC;IAAEqG,iBAAiB,EAAE,CAAC;MACpBnH,IAAI,EAAEuB,iDAAMA;IAChB,CAAC,CAAC;IAAE6F,KAAK,EAAE,CAAC;MACRpH,IAAI,EAAEwB,oDAAS;MACflB,IAAI,EAAE,CAAC,MAAM,EAAE;QAAEkK,MAAM,EAAE;MAAK,CAAC;IACnC,CAAC;EAAE,CAAC;AAAA;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,6BAA6BA,CAACC,WAAW,EAAEtC,OAAO,EAAEuC,YAAY,EAAE;EACvE,IAAIA,YAAY,CAACC,MAAM,EAAE;IACrB,IAAIC,YAAY,GAAGzC,OAAO,CAAC0C,OAAO,CAAC,CAAC;IACpC,IAAIC,MAAM,GAAGJ,YAAY,CAACG,OAAO,CAAC,CAAC;IACnC,IAAIE,YAAY,GAAG,CAAC;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,WAAW,GAAG,CAAC,EAAEO,CAAC,EAAE,EAAE;MACtC,IAAIJ,YAAY,CAACI,CAAC,CAAC,CAAC5H,KAAK,IAAIwH,YAAY,CAACI,CAAC,CAAC,CAAC5H,KAAK,KAAK0H,MAAM,CAACC,YAAY,CAAC,EAAE;QACzEA,YAAY,EAAE;MAClB;IACJ;IACA,OAAOA,YAAY;EACvB;EACA,OAAO,CAAC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,wBAAwBA,CAACC,YAAY,EAAEC,YAAY,EAAEC,qBAAqB,EAAEC,WAAW,EAAE;EAC9F,IAAIH,YAAY,GAAGE,qBAAqB,EAAE;IACtC,OAAOF,YAAY;EACvB;EACA,IAAIA,YAAY,GAAGC,YAAY,GAAGC,qBAAqB,GAAGC,WAAW,EAAE;IACnE,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,YAAY,GAAGG,WAAW,GAAGF,YAAY,CAAC;EACjE;EACA,OAAOC,qBAAqB;AAChC;;;;;;;;;;;;;;;;ACxVoC;AACwF;;AAE5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM1J,iBAAiB,CAAC;EACpBmK,cAAc,GAAGjL,qDAAM,CAACgL,gEAAqB,EAAE;IAAE/H,QAAQ,EAAE;EAAK,CAAC,CAAC;EAClE;EACAiI,KAAK,GAAG,WAAW;EACnB;EACAnJ,QAAQ,GAAG,KAAK;EAChB;AACJ;AACA;AACA;EACIoJ,UAAU,GAAG,MAAM;EACnBpI,WAAWA,CAAA,EAAG,CAAE;EAChB,OAAOjE,IAAI,YAAAsM,0BAAApM,iBAAA;IAAA,YAAAA,iBAAA,IAAwF8B,iBAAiB;EAAA;EACpH,OAAOsC,IAAI,kBAD8EhF,+DAAE;IAAAe,IAAA,EACJ2B,iBAAiB;IAAAwC,SAAA;IAAAC,SAAA;IAAAC,QAAA;IAAAC,YAAA,WAAA4H,+BAAA5J,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QADfrD,yDAAE,sCAAAsD,GAAA,CAAAwJ,KAAA,KACM,eAAM,CAAC,gCAAAxJ,GAAA,CAAAwJ,KAAA,KAAP,SAAM,CAAC,iCAAAxJ,GAAA,CAAAK,QAAD,CAAC,gCAAAL,GAAA,CAAAyJ,UAAA,KAAF,SAAC,CAAC,6BAAAzJ,GAAA,CAAAyJ,UAAA,KAAF,MAAC,CAAC,4BAAAzJ,GAAA,CAAAuJ,cAAA,KAAE,gBAAH,CAAC;MAAA;IAAA;IAAApH,MAAA;MAAAqH,KAAA;MAAAnJ,QAAA;MAAAoJ,UAAA;IAAA;IAAA9G,KAAA;IAAAC,IAAA;IAAAE,QAAA,WAAA8G,2BAAA7J,EAAA,EAAAC,GAAA;IAAAmD,MAAA;IAAAC,aAAA;IAAAC,eAAA;EAAA;AAC5G;AACA;EAAA,QAAAxF,SAAA,oBAAAA,SAAA,KAH6FnB,+DAAE,CAGJ0C,iBAAiB,EAAc,CAAC;IAC/G3B,IAAI,EAAEe,oDAAS;IACfT,IAAI,EAAE,CAAC;MAAEqF,aAAa,EAAE3E,4DAAiB,CAAC8E,IAAI;MAAEF,eAAe,EAAE3E,kEAAuB,CAAC8E,MAAM;MAAEF,QAAQ,EAAE,qBAAqB;MAAER,QAAQ,EAAE,EAAE;MAAEW,IAAI,EAAE;QAC1I,OAAO,EAAE,qBAAqB;QAC9B,2CAA2C,EAAE,2BAA2B;QACxE,qCAAqC,EAAE,qBAAqB;QAC5D,sCAAsC,EAAE,UAAU;QAClD,qCAAqC,EAAE,0BAA0B;QACjE,kCAAkC,EAAE,uBAAuB;QAC3D,iCAAiC,EAAE;MACvC,CAAC;MAAEN,MAAM,EAAE,CAAC,iyGAAiyG;IAAE,CAAC;EAC5zG,CAAC,CAAC,EAAkB,MAAM,EAAE,EAAkB;IAAEqG,KAAK,EAAE,CAAC;MAChD/L,IAAI,EAAEkB,gDAAKA;IACf,CAAC,CAAC;IAAE0B,QAAQ,EAAE,CAAC;MACX5C,IAAI,EAAEkB,gDAAKA;IACf,CAAC,CAAC;IAAE8K,UAAU,EAAE,CAAC;MACbhM,IAAI,EAAEkB,gDAAKA;IACf,CAAC;EAAE,CAAC;AAAA;;;;;;;;;;;;;;;;;;AChDoB;AACK;AAC+B;AACJ;AAEpE,MAAMzB,uBAAuB,CAAC;EAC1B,OAAOE,IAAI,YAAAyM,gCAAAvM,iBAAA;IAAA,YAAAA,iBAAA,IAAwFJ,uBAAuB;EAAA;EAC1H,OAAOK,IAAI,kBAD8Eb,8DAAE;IAAAe,IAAA,EACSP;EAAuB;EAC3H,OAAOQ,IAAI,kBAF8EhB,8DAAE;IAAAkB,OAAA,GAE4Cd,0DAAe;EAAA;AAC1J;AACA;EAAA,QAAAe,SAAA,oBAAAA,SAAA,KAJ6FnB,+DAAE,CAIJQ,uBAAuB,EAAc,CAAC;IACrHO,IAAI,EAAEd,mDAAQ;IACdoB,IAAI,EAAE,CAAC;MACCH,OAAO,EAAE,CAACd,0DAAe,EAAEsC,4DAAiB,CAAC;MAC7CpB,OAAO,EAAE,CAACoB,4DAAiB;IAC/B,CAAC;EACT,CAAC,CAAC;AAAA","sources":["./node_modules/@angular/material/fesm2022/index-DOxJc1m4.mjs","./node_modules/@angular/material/fesm2022/option-ChV6uQgD.mjs","./node_modules/@angular/material/fesm2022/pseudo-checkbox-CJ7seqQH.mjs","./node_modules/@angular/material/fesm2022/pseudo-checkbox-module-CAX2sutq.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nimport { M as MatRippleModule } from './index-SYVYjXwK.mjs';\nimport { M as MatCommonModule } from './common-module-WayjW0Pb.mjs';\nimport { M as MatOption, a as MatOptgroup } from './option-ChV6uQgD.mjs';\nimport { M as MatPseudoCheckboxModule } from './pseudo-checkbox-module-CAX2sutq.mjs';\n\nclass MatOptionModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatOptionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: MatOptionModule, imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, MatOption, MatOptgroup], exports: [MatOption, MatOptgroup] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatOptionModule, imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatOptionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, MatOption, MatOptgroup],\n                    exports: [MatOption, MatOptgroup],\n                }]\n        }] });\n\nexport { MatOptionModule as M };\n","import { _IdGenerator } from '@angular/cdk/a11y';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ElementRef, ChangeDetectorRef, EventEmitter, isSignal, Output, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { M as MatRipple } from './ripple-BT3tzh6F.mjs';\nimport { M as MatPseudoCheckbox } from './pseudo-checkbox-CJ7seqQH.mjs';\nimport { _ as _StructuralStylesLoader } from './structural-styles-BQUT6wsL.mjs';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\n\n/**\n * Injection token used to provide the parent component to options.\n */\nconst MAT_OPTION_PARENT_COMPONENT = new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_OPTGROUP = new InjectionToken('MatOptgroup');\n/**\n * Component that is used to group instances of `mat-option`.\n */\nclass MatOptgroup {\n    /** Label for the option group. */\n    label;\n    /** whether the option group is disabled. */\n    disabled = false;\n    /** Unique id for the underlying label. */\n    _labelId = inject(_IdGenerator).getId('mat-optgroup-label-');\n    /** Whether the group is in inert a11y mode. */\n    _inert;\n    constructor() {\n        const parent = inject(MAT_OPTION_PARENT_COMPONENT, { optional: true });\n        this._inert = parent?.inertGroups ?? false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatOptgroup, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"19.2.6\", type: MatOptgroup, isStandalone: true, selector: \"mat-optgroup\", inputs: { label: \"label\", disabled: [\"disabled\", \"disabled\", booleanAttribute] }, host: { properties: { \"attr.role\": \"_inert ? null : \\\"group\\\"\", \"attr.aria-disabled\": \"_inert ? null : disabled.toString()\", \"attr.aria-labelledby\": \"_inert ? null : _labelId\" }, classAttribute: \"mat-mdc-optgroup\" }, providers: [{ provide: MAT_OPTGROUP, useExisting: MatOptgroup }], exportAs: [\"matOptgroup\"], ngImport: i0, template: \"<span\\n  class=\\\"mat-mdc-optgroup-label\\\"\\n  role=\\\"presentation\\\"\\n  [class.mdc-list-item--disabled]=\\\"disabled\\\"\\n  [id]=\\\"_labelId\\\">\\n  <span class=\\\"mdc-list-item__primary-text\\\">{{ label }} <ng-content></ng-content></span>\\n</span>\\n\\n<ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\\n\", styles: [\".mat-mdc-optgroup{color:var(--mat-optgroup-label-text-color, var(--mat-sys-on-surface-variant));font-family:var(--mat-optgroup-label-text-font, var(--mat-sys-title-small-font));line-height:var(--mat-optgroup-label-text-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-optgroup-label-text-size, var(--mat-sys-title-small-size));letter-spacing:var(--mat-optgroup-label-text-tracking, var(--mat-sys-title-small-tracking));font-weight:var(--mat-optgroup-label-text-weight, var(--mat-sys-title-small-weight))}.mat-mdc-optgroup-label{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;min-height:48px;padding:0 16px;outline:none}.mat-mdc-optgroup-label.mdc-list-item--disabled{opacity:.38}.mat-mdc-optgroup-label .mdc-list-item__primary-text{font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;white-space:normal;color:inherit}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatOptgroup, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-optgroup', exportAs: 'matOptgroup', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-mdc-optgroup',\n                        '[attr.role]': '_inert ? null : \"group\"',\n                        '[attr.aria-disabled]': '_inert ? null : disabled.toString()',\n                        '[attr.aria-labelledby]': '_inert ? null : _labelId',\n                    }, providers: [{ provide: MAT_OPTGROUP, useExisting: MatOptgroup }], template: \"<span\\n  class=\\\"mat-mdc-optgroup-label\\\"\\n  role=\\\"presentation\\\"\\n  [class.mdc-list-item--disabled]=\\\"disabled\\\"\\n  [id]=\\\"_labelId\\\">\\n  <span class=\\\"mdc-list-item__primary-text\\\">{{ label }} <ng-content></ng-content></span>\\n</span>\\n\\n<ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\\n\", styles: [\".mat-mdc-optgroup{color:var(--mat-optgroup-label-text-color, var(--mat-sys-on-surface-variant));font-family:var(--mat-optgroup-label-text-font, var(--mat-sys-title-small-font));line-height:var(--mat-optgroup-label-text-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-optgroup-label-text-size, var(--mat-sys-title-small-size));letter-spacing:var(--mat-optgroup-label-text-tracking, var(--mat-sys-title-small-tracking));font-weight:var(--mat-optgroup-label-text-weight, var(--mat-sys-title-small-weight))}.mat-mdc-optgroup-label{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;min-height:48px;padding:0 16px;outline:none}.mat-mdc-optgroup-label.mdc-list-item--disabled{opacity:.38}.mat-mdc-optgroup-label .mdc-list-item__primary-text{font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;white-space:normal;color:inherit}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { label: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/** Event object emitted by MatOption when selected or deselected. */\nclass MatOptionSelectionChange {\n    source;\n    isUserInput;\n    constructor(\n    /** Reference to the option that emitted the event. */\n    source, \n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput = false) {\n        this.source = source;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Single option inside of a `<mat-select>` element.\n */\nclass MatOption {\n    _element = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _parent = inject(MAT_OPTION_PARENT_COMPONENT, { optional: true });\n    group = inject(MAT_OPTGROUP, { optional: true });\n    _signalDisableRipple = false;\n    _selected = false;\n    _active = false;\n    _disabled = false;\n    _mostRecentViewValue = '';\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this._parent && this._parent.multiple;\n    }\n    /** Whether or not the option is currently selected. */\n    get selected() {\n        return this._selected;\n    }\n    /** The form value of the option. */\n    value;\n    /** The unique ID of the option. */\n    id = inject(_IdGenerator).getId('mat-option-');\n    /** Whether the option is disabled. */\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n    }\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() {\n        return this._signalDisableRipple\n            ? this._parent.disableRipple()\n            : !!this._parent?.disableRipple;\n    }\n    /** Whether to display checkmark for single-selection. */\n    get hideSingleSelectionIndicator() {\n        return !!(this._parent && this._parent.hideSingleSelectionIndicator);\n    }\n    /** Event emitted when the option is selected or deselected. */\n    // tslint:disable-next-line:no-output-on-prefix\n    onSelectionChange = new EventEmitter();\n    /** Element containing the option's text. */\n    _text;\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    _stateChanges = new Subject();\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_StructuralStylesLoader);\n        styleLoader.load(_VisuallyHiddenLoader);\n        this._signalDisableRipple = !!this._parent && isSignal(this._parent.disableRipple);\n    }\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active() {\n        return this._active;\n    }\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue() {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._text?.nativeElement.textContent || '').trim();\n    }\n    /** Selects the option. */\n    select(emitEvent = true) {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            if (emitEvent) {\n                this._emitSelectionChangeEvent();\n            }\n        }\n    }\n    /** Deselects the option. */\n    deselect(emitEvent = true) {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            if (emitEvent) {\n                this._emitSelectionChangeEvent();\n            }\n        }\n    }\n    /** Sets focus onto this option. */\n    focus(_origin, options) {\n        // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n        // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n        const element = this._getHostElement();\n        if (typeof element.focus === 'function') {\n            element.focus(options);\n        }\n    }\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles() {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles() {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        return this.viewValue;\n    }\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event) {\n        if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n            this._selectViaInteraction();\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction() {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    // This method is only used by `MatLegacyOption`. Keeping it here to avoid breaking the types.\n    // That's because `MatLegacyOption` use `MatOption` type in a few places such as\n    // `MatOptionSelectionChange`. It is safe to delete this when `MatLegacyOption` is deleted.\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Gets the host DOM element. */\n    _getHostElement() {\n        return this._element.nativeElement;\n    }\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n            if (viewValue !== this._mostRecentViewValue) {\n                if (this._mostRecentViewValue) {\n                    this._stateChanges.next();\n                }\n                this._mostRecentViewValue = viewValue;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /** Emits the selection change event. */\n    _emitSelectionChangeEvent(isUserInput = false) {\n        this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatOption, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.2.6\", type: MatOption, isStandalone: true, selector: \"mat-option\", inputs: { value: \"value\", id: \"id\", disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { onSelectionChange: \"onSelectionChange\" }, host: { attributes: { \"role\": \"option\" }, listeners: { \"click\": \"_selectViaInteraction()\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"class.mdc-list-item--selected\": \"selected\", \"class.mat-mdc-option-multiple\": \"multiple\", \"class.mat-mdc-option-active\": \"active\", \"class.mdc-list-item--disabled\": \"disabled\", \"id\": \"id\", \"attr.aria-selected\": \"selected\", \"attr.aria-disabled\": \"disabled.toString()\" }, classAttribute: \"mat-mdc-option mdc-list-item\" }, viewQueries: [{ propertyName: \"_text\", first: true, predicate: [\"text\"], descendants: true, static: true }], exportAs: [\"matOption\"], ngImport: i0, template: \"<!-- Set aria-hidden=\\\"true\\\" to this DOM node and other decorative nodes in this file. This might\\n be contributing to issue where sometimes VoiceOver focuses on a TextNode in the a11y tree instead\\n of the Option node (#23202). Most assistive technology will generally ignore non-role,\\n non-text-content elements. Adding aria-hidden seems to make VoiceOver behave more consistently. -->\\n@if (multiple) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [state]=\\\"selected ? 'checked' : 'unchecked'\\\"\\n        aria-hidden=\\\"true\\\"></mat-pseudo-checkbox>\\n}\\n\\n<ng-content select=\\\"mat-icon\\\"></ng-content>\\n\\n<span class=\\\"mdc-list-item__primary-text\\\" #text><ng-content></ng-content></span>\\n\\n<!-- Render checkmark at the end for single-selection. -->\\n@if (!multiple && selected && !hideSingleSelectionIndicator) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        state=\\\"checked\\\"\\n        aria-hidden=\\\"true\\\"\\n        appearance=\\\"minimal\\\"></mat-pseudo-checkbox>\\n}\\n\\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\\n@if (group && group._inert) {\\n    <span class=\\\"cdk-visually-hidden\\\">({{ group.label }})</span>\\n}\\n\\n<div class=\\\"mat-mdc-option-ripple mat-focus-indicator\\\" aria-hidden=\\\"true\\\" mat-ripple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"disabled || disableRipple\\\">\\n</div>\\n\", styles: [\".mat-mdc-option{-webkit-user-select:none;user-select:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;min-height:48px;padding:0 16px;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);color:var(--mat-option-label-text-color, var(--mat-sys-on-surface));font-family:var(--mat-option-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-option-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-option-label-text-size, var(--mat-sys-body-large-size));letter-spacing:var(--mat-option-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-option-label-text-weight, var(--mat-sys-body-large-weight))}.mat-mdc-option:hover:not(.mdc-list-item--disabled){background-color:var(--mat-option-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-option:focus.mdc-list-item,.mat-mdc-option.mat-mdc-option-active.mdc-list-item{background-color:var(--mat-option-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent));outline:0}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:var(--mat-option-selected-state-layer-color, var(--mat-sys-secondary-container))}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple) .mdc-list-item__primary-text{color:var(--mat-option-selected-state-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-option .mat-pseudo-checkbox{--mat-minimal-pseudo-checkbox-selected-checkmark-color: var(--mat-option-selected-state-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-option.mdc-list-item{align-items:center;background:rgba(0,0,0,0)}.mat-mdc-option.mdc-list-item--disabled{cursor:default;pointer-events:none}.mat-mdc-option.mdc-list-item--disabled .mat-mdc-option-pseudo-checkbox,.mat-mdc-option.mdc-list-item--disabled .mdc-list-item__primary-text,.mat-mdc-option.mdc-list-item--disabled>mat-icon{opacity:.38}.mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:32px}[dir=rtl] .mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:16px;padding-right:32px}.mat-mdc-option .mat-icon,.mat-mdc-option .mat-pseudo-checkbox-full{margin-right:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-icon,[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-full{margin-right:0;margin-left:16px}.mat-mdc-option .mat-pseudo-checkbox-minimal{margin-left:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-minimal{margin-right:16px;margin-left:0}.mat-mdc-option .mat-mdc-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-mdc-option .mdc-list-item__primary-text{white-space:normal;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;margin-right:auto}[dir=rtl] .mat-mdc-option .mdc-list-item__primary-text{margin-right:0;margin-left:auto}@media(forced-colors: active){.mat-mdc-option.mdc-list-item--selected:not(:has(.mat-mdc-option-pseudo-checkbox))::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}[dir=rtl] .mat-mdc-option.mdc-list-item--selected:not(:has(.mat-mdc-option-pseudo-checkbox))::after{right:auto;left:16px}}.mat-mdc-option-multiple{--mdc-list-list-item-selected-container-color:var(--mdc-list-list-item-container-color, transparent)}.mat-mdc-option-active .mat-focus-indicator::before{content:\\\"\\\"}\\n\"], dependencies: [{ kind: \"component\", type: MatPseudoCheckbox, selector: \"mat-pseudo-checkbox\", inputs: [\"state\", \"disabled\", \"appearance\"] }, { kind: \"directive\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatOption, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-option', exportAs: 'matOption', host: {\n                        'role': 'option',\n                        '[class.mdc-list-item--selected]': 'selected',\n                        '[class.mat-mdc-option-multiple]': 'multiple',\n                        '[class.mat-mdc-option-active]': 'active',\n                        '[class.mdc-list-item--disabled]': 'disabled',\n                        '[id]': 'id',\n                        // Set aria-selected to false for non-selected items and true for selected items. Conform to\n                        // [WAI ARIA Listbox authoring practices guide](\n                        //  https://www.w3.org/WAI/ARIA/apg/patterns/listbox/), \"If any options are selected, each\n                        // selected option has either aria-selected or aria-checked  set to true. All options that are\n                        // selectable but not selected have either aria-selected or aria-checked set to false.\" Align\n                        // aria-selected implementation of Chips and List components.\n                        //\n                        // Set `aria-selected=\"false\"` on not-selected listbox options to fix VoiceOver announcing\n                        // every option as \"selected\" (#21491).\n                        '[attr.aria-selected]': 'selected',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '(click)': '_selectViaInteraction()',\n                        '(keydown)': '_handleKeydown($event)',\n                        'class': 'mat-mdc-option mdc-list-item',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [MatPseudoCheckbox, MatRipple], template: \"<!-- Set aria-hidden=\\\"true\\\" to this DOM node and other decorative nodes in this file. This might\\n be contributing to issue where sometimes VoiceOver focuses on a TextNode in the a11y tree instead\\n of the Option node (#23202). Most assistive technology will generally ignore non-role,\\n non-text-content elements. Adding aria-hidden seems to make VoiceOver behave more consistently. -->\\n@if (multiple) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [state]=\\\"selected ? 'checked' : 'unchecked'\\\"\\n        aria-hidden=\\\"true\\\"></mat-pseudo-checkbox>\\n}\\n\\n<ng-content select=\\\"mat-icon\\\"></ng-content>\\n\\n<span class=\\\"mdc-list-item__primary-text\\\" #text><ng-content></ng-content></span>\\n\\n<!-- Render checkmark at the end for single-selection. -->\\n@if (!multiple && selected && !hideSingleSelectionIndicator) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        state=\\\"checked\\\"\\n        aria-hidden=\\\"true\\\"\\n        appearance=\\\"minimal\\\"></mat-pseudo-checkbox>\\n}\\n\\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\\n@if (group && group._inert) {\\n    <span class=\\\"cdk-visually-hidden\\\">({{ group.label }})</span>\\n}\\n\\n<div class=\\\"mat-mdc-option-ripple mat-focus-indicator\\\" aria-hidden=\\\"true\\\" mat-ripple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"disabled || disableRipple\\\">\\n</div>\\n\", styles: [\".mat-mdc-option{-webkit-user-select:none;user-select:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;min-height:48px;padding:0 16px;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);color:var(--mat-option-label-text-color, var(--mat-sys-on-surface));font-family:var(--mat-option-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-option-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-option-label-text-size, var(--mat-sys-body-large-size));letter-spacing:var(--mat-option-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-option-label-text-weight, var(--mat-sys-body-large-weight))}.mat-mdc-option:hover:not(.mdc-list-item--disabled){background-color:var(--mat-option-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-option:focus.mdc-list-item,.mat-mdc-option.mat-mdc-option-active.mdc-list-item{background-color:var(--mat-option-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent));outline:0}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:var(--mat-option-selected-state-layer-color, var(--mat-sys-secondary-container))}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple) .mdc-list-item__primary-text{color:var(--mat-option-selected-state-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-option .mat-pseudo-checkbox{--mat-minimal-pseudo-checkbox-selected-checkmark-color: var(--mat-option-selected-state-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-option.mdc-list-item{align-items:center;background:rgba(0,0,0,0)}.mat-mdc-option.mdc-list-item--disabled{cursor:default;pointer-events:none}.mat-mdc-option.mdc-list-item--disabled .mat-mdc-option-pseudo-checkbox,.mat-mdc-option.mdc-list-item--disabled .mdc-list-item__primary-text,.mat-mdc-option.mdc-list-item--disabled>mat-icon{opacity:.38}.mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:32px}[dir=rtl] .mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:16px;padding-right:32px}.mat-mdc-option .mat-icon,.mat-mdc-option .mat-pseudo-checkbox-full{margin-right:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-icon,[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-full{margin-right:0;margin-left:16px}.mat-mdc-option .mat-pseudo-checkbox-minimal{margin-left:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-minimal{margin-right:16px;margin-left:0}.mat-mdc-option .mat-mdc-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-mdc-option .mdc-list-item__primary-text{white-space:normal;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;margin-right:auto}[dir=rtl] .mat-mdc-option .mdc-list-item__primary-text{margin-right:0;margin-left:auto}@media(forced-colors: active){.mat-mdc-option.mdc-list-item--selected:not(:has(.mat-mdc-option-pseudo-checkbox))::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}[dir=rtl] .mat-mdc-option.mdc-list-item--selected:not(:has(.mat-mdc-option-pseudo-checkbox))::after{right:auto;left:16px}}.mat-mdc-option-multiple{--mdc-list-list-item-selected-container-color:var(--mdc-list-list-item-container-color, transparent)}.mat-mdc-option-active .mat-focus-indicator::before{content:\\\"\\\"}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { value: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], onSelectionChange: [{\n                type: Output\n            }], _text: [{\n                type: ViewChild,\n                args: ['text', { static: true }]\n            }] } });\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n    if (optionGroups.length) {\n        let optionsArray = options.toArray();\n        let groups = optionGroups.toArray();\n        let groupCounter = 0;\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n        return groupCounter;\n    }\n    return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {\n    if (optionOffset < currentScrollPosition) {\n        return optionOffset;\n    }\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n    return currentScrollPosition;\n}\n\nexport { MatOption as M, _countGroupLabelsBeforeOption as _, MatOptgroup as a, _getOptionScrollPosition as b, MAT_OPTION_PARENT_COMPONENT as c, MAT_OPTGROUP as d, MatOptionSelectionChange as e };\n","import * as i0 from '@angular/core';\nimport { inject, ANIMATION_MODULE_TYPE, Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\nclass MatPseudoCheckbox {\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    /** Display state of the checkbox. */\n    state = 'unchecked';\n    /** Whether the checkbox is disabled. */\n    disabled = false;\n    /**\n     * Appearance of the pseudo checkbox. Default appearance of 'full' renders a checkmark/mixedmark\n     * indicator inside a square box. 'minimal' appearance only renders the checkmark/mixedmark.\n     */\n    appearance = 'full';\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatPseudoCheckbox, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.6\", type: MatPseudoCheckbox, isStandalone: true, selector: \"mat-pseudo-checkbox\", inputs: { state: \"state\", disabled: \"disabled\", appearance: \"appearance\" }, host: { properties: { \"class.mat-pseudo-checkbox-indeterminate\": \"state === \\\"indeterminate\\\"\", \"class.mat-pseudo-checkbox-checked\": \"state === \\\"checked\\\"\", \"class.mat-pseudo-checkbox-disabled\": \"disabled\", \"class.mat-pseudo-checkbox-minimal\": \"appearance === \\\"minimal\\\"\", \"class.mat-pseudo-checkbox-full\": \"appearance === \\\"full\\\"\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\" }, classAttribute: \"mat-pseudo-checkbox\" }, ngImport: i0, template: '', isInline: true, styles: [\".mat-pseudo-checkbox{border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-pseudo-checkbox._mat-animation-noopable::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{left:1px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{left:1px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-minimal-pseudo-checkbox-selected-checkmark-color, var(--mat-sys-primary))}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full{border-color:var(--mat-full-pseudo-checkbox-unselected-icon-color, var(--mat-sys-on-surface-variant));border-width:2px;border-style:solid}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-disabled{border-color:var(--mat-full-pseudo-checkbox-disabled-unselected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate{background-color:var(--mat-full-pseudo-checkbox-selected-icon-color, var(--mat-sys-primary));border-color:rgba(0,0,0,0)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-full-pseudo-checkbox-selected-checkmark-color, var(--mat-sys-on-primary))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background-color:var(--mat-full-pseudo-checkbox-disabled-selected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-full-pseudo-checkbox-disabled-selected-checkmark-color, var(--mat-sys-surface))}.mat-pseudo-checkbox{width:18px;height:18px}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after{width:14px;height:6px;transform-origin:center;top:-4.2426406871px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{top:8px;width:16px}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after{width:10px;height:4px;transform-origin:center;top:-2.8284271247px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{top:6px;width:12px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatPseudoCheckbox, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, selector: 'mat-pseudo-checkbox', template: '', host: {\n                        'class': 'mat-pseudo-checkbox',\n                        '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n                        '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n                        '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n                        '[class.mat-pseudo-checkbox-minimal]': 'appearance === \"minimal\"',\n                        '[class.mat-pseudo-checkbox-full]': 'appearance === \"full\"',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    }, styles: [\".mat-pseudo-checkbox{border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-pseudo-checkbox._mat-animation-noopable::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{left:1px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{left:1px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-minimal-pseudo-checkbox-selected-checkmark-color, var(--mat-sys-primary))}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full{border-color:var(--mat-full-pseudo-checkbox-unselected-icon-color, var(--mat-sys-on-surface-variant));border-width:2px;border-style:solid}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-disabled{border-color:var(--mat-full-pseudo-checkbox-disabled-unselected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate{background-color:var(--mat-full-pseudo-checkbox-selected-icon-color, var(--mat-sys-primary));border-color:rgba(0,0,0,0)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-full-pseudo-checkbox-selected-checkmark-color, var(--mat-sys-on-primary))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background-color:var(--mat-full-pseudo-checkbox-disabled-selected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-full-pseudo-checkbox-disabled-selected-checkmark-color, var(--mat-sys-surface))}.mat-pseudo-checkbox{width:18px;height:18px}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after{width:14px;height:6px;transform-origin:center;top:-4.2426406871px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{top:8px;width:16px}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after{width:10px;height:4px;transform-origin:center;top:-2.8284271247px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{top:6px;width:12px}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { state: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }] } });\n\nexport { MatPseudoCheckbox as M };\n","import * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nimport { M as MatPseudoCheckbox } from './pseudo-checkbox-CJ7seqQH.mjs';\nimport { M as MatCommonModule } from './common-module-WayjW0Pb.mjs';\n\nclass MatPseudoCheckboxModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatPseudoCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: MatPseudoCheckboxModule, imports: [MatCommonModule, MatPseudoCheckbox], exports: [MatPseudoCheckbox] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatPseudoCheckboxModule, imports: [MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatPseudoCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatPseudoCheckbox],\n                    exports: [MatPseudoCheckbox],\n                }]\n        }] });\n\nexport { MatPseudoCheckboxModule as M };\n"],"names":["i0","NgModule","M","MatRippleModule","MatCommonModule","MatOption","a","MatOptgroup","MatPseudoCheckboxModule","MatOptionModule","ɵfac","MatOptionModule_Factory","__ngFactoryType__","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","imports","ngDevMode","ɵsetClassMetadata","args","exports","_IdGenerator","ENTER","SPACE","hasModifierKey","InjectionToken","inject","booleanAttribute","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","ElementRef","ChangeDetectorRef","EventEmitter","isSignal","Output","ViewChild","Subject","MatRipple","MatPseudoCheckbox","_","_StructuralStylesLoader","_CdkPrivateStyleLoader","_VisuallyHiddenLoader","_c0","_c1","_c2","_c3","_c4","MatOption_Conditional_0_Template","rf","ctx","ɵɵelement","ctx_r0","ɵɵnextContext","ɵɵproperty","disabled","selected","MatOption_Conditional_5_Template","MatOption_Conditional_6_Template","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","group","label","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","_labelId","getId","_inert","constructor","parent","optional","inertGroups","MatOptgroup_Factory","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","hostVars","hostBindings","MatOptgroup_HostBindings","ɵɵattribute","toString","inputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInputTransformsFeature","ngContentSelectors","decls","vars","consts","template","MatOptgroup_Template","ɵɵprojectionDef","ɵɵprojection","ɵɵclassProp","styles","encapsulation","changeDetection","selector","None","OnPush","host","providers","transform","MatOptionSelectionChange","source","isUserInput","_element","_changeDetectorRef","_parent","_signalDisableRipple","_selected","_active","_disabled","_mostRecentViewValue","multiple","value","id","disableRipple","hideSingleSelectionIndicator","onSelectionChange","_text","_stateChanges","styleLoader","load","active","viewValue","nativeElement","textContent","trim","select","emitEvent","markForCheck","_emitSelectionChangeEvent","deselect","focus","_origin","options","element","_getHostElement","setActiveStyles","setInactiveStyles","getLabel","_handleKeydown","event","keyCode","_selectViaInteraction","preventDefault","_getTabIndex","ngAfterViewChecked","next","ngOnDestroy","complete","emit","MatOption_Factory","viewQuery","MatOption_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","MatOption_HostBindings","ɵɵlistener","MatOption_click_HostBindingHandler","MatOption_keydown_HostBindingHandler","$event","ɵɵhostProperty","outputs","MatOption_Template","ɵɵtemplate","ɵɵconditional","dependencies","static","_countGroupLabelsBeforeOption","optionIndex","optionGroups","length","optionsArray","toArray","groups","groupCounter","i","_getOptionScrollPosition","optionOffset","optionHeight","currentScrollPosition","panelHeight","Math","max","b","c","d","e","ANIMATION_MODULE_TYPE","_animationMode","state","appearance","MatPseudoCheckbox_Factory","MatPseudoCheckbox_HostBindings","MatPseudoCheckbox_Template","MatPseudoCheckboxModule_Factory"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3]}