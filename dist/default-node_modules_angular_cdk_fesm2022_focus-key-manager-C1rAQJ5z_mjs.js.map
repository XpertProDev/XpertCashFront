{"version":3,"file":"default-node_modules_angular_cdk_fesm2022_focus-key-manager-C1rAQJ5z_mjs.js","mappings":"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","sources":["./node_modules/@angular/cdk/fesm2022/focus-key-manager-C1rAQJ5z.mjs","./node_modules/@angular/cdk/fesm2022/list-key-manager-CyOIXo8P.mjs","./node_modules/@angular/cdk/fesm2022/typeahead-9ZW4Dtsf.mjs"],"sourcesContent":["import { L as ListKeyManager } from './list-key-manager-CyOIXo8P.mjs';\n\nclass FocusKeyManager extends ListKeyManager {\n    _origin = 'program';\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\nexport { FocusKeyManager as F };\n","import { signal, QueryList, isSignal, effect } from '@angular/core';\nimport { Subscription, Subject } from 'rxjs';\nimport { T as Typeahead } from './typeahead-9ZW4Dtsf.mjs';\nimport { hasModifierKey } from './keycodes.mjs';\nimport { P as PAGE_DOWN, a as PAGE_UP, E as END, H as HOME, L as LEFT_ARROW, R as RIGHT_ARROW, U as UP_ARROW, D as DOWN_ARROW, T as TAB } from './keycodes-CpHkExLC.mjs';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n    _items;\n    _activeItemIndex = -1;\n    _activeItem = signal(null);\n    _wrap = false;\n    _typeaheadSubscription = Subscription.EMPTY;\n    _itemChangesSubscription;\n    _vertical = true;\n    _horizontal;\n    _allowedModifierKeys = [];\n    _homeAndEnd = false;\n    _pageUpAndDown = { enabled: false, delta: 10 };\n    _effectRef;\n    _typeahead;\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    _skipPredicateFn = (item) => item.disabled;\n    constructor(_items, injector) {\n        this._items = _items;\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            this._itemChangesSubscription = _items.changes.subscribe((newItems) => this._itemsChanged(newItems.toArray()));\n        }\n        else if (isSignal(_items)) {\n            if (!injector && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw new Error('ListKeyManager constructed with a signal must receive an injector');\n            }\n            this._effectRef = effect(() => this._itemsChanged(_items()), { injector });\n        }\n    }\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    tabOut = new Subject();\n    /** Stream that emits whenever the active item of the list manager changes. */\n    change = new Subject();\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this._allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const items = this._getItemsArray();\n            if (items.length > 0 && items.some(item => typeof item.getLabel !== 'function')) {\n                throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n            }\n        }\n        this._typeaheadSubscription.unsubscribe();\n        const items = this._getItemsArray();\n        this._typeahead = new Typeahead(items, {\n            debounceInterval: typeof debounceInterval === 'number' ? debounceInterval : undefined,\n            skipPredicate: item => this._skipPredicateFn(item),\n        });\n        this._typeaheadSubscription = this._typeahead.selectedItem.subscribe(item => {\n            this.setActiveItem(item);\n        });\n        return this;\n    }\n    /** Cancels the current typeahead sequence. */\n    cancelTypeahead() {\n        this._typeahead?.reset();\n        return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled = true) {\n        this._homeAndEnd = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to activate every 10th, configured or first/last element in up/down direction\n     * respectively when the Page-Up or Page-Down key is pressed.\n     * @param enabled Whether pressing the Page-Up or Page-Down key activates the first/last item.\n     * @param delta Whether pressing the Home or End key activates the first/last item.\n     */\n    withPageUpDown(enabled = true, delta = 10) {\n        this._pageUpAndDown = { enabled, delta };\n        return this;\n    }\n    setActiveItem(item) {\n        const previousActiveItem = this._activeItem();\n        this.updateActiveItem(item);\n        if (this._activeItem() !== previousActiveItem) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event) {\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every(modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case HOME:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case END:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case PAGE_UP:\n                if (this._pageUpAndDown.enabled && isModifierAllowed) {\n                    const targetIndex = this._activeItemIndex - this._pageUpAndDown.delta;\n                    this._setActiveItemByIndex(targetIndex > 0 ? targetIndex : 0, 1);\n                    break;\n                }\n                else {\n                    return;\n                }\n            case PAGE_DOWN:\n                if (this._pageUpAndDown.enabled && isModifierAllowed) {\n                    const targetIndex = this._activeItemIndex + this._pageUpAndDown.delta;\n                    const itemsLength = this._getItemsArray().length;\n                    this._setActiveItemByIndex(targetIndex < itemsLength ? targetIndex : itemsLength - 1, -1);\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    this._typeahead?.handleKey(event);\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._typeahead?.reset();\n        event.preventDefault();\n    }\n    /** Index of the currently active item. */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /** The active item. */\n    get activeItem() {\n        return this._activeItem();\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return !!this._typeahead && this._typeahead.isTyping();\n    }\n    /** Sets the active item to the first enabled item in the list. */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._getItemsArray().length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap\n            ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    updateActiveItem(item) {\n        const itemArray = this._getItemsArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem.set(activeItem == null ? null : activeItem);\n        this._activeItemIndex = index;\n        this._typeahead?.setCurrentSelectedItemIndex(index);\n    }\n    /** Cleans up the key manager. */\n    destroy() {\n        this._typeaheadSubscription.unsubscribe();\n        this._itemChangesSubscription?.unsubscribe();\n        this._effectRef?.destroy();\n        this._typeahead?.destroy();\n        this.tabOut.complete();\n        this.change.complete();\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    _setActiveInWrapMode(delta) {\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n    _getItemsArray() {\n        if (isSignal(this._items)) {\n            return this._items();\n        }\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n    /** Callback for when the items have changed. */\n    _itemsChanged(newItems) {\n        this._typeahead?.setItems(newItems);\n        const activeItem = this._activeItem();\n        if (activeItem) {\n            const newIndex = newItems.indexOf(activeItem);\n            if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                this._activeItemIndex = newIndex;\n                this._typeahead?.setCurrentSelectedItemIndex(newIndex);\n            }\n        }\n    }\n}\n\nexport { ListKeyManager as L };\n","import { Subject } from 'rxjs';\nimport { tap, debounceTime, filter, map } from 'rxjs/operators';\nimport { A, Z, b as ZERO, N as NINE } from './keycodes-CpHkExLC.mjs';\n\nconst DEFAULT_TYPEAHEAD_DEBOUNCE_INTERVAL_MS = 200;\n/**\n * Selects items based on keyboard inputs. Implements the typeahead functionality of\n * `role=\"listbox\"` or `role=\"tree\"` and other related roles.\n */\nclass Typeahead {\n    _letterKeyStream = new Subject();\n    _items = [];\n    _selectedItemIndex = -1;\n    /** Buffer for the letters that the user has pressed */\n    _pressedLetters = [];\n    _skipPredicateFn;\n    _selectedItem = new Subject();\n    selectedItem = this._selectedItem;\n    constructor(initialItems, config) {\n        const typeAheadInterval = typeof config?.debounceInterval === 'number'\n            ? config.debounceInterval\n            : DEFAULT_TYPEAHEAD_DEBOUNCE_INTERVAL_MS;\n        if (config?.skipPredicate) {\n            this._skipPredicateFn = config.skipPredicate;\n        }\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            initialItems.length &&\n            initialItems.some(item => typeof item.getLabel !== 'function')) {\n            throw new Error('KeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this.setItems(initialItems);\n        this._setupKeyHandler(typeAheadInterval);\n    }\n    destroy() {\n        this._pressedLetters = [];\n        this._letterKeyStream.complete();\n        this._selectedItem.complete();\n    }\n    setCurrentSelectedItemIndex(index) {\n        this._selectedItemIndex = index;\n    }\n    setItems(items) {\n        this._items = items;\n    }\n    handleKey(event) {\n        const keyCode = event.keyCode;\n        // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n        // otherwise fall back to resolving alphanumeric characters via the keyCode.\n        if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n        }\n        else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n        }\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this._pressedLetters.length > 0;\n    }\n    /** Resets the currently stored sequence of typed letters. */\n    reset() {\n        this._pressedLetters = [];\n    }\n    _setupKeyHandler(typeAheadInterval) {\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._letterKeyStream\n            .pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(typeAheadInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join('').toLocaleUpperCase()))\n            .subscribe(inputString => {\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < this._items.length + 1; i++) {\n                const index = (this._selectedItemIndex + i) % this._items.length;\n                const item = this._items[index];\n                if (!this._skipPredicateFn?.(item) &&\n                    item.getLabel?.().toLocaleUpperCase().trim().indexOf(inputString) === 0) {\n                    this._selectedItem.next(item);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n    }\n}\n\nexport { Typeahead as T };\n"],"names":["L","ListKeyManager","FocusKeyManager","_origin","setFocusOrigin","origin","setActiveItem","item","activeItem","focus","F","signal","QueryList","isSignal","effect","Subscription","Subject","T","Typeahead","hasModifierKey","P","PAGE_DOWN","a","PAGE_UP","E","END","H","HOME","LEFT_ARROW","R","RIGHT_ARROW","U","UP_ARROW","D","DOWN_ARROW","TAB","_items","_activeItemIndex","_activeItem","_wrap","_typeaheadSubscription","EMPTY","_itemChangesSubscription","_vertical","_horizontal","_allowedModifierKeys","_homeAndEnd","_pageUpAndDown","enabled","delta","_effectRef","_typeahead","_skipPredicateFn","disabled","constructor","injector","changes","subscribe","newItems","_itemsChanged","toArray","ngDevMode","Error","tabOut","change","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","withHorizontalOrientation","direction","withAllowedModifierKeys","keys","withTypeAhead","debounceInterval","items","_getItemsArray","length","some","getLabel","unsubscribe","undefined","selectedItem","cancelTypeahead","reset","withHomeAndEnd","withPageUpDown","previousActiveItem","updateActiveItem","next","onKeydown","event","keyCode","modifiers","isModifierAllowed","every","modifier","indexOf","setNextItemActive","setPreviousItemActive","setFirstItemActive","setLastItemActive","targetIndex","_setActiveItemByIndex","itemsLength","handleKey","preventDefault","activeItemIndex","isTyping","_setActiveItemByDelta","itemArray","index","set","setCurrentSelectedItemIndex","destroy","complete","_setActiveInWrapMode","_setActiveInDefaultMode","i","fallbackDelta","setItems","newIndex","tap","debounceTime","filter","map","A","Z","b","ZERO","N","NINE","DEFAULT_TYPEAHEAD_DEBOUNCE_INTERVAL_MS","_letterKeyStream","_selectedItemIndex","_pressedLetters","_selectedItem","initialItems","config","typeAheadInterval","_setupKeyHandler","key","toLocaleUpperCase","String","fromCharCode","pipe","letter","push","join","inputString","trim"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2]}