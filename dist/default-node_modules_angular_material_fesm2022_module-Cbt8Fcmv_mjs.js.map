{"version":3,"file":"default-node_modules_angular_material_fesm2022_module-Cbt8Fcmv_mjs.js","mappings":"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","sources":["./node_modules/@angular/cdk/fesm2022/selection-model-CeeHVIcP.mjs","./node_modules/@angular/material/fesm2022/error-options-Dm2JJUbF.mjs","./node_modules/@angular/material/fesm2022/error-state-Dtb1IHM-.mjs","./node_modules/@angular/material/fesm2022/module-BXZhw7pQ.mjs","./node_modules/@angular/material/fesm2022/module-Cbt8Fcmv.mjs"],"sourcesContent":["import { Subject } from 'rxjs';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    _multiple;\n    _emitChanges;\n    compareWith;\n    /** Currently-selected values. */\n    _selection = new Set();\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n    _deselectedToEmit = [];\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n    _selectedToEmit = [];\n    /** Cache for the array value of the selected items. */\n    _selected;\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /** Event emitted when the value has changed. */\n    changed = new Subject();\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        this.compareWith = compareWith;\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param values The values to select\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param values The values to deselect\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Sets the selected values\n     * @param values The new selected values\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    setSelection(...values) {\n        this._verifyValueAssignment(values);\n        const oldValues = this.selected;\n        const newSelectedSet = new Set(values.map(value => this._getConcreteValue(value)));\n        values.forEach(value => this._markSelected(value));\n        oldValues\n            .filter(value => !newSelectedSet.has(this._getConcreteValue(value, newSelectedSet)))\n            .forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param value The value to toggle\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    toggle(value) {\n        return this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @param flushEvent Whether to flush the changes in an event.\n     *   If false, the changes to the selection will be flushed along with the next event.\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    clear(flushEvent = true) {\n        this._unmarkAll();\n        const changed = this._hasQueuedChanges();\n        if (flushEvent) {\n            this._emitChangeEvent();\n        }\n        return changed;\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(this._getConcreteValue(value));\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit,\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        value = this._getConcreteValue(value);\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            if (!this.isSelected(value)) {\n                this._selection.add(value);\n            }\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        value = this._getConcreteValue(value);\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n    /** Whether there are queued up change to be emitted. */\n    _hasQueuedChanges() {\n        return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n    }\n    /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n    _getConcreteValue(inputValue, selection) {\n        if (!this.compareWith) {\n            return inputValue;\n        }\n        else {\n            selection = selection ?? this._selection;\n            for (let selectedValue of selection) {\n                if (this.compareWith(inputValue, selectedValue)) {\n                    return selectedValue;\n                }\n            }\n            return inputValue;\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\nexport { SelectionModel as S, getMultipleValuesInSingleSelectionError as g };\n","import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\nclass ShowOnDirtyErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, decorators: [{\n            type: Injectable\n        }] });\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nclass ErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: ErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: ErrorStateMatcher, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: ErrorStateMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nexport { ErrorStateMatcher as E, ShowOnDirtyErrorStateMatcher as S };\n","/**\n * Class that tracks the error state of a component.\n * @docs-private\n */\nclass _ErrorStateTracker {\n    _defaultMatcher;\n    ngControl;\n    _parentFormGroup;\n    _parentForm;\n    _stateChanges;\n    /** Whether the tracker is currently in an error state. */\n    errorState = false;\n    /** User-defined matcher for the error state. */\n    matcher;\n    constructor(_defaultMatcher, ngControl, _parentFormGroup, _parentForm, _stateChanges) {\n        this._defaultMatcher = _defaultMatcher;\n        this.ngControl = ngControl;\n        this._parentFormGroup = _parentFormGroup;\n        this._parentForm = _parentForm;\n        this._stateChanges = _stateChanges;\n    }\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const matcher = this.matcher || this._defaultMatcher;\n        const control = this.ngControl ? this.ngControl.control : null;\n        const newState = matcher?.isErrorState(control, parent) ?? false;\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this._stateChanges.next();\n        }\n    }\n}\n\nexport { _ErrorStateTracker as _ };\n","import { ObserversModule } from '@angular/cdk/observers';\nimport * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nimport { j as MatFormField, M as MatLabel, b as MatError, c as MatHint, e as MatPrefix, g as MatSuffix } from './form-field-DqPi4knt.mjs';\nimport { M as MatCommonModule } from './common-module-WayjW0Pb.mjs';\n\nclass MatFormFieldModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatFormFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            ObserversModule,\n            MatFormField,\n            MatLabel,\n            MatError,\n            MatHint,\n            MatPrefix,\n            MatSuffix], exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            ObserversModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatFormFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        ObserversModule,\n                        MatFormField,\n                        MatLabel,\n                        MatError,\n                        MatHint,\n                        MatPrefix,\n                        MatSuffix,\n                    ],\n                    exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule],\n                }]\n        }] });\n\nexport { MatFormFieldModule as M };\n","import { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, ElementRef, Renderer2, ANIMATION_MODULE_TYPE, EventEmitter, HostAttributeToken, booleanAttribute, numberAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, Input, ViewChild, Output, Directive, NgModule } from '@angular/core';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _IdGenerator, LiveAnnouncer, removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { hasModifierKey, ENTER, SPACE, A, ESCAPE, DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport { NgControl, Validators, NgForm, FormGroupDirective } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, filter, map, takeUntil, take } from 'rxjs/operators';\nimport { NgClass } from '@angular/common';\nimport { h as MAT_FORM_FIELD, k as MatFormFieldControl } from './form-field-DqPi4knt.mjs';\nimport { _ as _countGroupLabelsBeforeOption, b as _getOptionScrollPosition, c as MAT_OPTION_PARENT_COMPONENT, M as MatOption, d as MAT_OPTGROUP } from './option-ChV6uQgD.mjs';\nimport { E as ErrorStateMatcher } from './error-options-Dm2JJUbF.mjs';\nimport { _ as _ErrorStateTracker } from './error-state-Dtb1IHM-.mjs';\nimport { M as MatOptionModule } from './index-DOxJc1m4.mjs';\nimport { M as MatCommonModule } from './common-module-WayjW0Pb.mjs';\nimport { M as MatFormFieldModule } from './module-BXZhw7pQ.mjs';\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    source;\n    value;\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nclass MatSelect {\n    _viewportRuler = inject(ViewportRuler);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dir = inject(Directionality, { optional: true });\n    _idGenerator = inject(_IdGenerator);\n    _renderer = inject(Renderer2);\n    _parentFormField = inject(MAT_FORM_FIELD, { optional: true });\n    ngControl = inject(NgControl, { self: true, optional: true });\n    _liveAnnouncer = inject(LiveAnnouncer);\n    _defaultOptions = inject(MAT_SELECT_CONFIG, { optional: true });\n    _animationsDisabled = inject(ANIMATION_MODULE_TYPE, { optional: true }) === 'NoopAnimations';\n    _initialized = new Subject();\n    _cleanupDetach;\n    /** All of the defined select options. */\n    options;\n    // TODO(crisbeto): this is only necessary for the non-MDC select, but it's technically a\n    // public API so we have to keep it. It should be deprecated and removed eventually.\n    /** All of the defined groups of options. */\n    optionGroups;\n    /** User-supplied override of the trigger element. */\n    customTrigger;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top',\n        },\n        {\n            originX: 'end',\n            originY: 'bottom',\n            overlayX: 'end',\n            overlayY: 'top',\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            panelClass: 'mat-mdc-select-panel-above',\n        },\n        {\n            originX: 'end',\n            originY: 'top',\n            overlayX: 'end',\n            overlayY: 'bottom',\n            panelClass: 'mat-mdc-select-panel-above',\n        },\n    ];\n    /** Scrolls a particular option into the view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    /** Called when the panel has been opened and the overlay has settled on its final position. */\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    /** Creates a change event object that should be emitted by the select. */\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Factory function used to create a scroll strategy for this select. */\n    _scrollStrategyFactory = inject(MAT_SELECT_SCROLL_STRATEGY);\n    /** Whether or not the overlay panel is open. */\n    _panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    _compareWith = (o1, o2) => o1 === o2;\n    /** Unique id for this input. */\n    _uid = this._idGenerator.getId('mat-select-');\n    /** Current `aria-labelledby` value for the select trigger. */\n    _triggerAriaLabelledBy = null;\n    /**\n     * Keeps track of the previous form control assigned to the select.\n     * Used to detect if it has changed.\n     */\n    _previousControl;\n    /** Emits whenever the component is destroyed. */\n    _destroy = new Subject();\n    /** Tracks the error state of the select. */\n    _errorStateTracker;\n    /**\n     * Emits whenever the component state changes and should cause the parent\n     * form-field to update. Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    stateChanges = new Subject();\n    /**\n     * Disable the automatic labeling to avoid issues like #27241.\n     * @docs-private\n     */\n    disableAutomaticLabeling = true;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    userAriaDescribedBy;\n    /** Deals with the selection logic. */\n    _selectionModel;\n    /** Manages keyboard events for options in the panel. */\n    _keyManager;\n    /** Ideal origin for the overlay panel. */\n    _preferredOverlayOrigin;\n    /** Width of the overlay panel. */\n    _overlayWidth;\n    /** `View -> model callback called when value changes` */\n    _onChange = () => { };\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => { };\n    /** ID for the DOM node containing the select's value. */\n    _valueId = this._idGenerator.getId('mat-select-value-');\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy;\n    _overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    _focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n    controlType = 'mat-select';\n    /** Trigger that opens the select. */\n    trigger;\n    /** Panel containing the select options. */\n    panel;\n    /** Overlay pane containing the options. */\n    _overlayDir;\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    panelClass;\n    /** Whether the select is disabled. */\n    disabled = false;\n    /** Whether ripples in the select are disabled. */\n    disableRipple = false;\n    /** Tab index of the select. */\n    tabIndex = 0;\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    _hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    _placeholder;\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = value;\n        this.stateChanges.next();\n    }\n    _required;\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = value;\n    }\n    _multiple = false;\n    /** Whether to center the active option over the trigger. */\n    disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    _value;\n    /** Aria label of the select. */\n    ariaLabel = '';\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby;\n    /** Object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    typeaheadDebounceInterval;\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    sortComparator;\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    _id;\n    /** Whether the select is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    /**\n     * Width of the panel. If set to `auto`, the panel will match the trigger width.\n     * If set to null or an empty string, the panel will grow to match the longest option's text.\n     */\n    panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n        ? this._defaultOptions.panelWidth\n        : 'auto';\n    /**\n     * By default selecting an option with a `null` or `undefined` value will reset the select's\n     * value. Enable this option if the reset behavior doesn't match your requirements and instead\n     * the nullable options should become selected. The value of this input can be controlled app-wide\n     * using the `MAT_SELECT_CONFIG` injection token.\n     */\n    canSelectNullableOptions = this._defaultOptions?.canSelectNullableOptions ?? false;\n    /** Combined stream of all of the child options' change events. */\n    optionSelectionChanges = defer(() => {\n        const options = this.options;\n        if (options) {\n            return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n        }\n        return this._initialized.pipe(switchMap(() => this.optionSelectionChanges));\n    });\n    /** Event emitted when the select panel has been toggled. */\n    openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n    _openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n    /** Event emitted when the select has been closed. */\n    _closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n    /** Event emitted when the selected value has been changed by the user. */\n    selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    valueChange = new EventEmitter();\n    constructor() {\n        const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n        const parentForm = inject(NgForm, { optional: true });\n        const parentFormGroup = inject(FormGroupDirective, { optional: true });\n        const tabIndex = inject(new HostAttributeToken('tabindex'), { optional: true });\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (this._defaultOptions?.typeaheadDebounceInterval != null) {\n            this.typeaheadDebounceInterval = this._defaultOptions.typeaheadDebounceInterval;\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, this.ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = tabIndex == null ? 0 : parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initialized.next();\n        this._initialized.complete();\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by the input, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._cleanupDetach?.();\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n        this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (!this._canOpen()) {\n            return;\n        }\n        // It's important that we read this as late as possible, because doing so earlier will\n        // return a different element since it's based on queries in the form field which may\n        // not have run yet. Also this needs to be assigned before we measure the overlay width.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n        this._cleanupDetach?.();\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n        this._applyModalPanelOwnership();\n        this._panelOpen = true;\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n        this._overlayDir.attachOverlay();\n        this._keyManager.withHorizontalOrientation(null);\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n        // Simulate the animation event before we moved away from `@angular/animations`.\n        Promise.resolve().then(() => this.openedChange.emit(true));\n    }\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n    _trackedModal = null;\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (!this._trackedModal) {\n            // Most commonly, the autocomplete trigger is not used inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._exitAndDetach();\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n            // Required for the MDC form field to pick up when the overlay has been closed.\n            this.stateChanges.next();\n            // Simulate the animation event before we moved away from `@angular/animations`.\n            Promise.resolve().then(() => this.openedChange.emit(false));\n        }\n    }\n    /** Triggers the exit animation and detaches the overlay at the end. */\n    _exitAndDetach() {\n        if (this._animationsDisabled || !this.panel) {\n            this._detachOverlay();\n            return;\n        }\n        this._cleanupDetach?.();\n        this._cleanupDetach = () => {\n            cleanupEvent();\n            clearTimeout(exitFallbackTimer);\n            this._cleanupDetach = undefined;\n        };\n        const panel = this.panel.nativeElement;\n        const cleanupEvent = this._renderer.listen(panel, 'animationend', (event) => {\n            if (event.animationName === '_mat-select-exit') {\n                this._cleanupDetach?.();\n                this._detachOverlay();\n            }\n        });\n        // Since closing the overlay depends on the animation, we have a fallback in case the panel\n        // doesn't animate. This can happen in some internal tests that do `* {animation: none}`.\n        const exitFallbackTimer = setTimeout(() => {\n            this._cleanupDetach?.();\n            this._detachOverlay();\n        }, 200);\n        panel.classList.add('mat-select-panel-exit');\n    }\n    /** Detaches the current overlay directive. */\n    _detachOverlay() {\n        this._overlayDir.detachOverlay();\n        // Some of the overlay detachment logic depends on change detection.\n        // Mark for check to ensure that things get picked up in a timely manner.\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Refreshes the error state of the select. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    /** Handles keyboard events coming from the overlay. */\n    _handleOverlayKeydown(event) {\n        // TODO(crisbeto): prior to #30363 this was being handled inside the overlay directive, but we\n        // need control over the animation timing so we do it manually. We should remove the `keydown`\n        // listener from `.mat-mdc-select-panel` and handle all the events here. That may cause\n        // further test breakages so it's left for a follow-up.\n        if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n            this.close();\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return ((option.value != null || this.canSelectNullableOptions) &&\n                    this._compareWith(option.value, value));\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate = (option) => {\n        if (this.panelOpen) {\n            // Support keyboard focusing disabled options in an ARIA listbox.\n            return false;\n        }\n        // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n        // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n        // closed.\n        return option.disabled;\n    };\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n        if (this.panelWidth === 'auto') {\n            const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin\n                ? preferredOrigin.elementRef\n                : preferredOrigin || this._elementRef;\n            return refToMeasure.nativeElement.getBoundingClientRect().width;\n        }\n        return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this.typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (!this.canSelectNullableOptions && option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0 && !!this._overlayDir;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId() || null;\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        let value = this._parentFormField?.getLabelId() || '';\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        // The value should not be used for the trigger's aria-labelledby,\n        // but this currently \"breaks\" accessibility tests since they complain\n        // there is no aria-labelledby. This is because they are not setting an\n        // appropriate label on the form field or select.\n        // TODO: remove this conditional after fixing clients by ensuring their\n        // selects have a label applied.\n        if (!value) {\n            value = this._valueId;\n        }\n        return value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSelect, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.2.6\", type: MatSelect, isStandalone: true, selector: \"mat-select\", inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute], placeholder: \"placeholder\", required: [\"required\", \"required\", booleanAttribute], multiple: [\"multiple\", \"multiple\", booleanAttribute], disableOptionCentering: [\"disableOptionCentering\", \"disableOptionCentering\", booleanAttribute], compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: [\"typeaheadDebounceInterval\", \"typeaheadDebounceInterval\", numberAttribute], sortComparator: \"sortComparator\", id: \"id\", panelWidth: \"panelWidth\", canSelectNullableOptions: [\"canSelectNullableOptions\", \"canSelectNullableOptions\", booleanAttribute] }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, host: { attributes: { \"role\": \"combobox\", \"aria-haspopup\": \"listbox\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], exportAs: [\"matSelect\"], usesOnChanges: true, ngImport: i0, template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayDisableClose]=\\\"true\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  [cdkConnectedOverlayFlexibleDimensions]=\\\"true\\\"\\n  (detach)=\\\"close()\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (overlayKeydown)=\\\"_handleOverlayKeydown($event)\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [class.mat-select-panel-animations-enabled]=\\\"!_animationsDisabled\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"@keyframes _mat-select-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}@keyframes _mat-select-exit{from{opacity:1}to{opacity:0}}.mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color, var(--mat-sys-on-surface));font-family:var(--mat-select-trigger-text-font, var(--mat-sys-body-large-font));line-height:var(--mat-select-trigger-text-line-height, var(--mat-sys-body-large-line-height));font-size:var(--mat-select-trigger-text-size, var(--mat-sys-body-large-size));font-weight:var(--mat-select-trigger-text-weight, var(--mat-sys-body-large-weight));letter-spacing:var(--mat-select-trigger-text-tracking, var(--mat-sys-body-large-tracking))}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12))}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-disabled .mat-mdc-select-placeholder{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color, var(--mat-sys-error))}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color, var(--mat-sys-primary))}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}@media(forced-colors: active){.mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .mat-mdc-select-arrow svg{fill:GrayText}}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:relative;background-color:var(--mat-select-panel-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-select-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-select-panel-animations-enabled{animation:_mat-select-enter 120ms cubic-bezier(0, 0, 0.2, 1)}.mat-select-panel-animations-enabled.mat-select-panel-exit{animation:_mat-select-exit 100ms linear}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field:not(.mat-form-field-animations-enabled) .mat-mdc-select-placeholder,._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform, translateY(-8px))}\\n\"], dependencies: [{ kind: \"directive\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { kind: \"directive\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\", \"cdkConnectedOverlayDisposeOnNavigation\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], imports: [CdkOverlayOrigin, CdkConnectedOverlay, NgClass], template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayDisableClose]=\\\"true\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  [cdkConnectedOverlayFlexibleDimensions]=\\\"true\\\"\\n  (detach)=\\\"close()\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (overlayKeydown)=\\\"_handleOverlayKeydown($event)\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [class.mat-select-panel-animations-enabled]=\\\"!_animationsDisabled\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"@keyframes _mat-select-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}@keyframes _mat-select-exit{from{opacity:1}to{opacity:0}}.mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color, var(--mat-sys-on-surface));font-family:var(--mat-select-trigger-text-font, var(--mat-sys-body-large-font));line-height:var(--mat-select-trigger-text-line-height, var(--mat-sys-body-large-line-height));font-size:var(--mat-select-trigger-text-size, var(--mat-sys-body-large-size));font-weight:var(--mat-select-trigger-text-weight, var(--mat-sys-body-large-weight));letter-spacing:var(--mat-select-trigger-text-tracking, var(--mat-sys-body-large-tracking))}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12))}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-disabled .mat-mdc-select-placeholder{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color, var(--mat-sys-error))}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color, var(--mat-sys-primary))}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}@media(forced-colors: active){.mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .mat-mdc-select-arrow svg{fill:GrayText}}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:relative;background-color:var(--mat-select-panel-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-select-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-select-panel-animations-enabled{animation:_mat-select-enter 120ms cubic-bezier(0, 0, 0.2, 1)}.mat-select-panel-animations-enabled.mat-select-panel-exit{animation:_mat-select-exit 100ms linear}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field:not(.mat-form-field-animations-enabled) .mat-mdc-select-placeholder,._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform, translateY(-8px))}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], multiple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableOptionCentering: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], canSelectNullableOptions: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: MatSelectTrigger, isStandalone: true, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n\nclass MatSelectModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSelectModule, imports: [OverlayModule, MatOptionModule, MatCommonModule, MatSelect, MatSelectTrigger], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, MatSelect, MatSelectTrigger],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\nexport { MatSelectModule as M, MAT_SELECT_SCROLL_STRATEGY as a, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY as b, MAT_SELECT_CONFIG as c, MAT_SELECT_SCROLL_STRATEGY_PROVIDER as d, MAT_SELECT_TRIGGER as e, MatSelectChange as f, MatSelect as g, MatSelectTrigger as h };\n"],"names":["Subject","SelectionModel","_multiple","_emitChanges","compareWith","_selection","Set","_deselectedToEmit","_selectedToEmit","_selected","selected","Array","from","values","changed","constructor","initiallySelectedValues","length","forEach","value","_markSelected","select","_verifyValueAssignment","_hasQueuedChanges","_emitChangeEvent","deselect","_unmarkSelected","setSelection","oldValues","newSelectedSet","map","_getConcreteValue","filter","has","toggle","isSelected","clear","flushEvent","_unmarkAll","isEmpty","size","hasValue","sort","predicate","isMultipleSelection","next","source","added","removed","add","push","delete","ngDevMode","getMultipleValuesInSingleSelectionError","inputValue","selection","selectedValue","Error","S","g","i0","Injectable","ShowOnDirtyErrorStateMatcher","isErrorState","control","form","invalid","dirty","submitted","ɵfac","ShowOnDirtyErrorStateMatcher_Factory","__ngFactoryType__","ɵprov","ɵɵdefineInjectable","token","factory","ɵsetClassMetadata","type","ErrorStateMatcher","touched","ErrorStateMatcher_Factory","providedIn","args","E","_ErrorStateTracker","_defaultMatcher","ngControl","_parentFormGroup","_parentForm","_stateChanges","errorState","matcher","updateErrorState","oldState","parent","newState","_","ObserversModule","NgModule","j","MatFormField","M","MatLabel","b","MatError","c","MatHint","e","MatPrefix","MatSuffix","MatCommonModule","MatFormFieldModule","MatFormFieldModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","Overlay","CdkConnectedOverlay","CdkOverlayOrigin","OverlayModule","InjectionToken","inject","ChangeDetectorRef","ElementRef","Renderer2","ANIMATION_MODULE_TYPE","EventEmitter","HostAttributeToken","booleanAttribute","numberAttribute","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","Input","ViewChild","Output","Directive","ViewportRuler","CdkScrollableModule","_IdGenerator","LiveAnnouncer","removeAriaReferencedId","addAriaReferencedId","ActiveDescendantKeyManager","Directionality","hasModifierKey","ENTER","SPACE","A","ESCAPE","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","NgControl","Validators","NgForm","FormGroupDirective","defer","merge","startWith","switchMap","takeUntil","take","NgClass","h","MAT_FORM_FIELD","k","MatFormFieldControl","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","d","MAT_OPTGROUP","MatOptionModule","_c0","_c1","_c2","_c3","MatSelect_Conditional_4_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r1","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","placeholder","MatSelect_Conditional_5_Conditional_1_Template","ɵɵprojection","MatSelect_Conditional_5_Conditional_2_Template","triggerValue","MatSelect_Conditional_5_Template","ɵɵtemplate","ɵɵconditional","customTrigger","MatSelect_ng_template_10_Template","_r3","ɵɵgetCurrentView","ɵɵlistener","MatSelect_ng_template_10_Template_div_keydown_0_listener","$event","ɵɵrestoreView","ɵɵresetView","_handleKeydown","ɵɵclassMapInterpolate1","_getPanelTheme","ɵɵclassProp","_animationsDisabled","ɵɵproperty","panelClass","ɵɵattribute","id","multiple","ariaLabel","_getPanelAriaLabelledby","getMatSelectDynamicMultipleError","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","MAT_SELECT_SCROLL_STRATEGY","overlay","scrollStrategies","reposition","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_SELECT_TRIGGER","MatSelectChange","MatSelect","_viewportRuler","_changeDetectorRef","_elementRef","_dir","optional","_idGenerator","_renderer","_parentFormField","self","_liveAnnouncer","_defaultOptions","_initialized","_cleanupDetach","options","optionGroups","_positions","originX","originY","overlayX","overlayY","_scrollOptionIntoView","index","option","toArray","panel","nativeElement","labelCount","element","_getHostElement","scrollTop","offsetTop","offsetHeight","_positioningSettled","_keyManager","activeItemIndex","_getChangeEvent","_scrollStrategyFactory","_panelOpen","_compareWith","o1","o2","_uid","getId","_triggerAriaLabelledBy","_previousControl","_destroy","_errorStateTracker","stateChanges","disableAutomaticLabeling","userAriaDescribedBy","_selectionModel","_preferredOverlayOrigin","_overlayWidth","_onChange","_onTouched","_valueId","_scrollStrategy","_overlayPanelClass","overlayPanelClass","focused","_focused","controlType","trigger","_overlayDir","disabled","disableRipple","tabIndex","hideSingleSelectionIndicator","_hideSingleSelectionIndicator","_syncParentProperties","_placeholder","required","_required","hasValidator","disableOptionCentering","fn","_initializeSelection","_value","newValue","hasAssigned","_assignValue","ariaLabelledby","errorStateMatcher","typeaheadDebounceInterval","sortComparator","_id","panelWidth","canSelectNullableOptions","optionSelectionChanges","changes","pipe","onSelectionChange","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","defaultErrorStateMatcher","parentForm","parentFormGroup","valueAccessor","parseInt","ngOnInit","change","subscribe","panelOpen","_getOverlayWidth","detectChanges","ngAfterContentInit","complete","_initKeyManager","event","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","setAttribute","removeAttribute","undefined","ngOnChanges","withTypeAhead","ngOnDestroy","destroy","_clearFromModal","close","open","_canOpen","getConnectedOverlayOrigin","_applyModalPanelOwnership","positionChange","attachOverlay","withHorizontalOrientation","_highlightCorrectOption","markForCheck","Promise","resolve","then","emit","_trackedModal","modal","closest","panelId","_exitAndDetach","_isRtl","_detachOverlay","cleanupEvent","clearTimeout","exitFallbackTimer","listen","animationName","setTimeout","classList","detachOverlay","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","shiftKey","_handleOverlayKeydown","_onFocus","_onBlur","cancelTypeahead","color","_setSelectionByValue","setInactiveStyles","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","error","console","warn","_skipPredicate","preferredOrigin","refToMeasure","elementRef","getBoundingClientRect","width","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","focus","changedOrDestroyed","_onSelect","isUserInput","wasSelected","_propagateChanges","setActiveItem","a","indexOf","fallbackValue","valueToEmit","firstEnabledOptionIndex","get","labelId","getLabelId","labelExpression","_getAriaActiveDescendant","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","MatSelect_Factory","ɵcmp","ɵɵdefineComponent","selectors","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","viewQuery","MatSelect_Query","ɵɵviewQuery","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","MatSelect_blur_HostBindingHandler","toString","inputs","outputs","exportAs","features","ɵɵProvidersFeature","useExisting","ɵɵInputTransformsFeature","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","_r1","ɵɵprojectionDef","MatSelect_Template_div_click_0_listener","ɵɵnamespaceSVG","ɵɵelement","MatSelect_Template_ng_template_detach_10_listener","MatSelect_Template_ng_template_backdropClick_10_listener","MatSelect_Template_ng_template_overlayKeydown_10_listener","fallbackOverlayOrigin_r4","ɵɵreference","dependencies","styles","encapsulation","changeDetection","selector","None","OnPush","host","providers","descendants","transform","MatSelectTrigger","MatSelectTrigger_Factory","ɵdir","ɵɵdefineDirective","MatSelectModule","MatSelectModule_Factory","f"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3,4]}