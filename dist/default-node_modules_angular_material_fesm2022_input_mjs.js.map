{"version":3,"file":"default-node_modules_angular_material_fesm2022_input_mjs.js","mappings":"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","sources":["./node_modules/@angular/cdk/fesm2022/platform.mjs","./node_modules/@angular/cdk/fesm2022/text-field.mjs","./node_modules/@angular/material/fesm2022/input-value-accessor-D1GvPuqO.mjs","./node_modules/@angular/material/fesm2022/input.mjs"],"sourcesContent":["export { P as Platform } from './platform-DmdVEw_C.mjs';\nimport * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nexport { n as normalizePassiveListenerOptions, s as supportsPassiveEventListeners } from './passive-listeners-esHZRgIN.mjs';\nexport { R as RtlScrollAxisType, g as getRtlScrollAxisType, s as supportsScrollBehavior } from './scrolling-BkvA05C8.mjs';\nexport { _ as _getEventTarget, c as _getFocusedElementPierceShadowDom, a as _getShadowRoot, b as _supportsShadowDom } from './shadow-dom-B0oHn41l.mjs';\nexport { _ as _isTestEnvironment } from './test-environment-CT0XxPyp.mjs';\nexport { _ as _bindEventWithOptions } from './backwards-compatibility-DHR38MsD.mjs';\nimport '@angular/common';\n\nclass PlatformModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: PlatformModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: PlatformModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: PlatformModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: PlatformModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    }));\n    return supportedInputTypes;\n}\n\nexport { PlatformModule, getSupportedInputTypes };\n","import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, inject, NgZone, RendererFactory2, Injectable, ElementRef, EventEmitter, Directive, Output, Renderer2, booleanAttribute, Input, NgModule } from '@angular/core';\nimport { EMPTY, Subject } from 'rxjs';\nimport { P as Platform } from './platform-DmdVEw_C.mjs';\nimport { _ as _CdkPrivateStyleLoader } from './style-loader-Cu9AvjH9.mjs';\nimport { _ as _bindEventWithOptions } from './backwards-compatibility-DHR38MsD.mjs';\nimport { a as coerceElement, c as coerceNumberProperty } from './element-x4z00URv.mjs';\nimport { DOCUMENT } from '@angular/common';\nimport { auditTime } from 'rxjs/operators';\n\n/** Component used to load the structural styles of the text field. */\nclass _CdkTextFieldStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: _CdkTextFieldStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.6\", type: _CdkTextFieldStyleLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-text-field-style-loader\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{padding:2px 0 !important;box-sizing:content-box !important;height:auto !important;overflow:hidden !important}textarea.cdk-textarea-autosize-measuring-firefox{padding:2px 0 !important;box-sizing:content-box !important;height:0 !important}@keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: _CdkTextFieldStyleLoader, decorators: [{\n            type: Component,\n            args: [{ template: '', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: { 'cdk-text-field-style-loader': '' }, styles: [\"textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{padding:2px 0 !important;box-sizing:content-box !important;height:auto !important;overflow:hidden !important}textarea.cdk-textarea-autosize-measuring-firefox{padding:2px 0 !important;box-sizing:content-box !important;height:0 !important}@keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}\\n\"] }]\n        }] });\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = { passive: true };\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    _monitoredElements = new Map();\n    constructor() { }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        this._styleLoader.load(_CdkTextFieldStyleLoader);\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const subject = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = (event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => subject.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => subject.next({ target: event.target, isAutofilled: false }));\n            }\n        };\n        const unlisten = this._ngZone.runOutsideAngular(() => {\n            element.classList.add('cdk-text-field-autofill-monitored');\n            return _bindEventWithOptions(this._renderer, element, 'animationstart', listener, listenerOptions);\n        });\n        this._monitoredElements.set(element, { subject, unlisten });\n        return subject;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: AutofillMonitor, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    _elementRef = inject(ElementRef);\n    _autofillMonitor = inject(AutofillMonitor);\n    /** Emits when the autofill state of the element changes. */\n    cdkAutofill = new EventEmitter();\n    constructor() { }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkAutofill, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkAutofill, isStandalone: true, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                }]\n        }], ctorParameters: () => [], propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    _elementRef = inject(ElementRef);\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    _renderer = inject(Renderer2);\n    _resizeEvents = new Subject();\n    /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n    _previousValue;\n    _initialHeight;\n    _destroyed = new Subject();\n    _listenerCleanups;\n    _minRows;\n    _maxRows;\n    _enabled = true;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     */\n    _previousMinRows = -1;\n    _textareaElement;\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    /** Cached height of a textarea with a single row. */\n    _cachedLineHeight;\n    /** Cached height of a textarea with only the placeholder. */\n    _cachedPlaceholderHeight;\n    /** Cached scroll top of a textarea */\n    _cachedScrollTop;\n    /** Used to reference correct document/window */\n    _document = inject(DOCUMENT, { optional: true });\n    _hasFocus;\n    _isViewInited = false;\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_CdkTextFieldStyleLoader);\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                this._listenerCleanups = [\n                    this._renderer.listen('window', 'resize', () => this._resizeEvents.next()),\n                    this._renderer.listen(this._textareaElement, 'focus', this._handleFocusEvent),\n                    this._renderer.listen(this._textareaElement, 'blur', this._handleFocusEvent),\n                ];\n                this._resizeEvents.pipe(auditTime(16)).subscribe(() => {\n                    // Clear the cached heights since the styles can change\n                    // when the window is resized (e.g. by media queries).\n                    this._cachedLineHeight = this._cachedPlaceholderHeight = undefined;\n                    this.resizeToFitContent(true);\n                });\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._listenerCleanups?.forEach(cleanup => cleanup());\n        this._resizeEvents.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        const textareaClone = this._textareaElement.cloneNode(false);\n        const cloneStyles = textareaClone.style;\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        cloneStyles.position = 'absolute';\n        cloneStyles.visibility = 'hidden';\n        cloneStyles.border = 'none';\n        cloneStyles.padding = '0';\n        cloneStyles.height = '';\n        cloneStyles.minHeight = '';\n        cloneStyles.maxHeight = '';\n        // App styles might be messing with the height through the positioning properties.\n        cloneStyles.top = cloneStyles.bottom = cloneStyles.left = cloneStyles.right = 'auto';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        cloneStyles.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    /** Handles `focus` and `blur` events. */\n    _handleFocusEvent = (event) => {\n        this._hasFocus = event.type === 'focus';\n    };\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        this._cachedScrollTop = this._textareaElement.scrollTop;\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n            textarea.scrollTop = this._cachedScrollTop;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkTextareaAutosize, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.6\", type: CdkTextareaAutosize, isStandalone: true, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\", booleanAttribute], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: [{ alias: 'cdkTextareaAutosize', transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }] } });\n\nclass TextFieldModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: TextFieldModule, imports: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: TextFieldModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","import { InjectionToken } from '@angular/core';\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\nexport { MAT_INPUT_VALUE_ACCESSOR as M };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform, getSupportedInputTypes } from '@angular/cdk/platform';\nimport { AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, NgZone, Renderer2, isSignal, effect, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _IdGenerator } from '@angular/cdk/a11y';\nimport { NgControl, Validators, NgForm, FormGroupDirective } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { M as MAT_INPUT_VALUE_ACCESSOR } from './input-value-accessor-D1GvPuqO.mjs';\nimport { h as MAT_FORM_FIELD, k as MatFormFieldControl } from './form-field-DqPi4knt.mjs';\nexport { b as MatError, j as MatFormField, c as MatHint, M as MatLabel, e as MatPrefix, g as MatSuffix } from './form-field-DqPi4knt.mjs';\nimport { E as ErrorStateMatcher } from './error-options-Dm2JJUbF.mjs';\nimport { _ as _ErrorStateTracker } from './error-state-Dtb1IHM-.mjs';\nimport { M as MatFormFieldModule } from './module-BXZhw7pQ.mjs';\nimport { M as MatCommonModule } from './common-module-WayjW0Pb.mjs';\nimport '@angular/cdk/bidi';\nimport '@angular/common';\nimport 'rxjs/operators';\nimport '@angular/cdk/observers/private';\nimport '@angular/cdk/observers';\n\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\n/** Injection token that can be used to provide the default options for the input. */\nconst MAT_INPUT_CONFIG = new InjectionToken('MAT_INPUT_CONFIG');\nclass MatInput {\n    _elementRef = inject(ElementRef);\n    _platform = inject(Platform);\n    ngControl = inject(NgControl, { optional: true, self: true });\n    _autofillMonitor = inject(AutofillMonitor);\n    _ngZone = inject(NgZone);\n    _formField = inject(MAT_FORM_FIELD, { optional: true });\n    _renderer = inject(Renderer2);\n    _uid = inject(_IdGenerator).getId('mat-input-');\n    _previousNativeValue;\n    _inputValueAccessor;\n    _signalBasedValueAccessor;\n    _previousPlaceholder;\n    _errorStateTracker;\n    _config = inject(MAT_INPUT_CONFIG, { optional: true });\n    _cleanupIosKeyup;\n    _cleanupWebkitWheel;\n    /** `aria-describedby` IDs assigned by the form field. */\n    _formFieldDescribedBy;\n    /** Whether the component is being rendered on the server. */\n    _isServer;\n    /** Whether the component is a native html select. */\n    _isNativeSelect;\n    /** Whether the component is a textarea. */\n    _isTextarea;\n    /** Whether the input is inside of a form field. */\n    _isInFormField;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    autofilled = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    _disabled = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    _id;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    placeholder;\n    /**\n     * Name of the input.\n     * @docs-private\n     */\n    name;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    _required;\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        const prevType = this._type;\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n        if (this._type !== prevType) {\n            this._ensureWheelDefaultBehavior();\n        }\n    }\n    _type = 'text';\n    /** An object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    userAriaDescribedBy;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._signalBasedValueAccessor\n            ? this._signalBasedValueAccessor.value()\n            : this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            if (this._signalBasedValueAccessor) {\n                this._signalBasedValueAccessor.value.set(value);\n            }\n            else {\n                this._inputValueAccessor.value = value;\n            }\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    _readonly = false;\n    /** Whether the input should remain interactive when it is disabled. */\n    disabledInteractive;\n    /** Whether the input is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week',\n    ].filter(t => getSupportedInputTypes().has(t));\n    constructor() {\n        const parentForm = inject(NgForm, { optional: true });\n        const parentFormGroup = inject(FormGroupDirective, { optional: true });\n        const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n        const accessor = inject(MAT_INPUT_VALUE_ACCESSOR, { optional: true, self: true });\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        if (accessor) {\n            if (isSignal(accessor.value)) {\n                this._signalBasedValueAccessor = accessor;\n            }\n            else {\n                this._inputValueAccessor = accessor;\n            }\n        }\n        else {\n            // If no input value accessor was explicitly specified, use the element as the input value\n            // accessor.\n            this._inputValueAccessor = element;\n        }\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (this._platform.IOS) {\n            this._ngZone.runOutsideAngular(() => {\n                this._cleanupIosKeyup = this._renderer.listen(element, 'keyup', this._iOSKeyupListener);\n            });\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, this.ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!this._formField;\n        this.disabledInteractive = this._config?.disabledInteractive || false;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n        if (this._signalBasedValueAccessor) {\n            effect(() => {\n                // Read the value so the effect can register the dependency.\n                this._signalBasedValueAccessor.value();\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        this._cleanupIosKeyup?.();\n        this._cleanupWebkitWheel?.();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            // Since the input isn't a `ControlValueAccessor`, we don't have a good way of knowing when\n            // the disabled state has changed. We can't use the `ngControl.statusChanges`, because it\n            // won't fire if the input is disabled with `emitEvents = false`, despite the input becoming\n            // disabled.\n            if (this.ngControl.disabled !== null && this.ngControl.disabled !== this.disabled) {\n                this.disabled = this.ngControl.disabled;\n                this.stateChanges.next();\n            }\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Refreshes the error state of the input. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused === this.focused) {\n            return;\n        }\n        if (!this._isNativeSelect && isFocused && this.disabled && this.disabledInteractive) {\n            const element = this._elementRef.nativeElement;\n            // Focusing an input that has text will cause all the text to be selected. Clear it since\n            // the user won't be able to change it. This is based on the internal implementation.\n            if (element.type === 'number') {\n                // setSelectionRange doesn't work on number inputs so it needs to be set briefly to text.\n                element.type = 'text';\n                element.setSelectionRange(0, 0);\n                element.type = 'number';\n            }\n            else {\n                element.setSelectionRange(0, 0);\n            }\n        }\n        this.focused = isFocused;\n        this.stateChanges.next();\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        const placeholder = this._getPlaceholder();\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Gets the current placeholder of the form field. */\n    _getPlaceholder() {\n        return this.placeholder || null;\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return (this.focused && !this.disabled) || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        const element = this._elementRef.nativeElement;\n        const existingDescribedBy = element.getAttribute('aria-describedby');\n        let toAssign;\n        // In some cases there might be some `aria-describedby` IDs that were assigned directly,\n        // like by the `AriaDescriber` (see #30011). Attempt to preserve them by taking the previous\n        // attribute value and filtering out the IDs that came from the previous `setDescribedByIds`\n        // call. Note the `|| ids` here allows us to avoid duplicating IDs on the first render.\n        if (existingDescribedBy) {\n            const exclude = this._formFieldDescribedBy || ids;\n            toAssign = ids.concat(existingDescribedBy.split(' ').filter(id => id && !exclude.includes(id)));\n        }\n        else {\n            toAssign = ids;\n        }\n        this._formFieldDescribedBy = ids;\n        if (toAssign.length) {\n            element.setAttribute('aria-describedby', toAssign.join(' '));\n        }\n        else {\n            element.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n    _iOSKeyupListener = (event) => {\n        const el = event.target;\n        // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n        // indicate different things. If the value is 0, it means that the caret is at the start\n        // of the input, whereas a value of `null` means that the input doesn't support\n        // manipulating the selection range. Inputs that don't support setting the selection range\n        // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n        // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n        if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n        }\n    };\n    _webkitBlinkWheelListener = () => {\n        // This is a noop function and is used to enable mouse wheel input\n        // on number inputs\n        // on blink and webkit browsers.\n    };\n    /**\n     * In blink and webkit browsers a focused number input does not increment or decrement its value\n     * on mouse wheel interaction unless a wheel event listener is attached to it or one of its\n     * ancestors or a passive wheel listener is attached somewhere in the DOM. For example: Hitting\n     * a tooltip once enables the mouse wheel input for all number inputs as long as it exists. In\n     * order to get reliable and intuitive behavior we apply a wheel event on our own thus making\n     * sure increment and decrement by mouse wheel works every time.\n     * @docs-private\n     */\n    _ensureWheelDefaultBehavior() {\n        this._cleanupWebkitWheel?.();\n        if (this._type === 'number' && (this._platform.BLINK || this._platform.WEBKIT)) {\n            this._cleanupWebkitWheel = this._renderer.listen(this._elementRef.nativeElement, 'wheel', this._webkitBlinkWheelListener);\n        }\n    }\n    /** Gets the value to set on the `readonly` attribute. */\n    _getReadonlyAttribute() {\n        if (this._isNativeSelect) {\n            return null;\n        }\n        if (this.readonly || (this.disabled && this.disabledInteractive)) {\n            return 'true';\n        }\n        return null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatInput, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.6\", type: MatInput, isStandalone: true, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\", disabledInteractive: [\"disabledInteractive\", \"disabledInteractive\", booleanAttribute] }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"class.mat-mdc-form-field-textarea-control\": \"_isInFormField && _isTextarea\", \"class.mat-mdc-form-field-input-control\": \"_isInFormField\", \"class.mat-mdc-input-disabled-interactive\": \"disabledInteractive\", \"class.mdc-text-field__input\": \"_isInFormField\", \"class.mat-mdc-native-select-inline\": \"_isInlineSelect()\", \"id\": \"id\", \"disabled\": \"disabled && !disabledInteractive\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"_getReadonlyAttribute()\", \"attr.aria-disabled\": \"disabled && disabledInteractive ? \\\"true\\\" : null\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\", \"attr.id\": \"id\" }, classAttribute: \"mat-mdc-input-element\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        'class': 'mat-mdc-input-element',\n                        // The BaseMatInput parent class adds `mat-input-element`, `mat-form-field-control` and\n                        // `mat-form-field-autofill-control` to the CSS class list, but this should not be added for\n                        // this MDC equivalent input.\n                        '[class.mat-input-server]': '_isServer',\n                        '[class.mat-mdc-form-field-textarea-control]': '_isInFormField && _isTextarea',\n                        '[class.mat-mdc-form-field-input-control]': '_isInFormField',\n                        '[class.mat-mdc-input-disabled-interactive]': 'disabledInteractive',\n                        '[class.mdc-text-field__input]': '_isInFormField',\n                        '[class.mat-mdc-native-select-inline]': '_isInlineSelect()',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[id]': 'id',\n                        '[disabled]': 'disabled && !disabledInteractive',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': '_getReadonlyAttribute()',\n                        '[attr.aria-disabled]': 'disabled && disabledInteractive ? \"true\" : null',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], disabledInteractive: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\nclass MatInputModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatInput], exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatFormFieldModule, TextFieldModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatFormFieldModule, MatInput],\n                    exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule],\n                }]\n        }] });\n\nexport { MAT_INPUT_CONFIG, MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n"],"names":["P","Platform","i0","NgModule","n","normalizePassiveListenerOptions","s","supportsPassiveEventListeners","R","RtlScrollAxisType","g","getRtlScrollAxisType","supportsScrollBehavior","_","_getEventTarget","c","_getFocusedElementPierceShadowDom","a","_getShadowRoot","b","_supportsShadowDom","_isTestEnvironment","_bindEventWithOptions","PlatformModule","ɵfac","PlatformModule_Factory","__ngFactoryType__","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","ngDevMode","ɵsetClassMetadata","args","supportedInputTypes","candidateInputTypes","getSupportedInputTypes","document","Set","featureTestInput","createElement","filter","value","setAttribute","Component","ChangeDetectionStrategy","ViewEncapsulation","inject","NgZone","RendererFactory2","Injectable","ElementRef","EventEmitter","Directive","Output","Renderer2","booleanAttribute","Input","EMPTY","Subject","_CdkPrivateStyleLoader","coerceElement","coerceNumberProperty","DOCUMENT","auditTime","_CdkTextFieldStyleLoader","_CdkTextFieldStyleLoader_Factory","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","decls","vars","template","_CdkTextFieldStyleLoader_Template","rf","ctx","styles","encapsulation","changeDetection","OnPush","None","host","listenerOptions","passive","AutofillMonitor","_platform","_ngZone","_renderer","createRenderer","_styleLoader","_monitoredElements","Map","constructor","monitor","elementOrRef","isBrowser","load","element","info","get","subject","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","unlisten","runOutsideAngular","set","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","AutofillMonitor_Factory","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","ngOnInit","subscribe","emit","CdkAutofill_Factory","ɵdir","ɵɵdefineDirective","outputs","selector","CdkTextareaAutosize","_resizeEvents","_previousValue","_initialHeight","_destroyed","_listenerCleanups","_minRows","_maxRows","_enabled","_previousMinRows","_textareaElement","minRows","_setMinHeight","maxRows","_setMaxHeight","enabled","resizeToFitContent","reset","placeholder","_cachedPlaceholderHeight","undefined","removeAttribute","_cacheTextareaPlaceholderHeight","_cachedLineHeight","_cachedScrollTop","_document","optional","_hasFocus","_isViewInited","styleLoader","nativeElement","minHeight","style","maxHeight","ngAfterViewInit","height","listen","_handleFocusEvent","pipe","cleanup","_cacheTextareaLineHeight","textareaClone","cloneNode","cloneStyles","rows","position","visibility","border","padding","top","bottom","left","right","overflow","parentNode","appendChild","clientHeight","_measureScrollHeight","previousMargin","marginBottom","isFirefox","FIREFOX","needsMarginFiller","measuringClass","scrollHeight","ngDoCheck","force","scrollTop","textarea","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","_noopInputHandler","selectionStart","selectionEnd","isStopped","setSelectionRange","CdkTextareaAutosize_Factory","hostBindings","CdkTextareaAutosize_HostBindings","ɵɵlistener","CdkTextareaAutosize_input_HostBindingHandler","inputs","exportAs","features","ɵɵInputTransformsFeature","alias","transform","TextFieldModule","TextFieldModule_Factory","imports","exports","InjectionToken","MAT_INPUT_VALUE_ACCESSOR","M","coerceBooleanProperty","isSignal","effect","_IdGenerator","NgControl","Validators","NgForm","FormGroupDirective","h","MAT_FORM_FIELD","k","MatFormFieldControl","MatError","j","MatFormField","MatHint","MatLabel","e","MatPrefix","MatSuffix","E","ErrorStateMatcher","_ErrorStateTracker","MatFormFieldModule","MatCommonModule","getMatInputUnsupportedTypeError","Error","MAT_INPUT_INVALID_TYPES","MAT_INPUT_CONFIG","MatInput","ngControl","self","_formField","_uid","getId","_previousNativeValue","_inputValueAccessor","_signalBasedValueAccessor","_previousPlaceholder","_errorStateTracker","_config","_cleanupIosKeyup","_cleanupWebkitWheel","_formFieldDescribedBy","_isServer","_isNativeSelect","_isTextarea","_isInFormField","focused","stateChanges","controlType","autofilled","disabled","_disabled","id","_id","name","required","_required","control","hasValidator","_type","prevType","_validateType","has","_ensureWheelDefaultBehavior","errorStateMatcher","matcher","userAriaDescribedBy","readonly","_readonly","disabledInteractive","errorState","_neverEmptyInputTypes","t","parentForm","parentFormGroup","defaultErrorStateMatcher","accessor","nodeName","toLowerCase","IOS","_iOSKeyupListener","multiple","ngOnChanges","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","_onInput","newValue","_getPlaceholder","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","existingDescribedBy","getAttribute","toAssign","exclude","concat","split","includes","length","join","onContainerClick","_isInlineSelect","size","el","_webkitBlinkWheelListener","BLINK","WEBKIT","_getReadonlyAttribute","MatInput_Factory","hostVars","MatInput_HostBindings","MatInput_focus_HostBindingHandler","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","ɵɵProvidersFeature","provide","useExisting","ɵɵNgOnChangesFeature","providers","MatInputModule","MatInputModule_Factory"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3]}