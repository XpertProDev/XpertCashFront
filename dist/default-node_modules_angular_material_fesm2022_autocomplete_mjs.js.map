{"version":3,"file":"default-node_modules_angular_material_fesm2022_autocomplete_mjs.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2022/autocomplete.mjs"],"sourcesContent":["import { c as MAT_OPTION_PARENT_COMPONENT, M as MatOption, d as MAT_OPTGROUP, e as MatOptionSelectionChange, _ as _countGroupLabelsBeforeOption, b as _getOptionScrollPosition } from './option-ChV6uQgD.mjs';\nexport { a as MatOptgroup } from './option-ChV6uQgD.mjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, ElementRef, ANIMATION_MODULE_TYPE, EventEmitter, booleanAttribute, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, ContentChildren, Input, Output, Directive, forwardRef, EnvironmentInjector, ViewContainerRef, NgZone, Renderer2, afterNextRender, NgModule } from '@angular/core';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { _IdGenerator, ActiveDescendantKeyManager, removeAriaReferencedId, addAriaReferencedId } from '@angular/cdk/a11y';\nimport { Platform, _getFocusedElementPierceShadowDom, _getEventTarget } from '@angular/cdk/platform';\nimport { Subscription, Subject, merge, of, defer, Observable } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { hasModifierKey, ESCAPE, ENTER, TAB, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { filter, map, startWith, switchMap, tap, delay, take } from 'rxjs/operators';\nimport { h as MAT_FORM_FIELD } from './form-field-DqPi4knt.mjs';\nimport { M as MatOptionModule } from './index-DOxJc1m4.mjs';\nimport { M as MatCommonModule } from './common-module-WayjW0Pb.mjs';\nimport './ripple-BT3tzh6F.mjs';\nimport '@angular/cdk/coercion';\nimport '@angular/cdk/private';\nimport './pseudo-checkbox-CJ7seqQH.mjs';\nimport './structural-styles-BQUT6wsL.mjs';\nimport '@angular/common';\nimport '@angular/cdk/observers/private';\nimport './index-SYVYjXwK.mjs';\nimport './pseudo-checkbox-module-CAX2sutq.mjs';\n\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    source;\n    option;\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        autoActiveFirstOption: false,\n        autoSelectActiveOption: false,\n        hideSingleSelectionIndicator: false,\n        requireSelection: false,\n        hasBackdrop: false,\n    };\n}\n/** Autocomplete component. */\nclass MatAutocomplete {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _defaults = inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS);\n    _animationsDisabled = inject(ANIMATION_MODULE_TYPE, { optional: true }) === 'NoopAnimations';\n    _activeOptionChanges = Subscription.EMPTY;\n    /** Manages active item in option list based on key events. */\n    _keyManager;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel = false;\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n        return this._isOpen && this.showPanel;\n    }\n    _isOpen = false;\n    /** Latest trigger that opened the autocomplete. */\n    _latestOpeningTrigger;\n    /** @docs-private Sets the theme color of the panel. */\n    _setColor(value) {\n        this._color = value;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** @docs-private theme color of the panel */\n    _color;\n    // The @ViewChild query for TemplateRef here needs to be static because some code paths\n    // lead to the overlay being created before change detection has finished for this component.\n    // Notably, another component may trigger `focus` on the autocomplete-trigger.\n    /** @docs-private */\n    template;\n    /** Element for the panel containing the autocomplete options. */\n    panel;\n    /** Reference to all options within the autocomplete. */\n    options;\n    /** Reference to all option groups within the autocomplete. */\n    optionGroups;\n    /** Aria label of the autocomplete. */\n    ariaLabel;\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    displayWith = null;\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    autoActiveFirstOption;\n    /** Whether the active option should be selected as the user is navigating. */\n    autoSelectActiveOption;\n    /**\n     * Whether the user is required to make a selection when they're interacting with the\n     * autocomplete. If the user moves away from the autocomplete without selecting an option from\n     * the list, the value will be reset. If the user opens the panel and closes it without\n     * interacting or selecting a value, the initial value will be kept.\n     */\n    requireSelection;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    panelWidth;\n    /** Whether ripples are disabled within the autocomplete panel. */\n    disableRipple;\n    /** Event that is emitted whenever an option from the list is selected. */\n    optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n    opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n    closed = new EventEmitter();\n    /** Emits whenever an option is activated. */\n    optionActivated = new EventEmitter();\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        this._classList = value;\n        this._elementRef.nativeElement.className = '';\n    }\n    _classList;\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    _hideSingleSelectionIndicator;\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id = inject(_IdGenerator).getId('mat-autocomplete-');\n    /**\n     * Tells any descendant `mat-optgroup` to use the inert a11y pattern.\n     * @docs-private\n     */\n    inertGroups;\n    constructor() {\n        const platform = inject(Platform);\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = platform?.SAFARI || false;\n        this.autoActiveFirstOption = !!this._defaults.autoActiveFirstOption;\n        this.autoSelectActiveOption = !!this._defaults.autoSelectActiveOption;\n        this.requireSelection = !!this._defaults.requireSelection;\n        this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withWrap()\n            .skipPredicate(this._skipPredicate);\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options?.length;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate() {\n        return false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatAutocomplete, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"19.2.6\", type: MatAutocomplete, isStandalone: true, selector: \"mat-autocomplete\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: [\"autoActiveFirstOption\", \"autoActiveFirstOption\", booleanAttribute], autoSelectActiveOption: [\"autoSelectActiveOption\", \"autoSelectActiveOption\", booleanAttribute], requireSelection: [\"requireSelection\", \"requireSelection\", booleanAttribute], panelWidth: \"panelWidth\", disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], classList: [\"class\", \"classList\"], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, host: { classAttribute: \"mat-mdc-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], exportAs: [\"matAutocomplete\"], ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [class]=\\\"_classList\\\"\\n    [class.mat-mdc-autocomplete-visible]=\\\"showPanel\\\"\\n    [class.mat-mdc-autocomplete-hidden]=\\\"!showPanel\\\"\\n    [class.mat-autocomplete-panel-animations-enabled]=\\\"!_animationsDisabled\\\"\\n    [class.mat-primary]=\\\"_color === 'primary'\\\"\\n    [class.mat-accent]=\\\"_color === 'accent'\\\"\\n    [class.mat-warn]=\\\"_color === 'warn'\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;box-sizing:border-box;position:relative;border-radius:var(--mat-autocomplete-container-shape, var(--mat-sys-corner-extra-small));box-shadow:var(--mat-autocomplete-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));background-color:var(--mat-autocomplete-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-autocomplete-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden;pointer-events:none}@keyframes _mat-autocomplete-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}.mat-autocomplete-panel-animations-enabled{animation:_mat-autocomplete-enter 120ms cubic-bezier(0, 0, 0.2, 1)}mat-autocomplete{display:none}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatAutocomplete, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', host: {\n                        'class': 'mat-mdc-autocomplete',\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [class]=\\\"_classList\\\"\\n    [class.mat-mdc-autocomplete-visible]=\\\"showPanel\\\"\\n    [class.mat-mdc-autocomplete-hidden]=\\\"!showPanel\\\"\\n    [class.mat-autocomplete-panel-animations-enabled]=\\\"!_animationsDisabled\\\"\\n    [class.mat-primary]=\\\"_color === 'primary'\\\"\\n    [class.mat-accent]=\\\"_color === 'accent'\\\"\\n    [class.mat-warn]=\\\"_color === 'warn'\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;box-sizing:border-box;position:relative;border-radius:var(--mat-autocomplete-container-shape, var(--mat-sys-corner-extra-small));box-shadow:var(--mat-autocomplete-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));background-color:var(--mat-autocomplete-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-autocomplete-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden;pointer-events:none}@keyframes _mat-autocomplete-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}.mat-autocomplete-panel-animations-enabled{animation:_mat-autocomplete-enter 120ms cubic-bezier(0, 0, 0.2, 1)}mat-autocomplete{display:none}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { template: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], displayWith: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], autoSelectActiveOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], requireSelection: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], panelWidth: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], optionSelected: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], optionActivated: [{\n                type: Output\n            }], classList: [{\n                type: Input,\n                args: ['class']\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    elementRef = inject(ElementRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatAutocompleteOrigin, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: MatAutocompleteOrigin, isStandalone: true, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matAutocompleteOrigin]',\n                    exportAs: 'matAutocompleteOrigin',\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true,\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass MatAutocompleteTrigger {\n    _environmentInjector = inject(EnvironmentInjector);\n    _element = inject(ElementRef);\n    _overlay = inject(Overlay);\n    _viewContainerRef = inject(ViewContainerRef);\n    _zone = inject(NgZone);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dir = inject(Directionality, { optional: true });\n    _formField = inject(MAT_FORM_FIELD, { optional: true, host: true });\n    _viewportRuler = inject(ViewportRuler);\n    _scrollStrategy = inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY);\n    _renderer = inject(Renderer2);\n    _defaults = inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, { optional: true });\n    _overlayRef;\n    _portal;\n    _componentDestroyed = false;\n    _initialized = new Subject();\n    _keydownSubscription;\n    _outsideClickSubscription;\n    _cleanupWindowBlur;\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    _previousValue;\n    /** Value of the input element when the panel was attached (even if there are no options). */\n    _valueOnAttach;\n    /** Value on the previous keydown event. */\n    _valueOnLastKeydown;\n    /** Strategy that is used to position the panel. */\n    _positionStrategy;\n    /** Whether or not the label state is being overridden. */\n    _manuallyFloatingLabel = false;\n    /** The subscription for closing actions (some are bound to document). */\n    _closingActionsSubscription;\n    /** Subscription to viewport size changes. */\n    _viewportSubscription = Subscription.EMPTY;\n    /** Implements BreakpointObserver to be used to detect handset landscape */\n    _breakpointObserver = inject(BreakpointObserver);\n    _handsetLandscapeSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    _canOpenOnNextFocus = true;\n    /** Value inside the input before we auto-selected an option. */\n    _valueBeforeAutoSelection;\n    /**\n     * Current option that we have auto-selected as the user is navigating,\n     * but which hasn't been propagated to the model value yet.\n     */\n    _pendingAutoselectedOption;\n    /** Stream of keyboard events that can close the panel. */\n    _closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    _windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this._canOpenOnNextFocus = this.panelOpen || !this._hasFocus();\n    };\n    /** `View -> model callback called when value changes` */\n    _onChange = () => { };\n    /** `View -> model callback called when autocomplete has been touched` */\n    _onTouched = () => { };\n    /** The autocomplete panel to be attached to this trigger. */\n    autocomplete;\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n    position = 'auto';\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    connectedTo;\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    autocompleteAttribute = 'off';\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    autocompleteDisabled;\n    constructor() { }\n    /** Class to apply to the panel when it's above the input. */\n    _aboveClass = 'mat-mdc-autocomplete-panel-above';\n    ngAfterViewInit() {\n        this._initialized.next();\n        this._initialized.complete();\n        this._cleanupWindowBlur = this._renderer.listen('window', 'blur', this._windowBlurHandler);\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._cleanupWindowBlur?.();\n        this._handsetLandscapeSubscription.unsubscribe();\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n        this._clearFromModal();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    _overlayAttached = false;\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._openPanelInternal();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            // `afterNextRender` always runs outside of the Angular zone, so all the subscriptions from\n            // `_subscribeToClosingActions()` are also outside of the Angular zone.\n            // We should manually run in Angular zone to update UI after panel closing.\n            this._zone.run(() => {\n                this.autocomplete.closed.emit();\n            });\n        }\n        // Only reset if this trigger is the latest one that opened the\n        // autocomplete since another may have taken it over.\n        if (this.autocomplete._latestOpeningTrigger === this) {\n            this.autocomplete._isOpen = false;\n            this.autocomplete._latestOpeningTrigger = null;\n        }\n        this._overlayAttached = false;\n        this._pendingAutoselectedOption = null;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        this._updatePanelState();\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n        // Remove aria-owns attribute when the autocomplete is no longer visible.\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', this.autocomplete.id);\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\n            : of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /** Stream of changes to the selection state of the autocomplete options. */\n    optionSelections = defer(() => {\n        const options = this.autocomplete ? this.autocomplete.options : null;\n        if (options) {\n            return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n        }\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this._initialized.pipe(switchMap(() => this.optionSelections));\n    });\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return new Observable(observer => {\n            const listener = (event) => {\n                // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n                // fall back to check the first element in the path of the click event.\n                const clickTarget = _getEventTarget(event);\n                const formField = this._formField\n                    ? this._formField.getConnectedOverlayOrigin().nativeElement\n                    : null;\n                const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n                if (this._overlayAttached &&\n                    clickTarget !== this._element.nativeElement &&\n                    // Normally focus moves inside `mousedown` so this condition will almost always be\n                    // true. Its main purpose is to handle the case where the input is focused from an\n                    // outside click which propagates up to the `body` listener within the same sequence\n                    // and causes the panel to close immediately (see #3106).\n                    !this._hasFocus() &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                    !!this._overlayRef &&\n                    !this._overlayRef.overlayElement.contains(clickTarget)) {\n                    observer.next(event);\n                }\n            };\n            const cleanups = [\n                this._renderer.listen('document', 'click', listener),\n                this._renderer.listen('document', 'auxclick', listener),\n                this._renderer.listen('document', 'touchend', listener),\n            ];\n            return () => {\n                cleanups.forEach(current => current());\n            };\n        });\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._assignOptionValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const hasModifier = hasModifierKey(event);\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifier) {\n            event.preventDefault();\n        }\n        this._valueOnLastKeydown = this._element.nativeElement.value;\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this._openPanelInternal(this._valueOnLastKeydown);\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n                if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n                    if (!this._pendingAutoselectedOption) {\n                        this._valueBeforeAutoSelection = this._valueOnLastKeydown;\n                    }\n                    this._pendingAutoselectedOption = this.activeOption;\n                    this._assignOptionValue(this.activeOption.value);\n                }\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._pendingAutoselectedOption = null;\n            // If selection is required we don't write to the CVA while the user is typing.\n            // At the end of the selection either the user will have picked something\n            // or we'll reset the value back to null.\n            if (!this.autocomplete || !this.autocomplete.requireSelection) {\n                this._onChange(value);\n            }\n            if (!value) {\n                this._clearPreviousSelectedOption(null, false);\n            }\n            else if (this.panelOpen && !this.autocomplete.requireSelection) {\n                // Note that we don't reset this when `requireSelection` is enabled,\n                // because the option will be reset when the panel is closed.\n                const selectedOption = this.autocomplete.options?.find(option => option.selected);\n                if (selectedOption) {\n                    const display = this._getDisplayValue(selectedOption.value);\n                    if (value !== display) {\n                        selectedOption.deselect(false);\n                    }\n                }\n            }\n            if (this._canOpen() && this._hasFocus()) {\n                // When the `input` event fires, the input's value will have already changed. This means\n                // that if we take the `this._element.nativeElement.value` directly, it'll be one keystroke\n                // behind. This can be a problem when the user selects a value, changes a character while\n                // the input still has focus and then clicks away (see #28432). To work around it, we\n                // capture the value in `keydown` so we can use it here.\n                const valueOnAttach = this._valueOnLastKeydown ?? this._element.nativeElement.value;\n                this._valueOnLastKeydown = null;\n                this._openPanelInternal(valueOnAttach);\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay(this._previousValue);\n            this._floatLabel(true);\n        }\n    }\n    _handleClick() {\n        if (this._canOpen() && !this.panelOpen) {\n            this._openPanelInternal();\n        }\n    }\n    /** Whether the input currently has focus. */\n    _hasFocus() {\n        return _getFocusedElementPierceShadowDom() === this._element.nativeElement;\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            if (this._formField) {\n                this._formField.floatLabel = 'auto';\n            }\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const initialRender = new Observable(subscriber => {\n            afterNextRender(() => {\n                subscriber.next();\n            }, { injector: this._environmentInjector });\n        });\n        const optionChanges = this.autocomplete.options?.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0)) ?? of();\n        // When the options are initially rendered, and when the option list changes...\n        return (merge(initialRender, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => this._zone.run(() => {\n            // `afterNextRender` always runs outside of the Angular zone, thus we have to re-enter\n            // the Angular zone. This will lead to change detection being called outside of the Angular\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this._updatePanelState();\n            this._changeDetectorRef.detectChanges();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n            if (wasOpen !== this.panelOpen) {\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n                // `closed` event, because we may not have emitted it. This can happen\n                // - if the users opens the panel and there are no options, but the\n                //   options come in slightly later or as a result of the value changing,\n                // - if the panel is closed after the user entered a string that did not match any\n                //   of the available options,\n                // - if a valid string is entered after an invalid one.\n                if (this.panelOpen) {\n                    this._emitOpened();\n                }\n                else {\n                    this.autocomplete.closed.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event)));\n    }\n    /**\n     * Emits the opened event once it's known that the panel will be shown and stores\n     * the state of the trigger right before the opening sequence was finished.\n     */\n    _emitOpened() {\n        this.autocomplete.opened.emit();\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /** Given a value, returns the string that should be shown within the input. */\n    _getDisplayValue(value) {\n        const autocomplete = this.autocomplete;\n        return autocomplete && autocomplete.displayWith ? autocomplete.displayWith(value) : value;\n    }\n    _assignOptionValue(value) {\n        const toDisplay = this._getDisplayValue(value);\n        if (value == null) {\n            this._clearPreviousSelectedOption(null, false);\n        }\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n    }\n    _updateNativeInputValue(value) {\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = value;\n        }\n        else {\n            this._element.nativeElement.value = value;\n        }\n        this._previousValue = value;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        const panel = this.autocomplete;\n        const toSelect = event ? event.source : this._pendingAutoselectedOption;\n        if (toSelect) {\n            this._clearPreviousSelectedOption(toSelect);\n            this._assignOptionValue(toSelect.value);\n            // TODO(crisbeto): this should wait until the animation is done, otherwise the value\n            // gets reset while the panel is still animating which looks glitchy. It'll likely break\n            // some tests to change it at this point.\n            this._onChange(toSelect.value);\n            panel._emitSelectEvent(toSelect);\n            this._element.nativeElement.focus();\n        }\n        else if (panel.requireSelection &&\n            this._element.nativeElement.value !== this._valueOnAttach) {\n            this._clearPreviousSelectedOption(null);\n            this._assignOptionValue(null);\n            this._onChange(null);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip, emitEvent) {\n        // Null checks are necessary here, because the autocomplete\n        // or its options may not have been assigned yet.\n        this.autocomplete?.options?.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect(emitEvent);\n            }\n        });\n    }\n    _openPanelInternal(valueOnAttach = this._element.nativeElement.value) {\n        this._attachOverlay(valueOnAttach);\n        this._floatLabel();\n        // Add aria-owns attribute when the autocomplete becomes visible.\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            addAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n    }\n    _attachOverlay(valueOnAttach) {\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n                id: this._formField?.getLabelId(),\n            });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n            // Subscribe to the breakpoint events stream to detect when screen is in\n            // handsetLandscape.\n            this._handsetLandscapeSubscription = this._breakpointObserver\n                .observe(Breakpoints.HandsetLandscape)\n                .subscribe(result => {\n                const isHandsetLandscape = result.matches;\n                // Check if result.matches Breakpoints.HandsetLandscape. Apply HandsetLandscape\n                // settings to prevent overlay cutoff in that breakpoint. Fixes b/284148377\n                if (isHandsetLandscape) {\n                    this._positionStrategy\n                        .withFlexibleDimensions(true)\n                        .withGrowAfterOpen(true)\n                        .withViewportMargin(8);\n                }\n                else {\n                    this._positionStrategy\n                        .withFlexibleDimensions(false)\n                        .withGrowAfterOpen(false)\n                        .withViewportMargin(0);\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._valueOnAttach = valueOnAttach;\n            this._valueOnLastKeydown = null;\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        this.autocomplete._latestOpeningTrigger = this;\n        this.autocomplete._setColor(this._formField?.color);\n        this._updatePanelState();\n        this._applyModalPanelOwnership();\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this._emitOpened();\n        }\n    }\n    /** Handles keyboard events coming from the overlay panel. */\n    _handlePanelKeydown = (event) => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n            (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n            // If the user had typed something in before we autoselected an option, and they decided\n            // to cancel the selection, restore the input value to the one they had typed in.\n            if (this._pendingAutoselectedOption) {\n                this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n                this._pendingAutoselectedOption = null;\n            }\n            this._closeKeyEventStream.next();\n            this._resetActiveItem();\n            // We need to stop propagation, otherwise the event will eventually\n            // reach the input itself and cause the overlay to be reopened.\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    };\n    /** Updates the panel's visibility state and any trigger state tied to id. */\n    _updatePanelState() {\n        this.autocomplete._setVisibility();\n        // Note that here we subscribe and unsubscribe based on the panel's visiblity state,\n        // because the act of subscribing will prevent events from reaching other overlays and\n        // we don't want to block the events if there are no options.\n        if (this.panelOpen) {\n            const overlayRef = this._overlayRef;\n            if (!this._keydownSubscription) {\n                // Use the `keydownEvents` in order to take advantage of\n                // the overlay event targeting provided by the CDK overlay.\n                this._keydownSubscription = overlayRef.keydownEvents().subscribe(this._handlePanelKeydown);\n            }\n            if (!this._outsideClickSubscription) {\n                // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n                // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n                // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n                this._outsideClickSubscription = overlayRef.outsidePointerEvents().subscribe();\n            }\n        }\n        else {\n            this._keydownSubscription?.unsubscribe();\n            this._outsideClickSubscription?.unsubscribe();\n            this._keydownSubscription = this._outsideClickSubscription = null;\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir ?? undefined,\n            hasBackdrop: this._defaults?.hasBackdrop,\n            backdropClass: this._defaults?.backdropClass,\n            panelClass: this._defaults?.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        // Set default Overlay Position\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n     * option.\n     *\n     * If the consumer opted-in to automatically activatating the first option, activate the first\n     * *enabled* option.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n            // because it activates the first option that passes the skip predicate, rather than the\n            // first *enabled* option.\n            let firstEnabledOptionIndex = -1;\n            for (let index = 0; index < autocomplete.options.length; index++) {\n                const option = autocomplete.options.get(index);\n                if (!option.disabled) {\n                    firstEnabledOptionIndex = index;\n                    break;\n                }\n            }\n            autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this.autocompleteDisabled;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n    _trackedModal = null;\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = this.autocomplete.id;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the references to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n            this._trackedModal = null;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatAutocompleteTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.6\", type: MatAutocompleteTrigger, isStandalone: true, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\", booleanAttribute] }, host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-controls\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-mdc-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                    host: {\n                        'class': 'mat-mdc-autocomplete-trigger',\n                        '[attr.autocomplete]': 'autocompleteAttribute',\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                        '[attr.aria-controls]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\n                        '(focusin)': '_handleFocus()',\n                        '(blur)': '_onTouched()',\n                        '(input)': '_handleInput($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    exportAs: 'matAutocompleteTrigger',\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\n                }]\n        }], ctorParameters: () => [], propDecorators: { autocomplete: [{\n                type: Input,\n                args: ['matAutocomplete']\n            }], position: [{\n                type: Input,\n                args: ['matAutocompletePosition']\n            }], connectedTo: [{\n                type: Input,\n                args: ['matAutocompleteConnectedTo']\n            }], autocompleteAttribute: [{\n                type: Input,\n                args: ['autocomplete']\n            }], autocompleteDisabled: [{\n                type: Input,\n                args: [{ alias: 'matAutocompleteDisabled', transform: booleanAttribute }]\n            }] } });\n\nclass MatAutocompleteModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: MatAutocompleteModule, imports: [OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocomplete,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin], exports: [CdkScrollableModule,\n            MatAutocomplete,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule,\n            MatOptionModule,\n            MatCommonModule, CdkScrollableModule,\n            MatOptionModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        OverlayModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocomplete,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatAutocomplete,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, MatOption, getMatAutocompleteMissingPanelError };\n"],"names":["c","MAT_OPTION_PARENT_COMPONENT","M","MatOption","d","MAT_OPTGROUP","e","MatOptionSelectionChange","_","_countGroupLabelsBeforeOption","b","_getOptionScrollPosition","_c0","_c1","MatAutocomplete_ng_template_0_Template","rf","ctx","i0","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","formFieldId_r1","id","ctx_r1","ɵɵnextContext","ɵɵclassMap","_classList","ɵɵclassProp","showPanel","_animationsDisabled","_color","ɵɵproperty","ɵɵattribute","ariaLabel","_getPanelAriaLabelledby","a","MatOptgroup","InjectionToken","inject","ChangeDetectorRef","ElementRef","ANIMATION_MODULE_TYPE","EventEmitter","booleanAttribute","TemplateRef","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","ContentChildren","Input","Output","Directive","forwardRef","EnvironmentInjector","ViewContainerRef","NgZone","Renderer2","afterNextRender","NgModule","ViewportRuler","CdkScrollableModule","Overlay","OverlayConfig","OverlayModule","_IdGenerator","ActiveDescendantKeyManager","removeAriaReferencedId","addAriaReferencedId","Platform","_getFocusedElementPierceShadowDom","_getEventTarget","Subscription","Subject","merge","of","defer","Observable","Directionality","hasModifierKey","ESCAPE","ENTER","TAB","UP_ARROW","DOWN_ARROW","BreakpointObserver","Breakpoints","TemplatePortal","NG_VALUE_ACCESSOR","filter","map","startWith","switchMap","tap","delay","take","h","MAT_FORM_FIELD","MatOptionModule","MatCommonModule","MatAutocompleteSelectedEvent","source","option","constructor","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","autoSelectActiveOption","hideSingleSelectionIndicator","requireSelection","hasBackdrop","MatAutocomplete","_changeDetectorRef","_elementRef","_defaults","optional","_activeOptionChanges","EMPTY","_keyManager","isOpen","_isOpen","_latestOpeningTrigger","_setColor","value","markForCheck","template","panel","options","optionGroups","ariaLabelledby","displayWith","panelWidth","disableRipple","optionSelected","opened","closed","optionActivated","classList","nativeElement","className","_hideSingleSelectionIndicator","_syncParentProperties","getId","inertGroups","platform","SAFARI","ngAfterContentInit","withWrap","skipPredicate","_skipPredicate","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","destroy","unsubscribe","_setScrollTop","scrollTop","_getScrollTop","length","_emitSelectEvent","event","labelId","labelExpression","ɵfac","MatAutocomplete_Factory","__ngFactoryType__","ɵcmp","ɵɵdefineComponent","type","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","MatAutocomplete_Query","ɵɵviewQuery","first","hostAttrs","inputs","outputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInputTransformsFeature","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","styles","encapsulation","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","None","OnPush","host","providers","static","descendants","transform","MatAutocompleteOrigin","elementRef","MatAutocompleteOrigin_Factory","ɵdir","ɵɵdefineDirective","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","_environmentInjector","_element","_overlay","_viewContainerRef","_zone","_dir","_formField","_viewportRuler","_scrollStrategy","_renderer","_overlayRef","_portal","_componentDestroyed","_initialized","_keydownSubscription","_outsideClickSubscription","_cleanupWindowBlur","_previousValue","_valueOnAttach","_valueOnLastKeydown","_positionStrategy","_manuallyFloatingLabel","_closingActionsSubscription","_viewportSubscription","_breakpointObserver","_handsetLandscapeSubscription","_canOpenOnNextFocus","_valueBeforeAutoSelection","_pendingAutoselectedOption","_closeKeyEventStream","_windowBlurHandler","panelOpen","_hasFocus","_onChange","_onTouched","autocomplete","position","connectedTo","autocompleteAttribute","autocompleteDisabled","_aboveClass","ngAfterViewInit","next","complete","listen","ngOnChanges","changes","_setStrategyPositions","updatePosition","_destroyPanel","_clearFromModal","_overlayAttached","openPanel","_openPanelInternal","closePanel","_resetLabel","run","hasAttached","detach","_updatePanelState","detectChanges","_trackedModal","panelClosingActions","optionSelections","tabOut","pipe","_getOutsideClickStream","detachments","onSelectionChange","activeOption","activeItem","observer","listener","clickTarget","formField","getConnectedOverlayOrigin","customOrigin","contains","overlayElement","cleanups","forEach","current","writeValue","Promise","resolve","then","_assignOptionValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","hasModifier","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","_clearPreviousSelectedOption","selectedOption","find","selected","display","_getDisplayValue","deselect","valueOnAttach","_handleFocus","_attachOverlay","_floatLabel","_handleClick","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","initialRender","subscriber","injector","optionChanges","reapplyLastPosition","wasOpen","_emitOpened","_setValueAndClose","dispose","toDisplay","_updateNativeInputValue","_control","toSelect","focus","skip","emitEvent","panelId","overlayRef","getLabelId","create","_getOverlayConfig","updateSize","width","_getPanelWidth","observe","HandsetLandscape","result","isHandsetLandscape","matches","withFlexibleDimensions","withGrowAfterOpen","withViewportMargin","setOrigin","_getConnectedElement","attach","color","_applyModalPanelOwnership","_handlePanelKeydown","stopPropagation","keydownEvents","outsidePointerEvents","positionStrategy","_getOverlayPosition","scrollStrategy","direction","undefined","backdropClass","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withPush","belowPositions","originX","originY","overlayX","overlayY","abovePositions","positions","withPositions","_getHostWidth","getBoundingClientRect","firstEnabledOptionIndex","get","setActiveItem","element","readOnly","labelCount","_getHostElement","newScrollPosition","offsetTop","offsetHeight","modal","closest","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","ɵɵlistener","MatAutocompleteTrigger_focusin_HostBindingHandler","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","MatAutocompleteTrigger_keydown_HostBindingHandler","MatAutocompleteTrigger_click_HostBindingHandler","toString","ɵɵNgOnChangesFeature","alias","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}