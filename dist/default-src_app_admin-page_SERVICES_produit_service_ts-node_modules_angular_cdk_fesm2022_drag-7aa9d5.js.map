{"version":3,"file":"default-src_app_admin-page_SERVICES_produit_service_ts-node_modules_angular_cdk_fesm2022_drag-7aa9d5.js","mappings":"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","sources":["./src/app/admin-page/SERVICES/produit.service.ts","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs"],"sourcesContent":["// produit.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Produit } from '../MODELS/produit.model';\nimport { catchError, map, Observable, switchMap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { UsersService } from './users.service';\n\n// produit.service.ts\n\nexport interface ProduitEntreprisePaginatedResponse {\n  content: Produit[];\n  pageNumber: number;\n  pageSize: number;\n  totalElements: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrevious: boolean;\n  isFirst: boolean;\n  isLast: boolean;\n  totalProduitsUniques: number;\n  totalBoutiques: number;\n}\n\nexport interface ProduitStockPaginatedResponse {\n  content: Produit[];\n  pageNumber: number;\n  pageSize: number;\n  totalElements: number;\n  totalPages: number;\n  number: number;\n  hasNext: boolean;\n  hasPrevious: boolean;\n  isFirst: boolean;\n  isLast: boolean;\n  totalProduitsActifs: number;\n  totalProduitsEnStock: number;\n  totalProduitsHorsStock: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProduitService {\n  private apiUrl = environment.apiBaseUrl;\n\n  constructor(private http: HttpClient, private usersService: UsersService) { }\n\n  ajouterProduit(\n    boutiqueIds: number[],\n    quantites: number[],\n    seuilAlert: number[],\n    produit: any,\n    imageFile: File | null,\n    addToStock: boolean,\n    datePreemption: string | null\n  ): Observable<Produit[]> {\n    const url = `${this.apiUrl}/create?addToStock=${addToStock}`;\n    const formData: FormData = new FormData();\n\n    formData.append('boutiqueIds', JSON.stringify(boutiqueIds));\n    formData.append('quantites', JSON.stringify(quantites));\n    formData.append('produit', JSON.stringify(produit));\n    formData.append('seuilAlert', JSON.stringify(seuilAlert));\n\n    if (imageFile) {\n      formData.append('image', imageFile, imageFile.name);\n    }\n\n    // Ajouter dans formData\n    if (datePreemption) {\n      formData.append('datePreemption', datePreemption);\n    }\n\n    return this.usersService.getValidAccessToken().pipe(\n      switchMap((token: string) => {\n        const headers = new HttpHeaders({\n          'Authorization': `Bearer ${token}`\n        });\n        return this.http.post<Produit[]>(url, formData, { headers });\n      })\n    );\n  }\n\n  modifierProduit(produit: Produit, file?: File): Observable<Produit> {\n    const formData: FormData = new FormData();\n\n    // Supprime id du payload si non nécessaire\n    const { id, ...productData } = produit;\n    formData.append('produit', JSON.stringify(productData));\n\n    formData.append('addToStock', produit.enStock ? 'true' : 'false');\n\n    if (file) {\n      formData.append('image', file, file.name);\n    }\n\n    return this.usersService.getValidAccessToken().pipe(\n      switchMap((token: string) => {\n        const headers = new HttpHeaders({\n          'Authorization': `Bearer ${token}`\n        });\n        return this.http.patch<Produit>(`${this.apiUrl}/updateProduit/${produit.id}`, formData, { headers });\n      })\n    );\n  }\n  \n  // Nouvelle méthode pour récupérer les détails d'un produit par son ID\n  getProduitById(productId: number): Observable<Produit> {\n    return this.usersService.getValidAccessToken().pipe(\n      switchMap((token: string) => {\n        const headers = new HttpHeaders({ 'Authorization': `Bearer ${token}` });\n        return this.http.get<Produit>(`${this.apiUrl}/produits/${productId}`, { headers });\n      })\n    );\n  }\n\n  // Méthode pour récupérer la liste des produits d'une boutique\n  getProduitsEntreprise(boutiqueId: number): Observable<Produit[]> {\n    return this.usersService.getValidAccessToken().pipe(\n      switchMap((token: string) => {\n        const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });\n        return this.http.get<Produit[]>(`${this.apiUrl}/produits/${boutiqueId}/stock`, { headers }).pipe(\n          catchError(error => {\n            if (error.status === 400 && error.error?.error === 'Cette boutique est désactivée, ses produits ne sont pas accessibles !') {\n              return throwError(() => new Error('BOUTIQUE_DESACTIVEE'));\n            }\n            return throwError(() => error);\n          })\n        );\n      })\n    );\n  }\n\n  // Méthode pour récupérer les totaux des produits en stock (déjà existante)\n  getProduitBoutique(boutiqueId: number): Observable<Map<string, number>> {\n    return this.usersService.getValidAccessToken().pipe(\n      switchMap((token: string) => {\n        const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });\n        return this.http.get<Map<string, number>>(`${this.apiUrl}/produits/${boutiqueId}/totaux-stock`, { headers });\n      })\n    );\n  }\n\n  // Nouvelle méthode pour récupérer tous les produits de l'entreprise\n  getProduitsByEntrepriseId(entrepriseId: number): Observable<Produit[]> {\n    return this.usersService.getValidAccessToken().pipe(\n      switchMap((token: string) => {\n        const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });\n        return this.http.get<Produit[]>(`${this.apiUrl}/produits/entreprise/${entrepriseId}`, { headers });\n      })\n    );\n  }\n\n  getProduitsParEntreprise(entrepriseId: number): Observable<any[]> {\n    return this.usersService.getValidAccessToken().pipe(\n      switchMap(token => {\n        const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });\n        return this.http.get<any[]>(`${this.apiUrl}/produits/entreprise/${entrepriseId}`, { headers });\n      })\n    );\n  }\n\n  // Méthode pour recuperer les fournisseur de lutilisateur connecter\n  getFournisseurs(): Observable<any[]> {\n    return this.usersService.getValidAccessToken().pipe(\n      switchMap(token => {\n        const headers = new HttpHeaders({\n          Authorization: `Bearer ${token}`\n        });\n        return this.http.get<any[]>(`${this.apiUrl}/get-fournisseurs`, { headers });\n      })\n    );\n  }\n\n  // Ajoutez un paramètre pour les IDs de boutiques\n  importProduitsFromExcel(formData: FormData, boutiqueIds: number[]): Observable<any> {\n    return this.usersService.getValidAccessToken().pipe(\n      switchMap((token: string) => {\n        const headers = new HttpHeaders({\n          'Authorization': `Bearer ${token}` \n        });\n        \n        // Ajoutez les IDs de boutique dans le FormData\n        formData.append('boutiqueIds', JSON.stringify(boutiqueIds));\n        \n        return this.http.post(`${this.apiUrl}/import-produits-excel`, formData, { headers });\n      })\n    );\n  }\n\n  // Pour les produits d'entreprise (toutes les boutiques) :\n  getProduitsByEntrepriseIdPaginated(entrepriseId: number, page: number = 0, size: number = 20): Observable<ProduitEntreprisePaginatedResponse> {\n  return this.usersService.getValidAccessToken().pipe(\n    switchMap((token: string) => {\n      const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });\n      const params = new HttpParams()\n        .set('page', page.toString())\n        .set('size', size.toString());\n      \n      return this.http.get<ProduitEntreprisePaginatedResponse>(\n        `${this.apiUrl}/entreprise/${entrepriseId}/produits/paginated`, \n        { headers, params }\n      );\n    })\n  );\n}\n\n  // Pour les produits d'une boutique :\n  getProduitsEntreprisePaginated(boutiqueId: number, page: number = 0, size: number = 20): Observable<ProduitStockPaginatedResponse> {\n    return this.usersService.getValidAccessToken().pipe(\n      switchMap((token: string) => {\n        const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });\n        const params = new HttpParams()\n          .set('page', page.toString())\n          .set('size', size.toString());\n        \n        return this.http.get<ProduitStockPaginatedResponse>(\n          `${this.apiUrl}/boutique/${boutiqueId}/produits/paginated`, \n          { headers, params }\n        ).pipe(\n          catchError(error => {\n            if (error.status === 400 && error.error?.error === 'Cette boutique est désactivée, ses produits ne sont pas accessibles !') {\n              return throwError(() => new Error('BOUTIQUE_DESACTIVEE'));\n            }\n            return throwError(() => error);\n          })\n        );\n      })\n    );\n  }\n\n  \n  \n  \n}\n","import * as i0 from '@angular/core';\nimport { signal, Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, RendererFactory2, Injectable, InjectionToken, ElementRef, booleanAttribute, Directive, Input, ViewContainerRef, ChangeDetectorRef, EventEmitter, Injector, afterNextRender, numberAttribute, Output, TemplateRef, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { _ as _getEventTarget, a as _getShadowRoot } from './shadow-dom-B0oHn41l.mjs';\nimport { a as isFakeTouchstartFromScreenReader, i as isFakeMousedownFromScreenReader } from './fake-event-detection-DWOdFTFz.mjs';\nimport { a as coerceElement, c as coerceNumberProperty } from './element-x4z00URv.mjs';\nimport { _ as _bindEventWithOptions } from './backwards-compatibility-DHR38MsD.mjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport { _ as _CdkPrivateStyleLoader } from './style-loader-Cu9AvjH9.mjs';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from './scrolling.mjs';\nexport { CdkScrollable as ɵɵCdkScrollable } from './scrolling.mjs';\nimport { D as Directionality } from './directionality-CBXD4hga.mjs';\nimport { _ as _IdGenerator } from './id-generator-Dw_9dSDu.mjs';\nimport { c as coerceArray } from './array-I1yfCXUO.mjs';\nimport './platform-DmdVEw_C.mjs';\nimport './scrolling-BkvA05C8.mjs';\nimport './bidi.mjs';\nimport './recycle-view-repeater-strategy-DoWdPqVw.mjs';\nimport './data-source-D34wiQZj.mjs';\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    _document;\n    /** Cached positions of the scrollable parent elements. */\n    positions = new Map();\n    constructor(_document) {\n        this._document = _document;\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    _document;\n    _rootElement;\n    _direction;\n    _initialDomRect;\n    _previewTemplate;\n    _previewClass;\n    _pickupPositionOnPage;\n    _initialTransform;\n    _zIndex;\n    _renderer;\n    /** Reference to the view of the preview element. */\n    _previewEmbeddedView;\n    /** Reference to the preview element. */\n    _preview;\n    get element() {\n        return this._preview;\n    }\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex, _renderer) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n        this._renderer = _renderer;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if (supportsPopover(this._preview)) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        return this._renderer.listen(this._preview, name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // If the preview has a margin, it can throw off our positioning so we reset it. The reset\n            // value for `margin-right` needs to be `auto` when opened as a popover, because our\n            // positioning is always top/left based, but native popover seems to position itself\n            // to the top/right if `<html>` or `<body>` have `dir=\"rtl\"` (see #29604). Setting it\n            // to `auto` pushed it to the top/left corner in RTL and is a noop in LTR.\n            'margin': supportsPopover(preview) ? '0 auto 0 0' : '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n/** Checks whether a specific element supports the popover API. */\nfunction supportsPopover(element) {\n    return 'showPopover' in element;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = { passive: true };\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = { passive: false };\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = {\n    passive: false,\n    capture: true,\n};\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    _config;\n    _document;\n    _ngZone;\n    _viewportRuler;\n    _dragDropRegistry;\n    _renderer;\n    _rootElementCleanups;\n    _cleanupShadowRootSelectStart;\n    /** Element displayed next to the user's pointer while the element is dragged. */\n    _preview;\n    /** Container into which to insert the preview. */\n    _previewContainer;\n    /** Reference to the view of the placeholder element. */\n    _placeholderRef;\n    /** Element that is rendered instead of the draggable item while it is being sorted. */\n    _placeholder;\n    /** Coordinates within the element at which the user picked up the element. */\n    _pickupPositionInElement;\n    /** Coordinates on the page at which the user picked up the element. */\n    _pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     */\n    _anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n    _passiveTransform = { x: 0, y: 0 };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n    _activeTransform = { x: 0, y: 0 };\n    /** Inline `transform` value that the element had before the first dragging sequence. */\n    _initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n    _hasStartedDragging = signal(false);\n    /** Whether the element has moved since the user started dragging it. */\n    _hasMoved;\n    /** Drop container in which the DragRef resided when dragging began. */\n    _initialContainer;\n    /** Index at which the item started in its initial container. */\n    _initialIndex;\n    /** Cached positions of scrollable parent elements. */\n    _parentPositions;\n    /** Emits when the item is being moved. */\n    _moveEvents = new Subject();\n    /** Keeps track of the direction in which the user is dragging along each axis. */\n    _pointerDirectionDelta;\n    /** Pointer position at which the last change in the delta occurred. */\n    _pointerPositionAtLastDirectionChange;\n    /** Position of the pointer at the last pointer event. */\n    _lastKnownPointerPosition;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     */\n    _rootElement;\n    /**\n     * Nearest ancestor SVG, relative to which coordinates are calculated if dragging SVGElement\n     */\n    _ownerSVGElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     */\n    _rootElementTapHighlight;\n    /** Subscription to pointer movement events. */\n    _pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n    _pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n    _scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n    _resizeSubscription = Subscription.EMPTY;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     */\n    _lastTouchEventTime;\n    /** Time at which the last dragging sequence was started. */\n    _dragStartTime;\n    /** Cached reference to the boundary element. */\n    _boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n    _nativeInteractionsEnabled = true;\n    /** Client rect of the root element when the dragging sequence has started. */\n    _initialDomRect;\n    /** Cached dimensions of the preview element. Should be read via `_getPreviewRect`. */\n    _previewRect;\n    /** Cached dimensions of the boundary element. */\n    _boundaryRect;\n    /** Element that will be used as a template to create the draggable item's preview. */\n    _previewTemplate;\n    /** Template for placeholder element rendered to show where a draggable would be dropped. */\n    _placeholderTemplate;\n    /** Elements that can be used to drag the draggable item. */\n    _handles = [];\n    /** Registered handles that are currently disabled. */\n    _disabledHandles = new Set();\n    /** Droppable container that the draggable is a part of. */\n    _dropContainer;\n    /** Layout direction of the item. */\n    _direction = 'ltr';\n    /** Ref that the current drag item is nested in. */\n    _parentDragRef;\n    /**\n     * Cached shadow root that the element is placed in. `null` means that the element isn't in\n     * the shadow DOM and `undefined` means that it hasn't been resolved yet. Should be read via\n     * `_getShadowRoot`, not directly.\n     */\n    _cachedShadowRoot;\n    /** Axis along which dragging is locked. */\n    lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay = 0;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    _disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n    beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n    started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = this._moveEvents;\n    /** Arbitrary data that can be attached to the drag item. */\n    data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry, _renderer) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        this._renderer = _renderer;\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            this._removeRootElementListeners();\n            this._rootElementCleanups = this._ngZone.runOutsideAngular(() => [\n                _bindEventWithOptions(this._renderer, element, 'mousedown', this._pointerDown, activeEventListenerOptions),\n                _bindEventWithOptions(this._renderer, element, 'touchstart', this._pointerDown, passiveEventListenerOptions),\n                _bindEventWithOptions(this._renderer, element, 'dragstart', this._nativeDragStart, activeEventListenerOptions),\n            ]);\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners();\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._cleanupShadowRootSelectStart?.();\n        this._cleanupShadowRootSelectStart = undefined;\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /** Handler for the `mousedown`/`touchstart` events. */\n    _pointerDown = (event) => {\n        this.beforeStarted.next();\n        // Delegate the event based on whether it started from a handle or the element itself.\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                this._initializeDragSequence(targetHandle, event);\n            }\n        }\n        else if (!this.disabled) {\n            this._initializeDragSequence(this._rootElement, event);\n        }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n    _pointerMove = (event) => {\n        const pointerPosition = this._getPointerPositionOnPage(event);\n        if (!this._hasStartedDragging()) {\n            const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n            const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n            const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n            // Only start dragging after the user has moved more than the minimum distance in either\n            // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n            // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n            // per pixel of movement (e.g. if the user moves their pointer quickly).\n            if (isOverThreshold) {\n                const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                const container = this._dropContainer;\n                if (!isDelayElapsed) {\n                    this._endDragSequence(event);\n                    return;\n                }\n                // Prevent other drag sequences from starting while something in the container is still\n                // being dragged. This can happen while we're waiting for the drop animation to finish\n                // and can cause errors, because some elements might still be moving around.\n                if (!container || (!container.isDragging() && !container.isReceiving())) {\n                    // Prevent the default action as soon as the dragging sequence is considered as\n                    // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                    if (event.cancelable) {\n                        event.preventDefault();\n                    }\n                    this._hasStartedDragging.set(true);\n                    this._ngZone.run(() => this._startDragSequence(event));\n                }\n            }\n            return;\n        }\n        // We prevent the default action down here so that we know that dragging has started. This is\n        // important for touch devices where doing this too early can unnecessarily block scrolling,\n        // if there's a dragging delay.\n        if (event.cancelable) {\n            event.preventDefault();\n        }\n        const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n        this._hasMoved = true;\n        this._lastKnownPointerPosition = pointerPosition;\n        this._updatePointerDirectionDelta(constrainedPointerPosition);\n        if (this._dropContainer) {\n            this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n        }\n        else {\n            // If there's a position constraint function, we want the element's top/left to be at the\n            // specific position on the page. Use the initial position as a reference if that's the case.\n            const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n            const activeTransform = this._activeTransform;\n            activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n            activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n            this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n        }\n        // Since this event gets fired for every pixel while dragging, we only\n        // want to fire it if the consumer opted into it. Also we have to\n        // re-enter the zone because we run all of the events on the outside.\n        if (this._moveEvents.observers.length) {\n            this._ngZone.run(() => {\n                this._moveEvents.next({\n                    source: this,\n                    pointerPosition: constrainedPointerPosition,\n                    event,\n                    distance: this._getDragDistance(constrainedPointerPosition),\n                    delta: this._pointerDirectionDelta,\n                });\n            });\n        }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n    _pointerUp = (event) => {\n        this._endDragSequence(event);\n    };\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging()) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                this._cleanupShadowRootSelectStart = _bindEventWithOptions(this._renderer, shadowRoot, 'selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor =\n                this._anchor ||\n                    this._document.createComment(typeof ngDevMode === 'undefined' || ngDevMode ? 'cdk-drag-anchor' : ''));\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000, this._renderer);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasMoved = false;\n        this._hasStartedDragging.set(this._hasMoved);\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = (event) => {\n                    if (!event ||\n                        (this._preview &&\n                            _getEventTarget(event) === this._preview.element &&\n                            event.propertyName === 'transform')) {\n                        cleanupListener();\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                };\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                const cleanupListener = this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners() {\n        this._rootElementCleanups?.forEach(cleanup => cleanup());\n        this._rootElementCleanups = undefined;\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const scale = 1 / this.scale;\n        const transform = getTransform(x * scale, y * scale);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Handles a native `dragstart` event. */\n    _nativeDragStart = (event) => {\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                event.preventDefault();\n            }\n        }\n        else if (!this.disabled) {\n            // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n            // but some cases like dragging of links can slip through (see #24403).\n            event.preventDefault();\n        }\n    };\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Cache of the dimensions of all the items inside the container. */\n    _itemPositions = [];\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeDraggables;\n    /** Direction in which the list is oriented. */\n    orientation = 'vertical';\n    /** Layout direction of the drop list. */\n    direction;\n    constructor(_dragDropRegistry) {\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        delta: 0,\n        overlaps: false,\n    };\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            const transformAmount = Math.round(sibling.offset * (1 / sibling.drag.scale));\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${transformAmount}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${transformAmount}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            this._element.appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables?.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        this._element = container;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nclass MixedSortStrategy {\n    _document;\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Lazily-resolved root node containing the list. Use `_getRootNode` to read this. */\n    _rootNode;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeItems;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        deltaX: 0,\n        deltaY: 0,\n        overlaps: false,\n    };\n    /**\n     * Keeps track of the relationship between a node and its next sibling. This information\n     * is used to restore the DOM to the order it was in before dragging started.\n     */\n    _relatedNodes = [];\n    constructor(_document, _dragDropRegistry) {\n        this._document = _document;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        const childNodes = this._element.childNodes;\n        this._relatedNodes = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            const node = childNodes[i];\n            this._relatedNodes.push([node, node.nextSibling]);\n        }\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        const previousSwap = this._previousSwap;\n        if (newIndex === -1 || this._activeItems[newIndex] === item) {\n            return null;\n        }\n        const toSwapWith = this._activeItems[newIndex];\n        // Prevent too many swaps over the same item.\n        if (previousSwap.drag === toSwapWith &&\n            previousSwap.overlaps &&\n            previousSwap.deltaX === pointerDelta.x &&\n            previousSwap.deltaY === pointerDelta.y) {\n            return null;\n        }\n        const previousIndex = this.getItemIndex(item);\n        const current = item.getPlaceholderElement();\n        const overlapElement = toSwapWith.getRootElement();\n        if (newIndex > previousIndex) {\n            overlapElement.after(current);\n        }\n        else {\n            overlapElement.before(current);\n        }\n        moveItemInArray(this._activeItems, previousIndex, newIndex);\n        const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n        // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n        // break this functionality, because the same object is passed for all `sort` calls.\n        previousSwap.deltaX = pointerDelta.x;\n        previousSwap.deltaY = pointerDelta.y;\n        previousSwap.drag = toSwapWith;\n        previousSwap.overlaps =\n            overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n        return {\n            previousIndex,\n            currentIndex: newIndex,\n        };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        let enterIndex = index == null || index < 0\n            ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        // In some cases (e.g. when the container has padding) we might not be able to figure\n        // out which item to insert the dragged item next to, because the pointer didn't overlap\n        // with anything. In that case we find the item that's closest to the pointer.\n        if (enterIndex === -1) {\n            enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n        }\n        const targetItem = this._activeItems[enterIndex];\n        const currentIndex = this._activeItems.indexOf(item);\n        if (currentIndex > -1) {\n            this._activeItems.splice(currentIndex, 1);\n        }\n        if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n            this._activeItems.splice(enterIndex, 0, item);\n            targetItem.getRootElement().before(item.getPlaceholderElement());\n        }\n        else {\n            this._activeItems.push(item);\n            this._element.appendChild(item.getPlaceholderElement());\n        }\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeItems = items.slice();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        const root = this._element;\n        const previousSwap = this._previousSwap;\n        // Moving elements around in the DOM can break things like the `@for` loop, because it\n        // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n        // the DOM nodes in the list to their original order when the list is reset.\n        // Note that this could be simpler if we just saved all the nodes, cleared the root\n        // and then appended them in the original order. We don't do it, because it can break\n        // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n        // placeholder element which is removed after dragging.\n        for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n            const [node, nextSibling] = this._relatedNodes[i];\n            if (node.parentNode === root && node.nextSibling !== nextSibling) {\n                if (nextSibling === null) {\n                    root.appendChild(node);\n                }\n                else if (nextSibling.parentNode === root) {\n                    root.insertBefore(node, nextSibling);\n                }\n            }\n        }\n        this._relatedNodes = [];\n        this._activeItems = [];\n        previousSwap.drag = null;\n        previousSwap.deltaX = previousSwap.deltaY = 0;\n        previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeItems;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        return this._activeItems.indexOf(item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll() {\n        this._activeItems.forEach(item => {\n            if (this._dragDropRegistry.isDragging(item)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                item._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        if (container !== this._element) {\n            this._element = container;\n            this._rootNode = undefined;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY) {\n        const elementAtPoint = this._getRootNode().elementFromPoint(Math.floor(pointerX), Math.floor(pointerY));\n        const index = elementAtPoint\n            ? this._activeItems.findIndex(item => {\n                const root = item.getRootElement();\n                return elementAtPoint === root || root.contains(elementAtPoint);\n            })\n            : -1;\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n    /** Lazily resolves the list's root node. */\n    _getRootNode() {\n        // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n        if (!this._rootNode) {\n            this._rootNode = _getShadowRoot(this._element) || this._document;\n        }\n        return this._rootNode;\n    }\n    /**\n     * Finds the index of the item that's closest to the item being dragged.\n     * @param item Item being dragged.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _getClosestItemIndexToPointer(item, pointerX, pointerY) {\n        if (this._activeItems.length === 0) {\n            return -1;\n        }\n        if (this._activeItems.length === 1) {\n            return 0;\n        }\n        let minDistance = Infinity;\n        let minIndex = -1;\n        // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n        // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n        // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n        // for our purposes.\n        for (let i = 0; i < this._activeItems.length; i++) {\n            const current = this._activeItems[i];\n            if (current !== item) {\n                const { x, y } = current.getRootElement().getBoundingClientRect();\n                const distance = Math.hypot(pointerX - x, pointerY - y);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    minIndex = i;\n                }\n            }\n        }\n        return minIndex;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    _dragDropRegistry;\n    _ngZone;\n    _viewportRuler;\n    /** Element that the drop list is attached to. */\n    element;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    disabled = false;\n    /** Whether sorting items within the list is disabled. */\n    sortingDisabled = false;\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n    autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep = 2;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Function that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Emits right before dragging has started. */\n    beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n    dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new Subject();\n    /** Emits when a dragging sequence is started in a list connected to the current one. */\n    receivingStarted = new Subject();\n    /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n    receivingStopped = new Subject();\n    /** Arbitrary data that can be attached to the drop list. */\n    data;\n    /** Element that is the direct parent of the drag items. */\n    _container;\n    /** Whether an item in the list is being dragged. */\n    _isDragging = false;\n    /** Keeps track of the positions of any parent scrollable elements. */\n    _parentPositions;\n    /** Strategy being used to sort items within the list. */\n    _sortStrategy;\n    /** Cached `DOMRect` of the drop list. */\n    _domRect;\n    /** Draggable items in the container. */\n    _draggables = [];\n    /** Drop lists that are connected to the current one. */\n    _siblings = [];\n    /** Connected siblings that currently have a dragged item. */\n    _activeSiblings = new Set();\n    /** Subscription to the window being scrolled. */\n    _viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n    _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    /** Horizontal direction in which the list is currently scrolling. */\n    _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    /** Node that is being auto-scrolled. */\n    _scrollNode;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n    _stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n    _cachedShadowRoot = null;\n    /** Reference to the document. */\n    _document;\n    /** Elements that can be scrolled while the user is dragging. */\n    _scrollableElements = [];\n    /** Initial value for the element's `scroll-snap-type` style. */\n    _initialScrollSnap;\n    /** Direction of the list's layout. */\n    _direction = 'ltr';\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        const coercedElement = (this.element = coerceElement(element));\n        this._document = _document;\n        this.withOrientation('vertical').withElementContainer(coercedElement);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n            this._sortStrategy.direction = direction;\n        }\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        if (orientation === 'mixed') {\n            this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n        }\n        else {\n            const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n            strategy.direction = this._direction;\n            strategy.orientation = orientation;\n            this._sortStrategy = strategy;\n        }\n        this._sortStrategy.withElementContainer(this._container);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = this._container;\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /**\n     * Configures the drop list so that a different element is used as the container for the\n     * dragged items. This is useful for the cases when one might not have control over the\n     * full DOM that sets up the dragging.\n     * Note that the alternate container needs to be a descendant of the drop list.\n     * @param container New element container to be assigned.\n     */\n    withElementContainer(container) {\n        if (container === this._container) {\n            return this;\n        }\n        const element = coerceElement(this.element);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            container !== element &&\n            !element.contains(container)) {\n            throw new Error('Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.');\n        }\n        const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n        const newContainerIndex = this._scrollableElements.indexOf(container);\n        if (oldContainerIndex > -1) {\n            this._scrollableElements.splice(oldContainerIndex, 1);\n        }\n        if (newContainerIndex > -1) {\n            this._scrollableElements.splice(newContainerIndex, 1);\n        }\n        if (this._sortStrategy) {\n            this._sortStrategy.withElementContainer(container);\n        }\n        this._cachedShadowRoot = null;\n        this._scrollableElements.unshift(container);\n        this._container = container;\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = this._container.style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            // Prevent the check from running on apps not using an alternate container. Ideally we\n            // would always run it, but introducing it at this stage would be a breaking change.\n            this._container !== coerceElement(this.element)) {\n            for (const drag of this._draggables) {\n                if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n                    throw new Error('Invalid DOM structure for drop list. All items must be placed directly inside of the element container.');\n                }\n            }\n        }\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(this._container).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = this._container.style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /** Starts the interval that'll auto-scroll the element. */\n    _startScrollInterval = () => {\n        this._stopScrolling();\n        interval(0, animationFrameScheduler)\n            .pipe(takeUntil(this._stopScrollTimers))\n            .subscribe(() => {\n            const node = this._scrollNode;\n            const scrollStep = this.autoScrollStep;\n            if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                node.scrollBy(0, -scrollStep);\n            }\n            else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                node.scrollBy(0, scrollStep);\n            }\n            if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                node.scrollBy(-scrollStep, 0);\n            }\n            else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                node.scrollBy(scrollStep, 0);\n            }\n        });\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(this._container);\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind a capturing event. */\nconst capturingEventOptions = {\n    capture: true,\n};\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = {\n    passive: false,\n    capture: true,\n};\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.6\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\\n\"] }]\n        }] });\n// TODO(crisbeto): remove generics when making breaking changes.\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\nclass DragDropRegistry {\n    _ngZone = inject(NgZone);\n    _document = inject(DOCUMENT);\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    _cleanupDocumentTouchmove;\n    /** Registered drop container instances. */\n    _dropInstances = new Set();\n    /** Registered drag item instances. */\n    _dragInstances = new Set();\n    /** Drag item instances that are currently being dragged. */\n    _activeDragInstances = signal([]);\n    /** Keeps track of the event listeners that we've bound to the `document`. */\n    _globalListeners;\n    /**\n     * Predicate function to check if an item is being dragged.  Moved out into a property,\n     * because it'll be called a lot and we don't want to create a new function every time.\n     */\n    _draggingPredicate = (item) => item.isDragging();\n    /**\n     * Map tracking DOM nodes and their corresponding drag directives. Note that this is different\n     * from looking through the `_dragInstances` and getting their root node, because the root node\n     * isn't necessarily the node that the directive is set on.\n     */\n    _domNodesToDirectives = null;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerMove = new Subject();\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerUp = new Subject();\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n     * @breaking-change 13.0.0\n     */\n    scroll = new Subject();\n    constructor() { }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._cleanupDocumentTouchmove?.();\n                this._cleanupDocumentTouchmove = _bindEventWithOptions(this._renderer, this._document, 'touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._cleanupDocumentTouchmove?.();\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances().indexOf(drag) > -1) {\n            return;\n        }\n        this._styleLoader.load(_ResetsLoader);\n        this._activeDragInstances.update(instances => [...instances, drag]);\n        if (this._activeDragInstances().length === 1) {\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            const isTouchEvent = event.type.startsWith('touch');\n            const endEventHandler = (e) => this.pointerUp.next(e);\n            const toBind = [\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                ['scroll', (e) => this.scroll.next(e), capturingEventOptions],\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                ['selectstart', this._preventDefaultWhileDragging, activeCapturingEventOptions],\n            ];\n            if (isTouchEvent) {\n                toBind.push(['touchend', endEventHandler, capturingEventOptions], ['touchcancel', endEventHandler, capturingEventOptions]);\n            }\n            else {\n                toBind.push(['mouseup', endEventHandler, capturingEventOptions]);\n            }\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                toBind.push([\n                    'mousemove',\n                    (e) => this.pointerMove.next(e),\n                    activeCapturingEventOptions,\n                ]);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners = toBind.map(([name, handler, options]) => _bindEventWithOptions(this._renderer, this._document, name, handler, options));\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.update(instances => {\n            const index = instances.indexOf(drag);\n            if (index > -1) {\n                instances.splice(index, 1);\n                return [...instances];\n            }\n            return instances;\n        });\n        if (this._activeDragInstances().length === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances().indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const cleanup = _bindEventWithOptions(this._renderer, shadowRoot, 'scroll', (event) => {\n                        if (this._activeDragInstances().length) {\n                            observer.next(event);\n                        }\n                    }, capturingEventOptions);\n                    return () => {\n                        cleanup();\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    /**\n     * Tracks the DOM node which has a draggable directive.\n     * @param node Node to track.\n     * @param dragRef Drag directive set on the node.\n     */\n    registerDirectiveNode(node, dragRef) {\n        this._domNodesToDirectives ??= new WeakMap();\n        this._domNodesToDirectives.set(node, dragRef);\n    }\n    /**\n     * Stops tracking a draggable directive node.\n     * @param node Node to stop tracking.\n     */\n    removeDirectiveNode(node) {\n        this._domNodesToDirectives?.delete(node);\n    }\n    /**\n     * Gets the drag directive corresponding to a specific DOM node, if any.\n     * @param node Node for which to do the lookup.\n     */\n    getDragDirectiveForNode(node) {\n        return this._domNodesToDirectives?.get(node) || null;\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._domNodesToDirectives = null;\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * @param event Event whose default action should be prevented.\n     */\n    _preventDefaultWhileDragging = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            event.preventDefault();\n        }\n    };\n    /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n    _persistentTouchmoveListener = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            // Note that we only want to prevent the default action after dragging has actually started.\n            // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n            // but it could be pushed back if the user has set up a drag delay or threshold.\n            if (this._activeDragInstances().some(this._draggingPredicate)) {\n                event.preventDefault();\n            }\n            this.pointerMove.next(event);\n        }\n    };\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners?.forEach(cleanup => cleanup());\n        this._globalListeners = undefined;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DragDropRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    _document = inject(DOCUMENT);\n    _ngZone = inject(NgZone);\n    _viewportRuler = inject(ViewportRuler);\n    _dragDropRegistry = inject(DragDropRegistry);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    constructor() { }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry, this._renderer);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DragDrop, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DragDrop, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    element = inject(ElementRef);\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    /** Emits when the state of the handle has changed. */\n    _stateChanges = new Subject();\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    _disabled = false;\n    constructor() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag?._addHandle(this);\n    }\n    ngAfterViewInit() {\n        if (!this._parentDrag) {\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const ref = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (ref) {\n                    this._parentDrag = ref;\n                    ref._addHandle(this);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDragHandle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.6\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    element = inject(ElementRef);\n    dropContainer = inject(CDK_DROP_LIST, { optional: true, skipSelf: true });\n    _ngZone = inject(NgZone);\n    _viewContainerRef = inject(ViewContainerRef);\n    _dir = inject(Directionality, { optional: true });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _selfHandle = inject(CDK_DRAG_HANDLE, { optional: true, self: true });\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    _destroyed = new Subject();\n    _handles = new BehaviorSubject([]);\n    _previewTemplate;\n    _placeholderTemplate;\n    /** Reference to the underlying drag instance. */\n    _dragRef;\n    /** Arbitrary data to attach to this drag instance. */\n    data;\n    /** Locks the position of the dragged element along the specified axis. */\n    lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     */\n    rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     */\n    boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     */\n    freeDragPosition;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    _disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * Configures the place into which the preview of the item will be inserted. Can be configured\n     * globally through `CDK_DROP_LIST`. Possible values:\n     * - `global` - Preview will be inserted at the bottom of the `<body>`. The advantage is that\n     * you don't have to worry about `overflow: hidden` or `z-index`, but the item won't retain\n     * its inherited styles.\n     * - `parent` - Preview will be inserted into the parent of the drag item. The advantage is that\n     * inherited styles will be preserved, but it may be clipped by `overflow: hidden` or not be\n     * visible due to `z-index`. Furthermore, the preview is going to have an effect over selectors\n     * like `:nth-child` and some flexbox configurations.\n     * - `ElementRef<HTMLElement> | HTMLElement` - Preview will be inserted into a specific element.\n     * Same advantages and disadvantages as `parent`.\n     */\n    previewContainer;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Emits when the user starts dragging the item. */\n    started = new EventEmitter();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new EventEmitter();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new EventEmitter();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new EventEmitter();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new EventEmitter();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = new Observable((observer) => {\n        const subscription = this._dragRef.moved\n            .pipe(map(movedEvent => ({\n            source: this,\n            pointerPosition: movedEvent.pointerPosition,\n            event: movedEvent.event,\n            delta: movedEvent.delta,\n            distance: movedEvent.distance,\n        })))\n            .subscribe(observer);\n        return () => {\n            subscription.unsubscribe();\n        };\n    });\n    _injector = inject(Injector);\n    constructor() {\n        const dropContainer = this.dropContainer;\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        const dragDrop = inject(DragDrop);\n        this._dragRef = dragDrop.createDrag(this.element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        this._dragDropRegistry.registerDirectiveNode(this.element.nativeElement, this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n            // The drop container reads this so we need to sync it here.\n            dropContainer._dropListRef.beforeStarted.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._dragRef.scale = this.scale;\n            });\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // We need to wait until after render, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position, and then they get transferred to the portal.\n        afterNextRender(() => {\n            this._updateRootElement();\n            this._setupHandlesListener();\n            this._dragRef.scale = this.scale;\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }, { injector: this._injector });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in the `afterNextRender` queued up in the constructor.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Scale affects the free drag position so we need to sync it up here.\n        this._dragRef.scale = this.scale;\n        // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n        // constructor.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._dragDropRegistry.removeDirectiveNode(this.element.nativeElement);\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.scale = this.scale;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const parentDrag = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (parentDrag) {\n                    ref.withParent(parentDrag._dragRef);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDrag, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.6\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], scale: [\"cdkDragScale\", \"scale\", numberAttribute] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': 'cdk-drag',\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], scale: [{\n                type: Input,\n                args: [{ alias: 'cdkDragScale', transform: numberAttribute }]\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    /** Drop lists registered inside the group. */\n    _items = new Set();\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    disabled = false;\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.6\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    element = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _scrollDispatcher = inject(ScrollDispatcher);\n    _dir = inject(Directionality, { optional: true });\n    _group = inject(CDK_DROP_LIST_GROUP, {\n        optional: true,\n        skipSelf: true,\n    });\n    /** Refs that have been synced with the drop ref most recently. */\n    _latestSortedRefs;\n    /** Emits when the list has been destroyed. */\n    _destroyed = new Subject();\n    /** Whether the element's scrollable parents have been resolved. */\n    _scrollableParentsResolved;\n    /** Keeps track of the drop lists that are currently on the page. */\n    static _dropLists = [];\n    /** Reference to the underlying drop list instance. */\n    _dropListRef;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     */\n    connectedTo = [];\n    /** Arbitrary data to attach to this container. */\n    data;\n    /** Direction in which the list is oriented. */\n    orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     */\n    id = inject(_IdGenerator).getId('cdk-drop-list-');\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    _disabled;\n    /** Whether sorting within this drop list is disabled. */\n    sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n    autoScrollDisabled;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep;\n    /**\n     * Selector that will be used to resolve an alternate element container for the drop list.\n     * Passing an alternate container is useful for the cases where one might not have control\n     * over the parent node of the draggable items within the list (e.g. due to content projection).\n     * This allows for usages like:\n     *\n     * ```\n     * <div cdkDropList cdkDropListElementContainer=\".inner\">\n     *   <div class=\"inner\">\n     *     <div cdkDrag></div>\n     *   </div>\n     * </div>\n     * ```\n     */\n    elementContainerSelector;\n    /** Emits when the user drops an item inside the container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new EventEmitter();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new EventEmitter();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new EventEmitter();\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     */\n    _unsortedItems = new Set();\n    constructor() {\n        const dragDrop = inject(DragDrop);\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(this.element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (this._group) {\n            this._group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        // Only sync the items while dragging since this method is\n        // called when items are being initialized one-by-one.\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef(this.getSortedItems().map(item => item._dragRef));\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        // This method might be called on destroy so we always want to sync with the ref.\n        // Note that we reuse the last set of synced items, rather than re-sorting the whole\n        // list, because it can slow down re-renders of large lists (see #30737).\n        if (this._latestSortedRefs) {\n            const index = this._latestSortedRefs.indexOf(item._dragRef);\n            if (index > -1) {\n                this._latestSortedRefs.splice(index, 1);\n                this._syncItemsWithRef(this._latestSortedRefs);\n            }\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._latestSortedRefs = undefined;\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            if (this.elementContainerSelector) {\n                const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n                if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throw new Error(`CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`);\n                }\n                ref.withElementContainer(container);\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef(this.getSortedItems().map(item => item._dragRef));\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef(items) {\n        this._latestSortedRefs = items;\n        this._dropListRef.withItems(items);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDropList, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.6\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"], elementContainerSelector: [\"cdkDropListElementContainer\", \"elementContainerSelector\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], elementContainerSelector: [{\n                type: Input,\n                args: ['cdkDropListElementContainer']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the preview template instance. */\n    data;\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    matchSize = false;\n    constructor() {\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDragPreview, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.6\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the placeholder template instance. */\n    data;\n    constructor() {\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDragPlaceholder, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n"],"names":["HttpHeaders","HttpParams","catchError","switchMap","throwError","environment","ProduitService","constructor","http","usersService","apiUrl","apiBaseUrl","ajouterProduit","boutiqueIds","quantites","seuilAlert","produit","imageFile","addToStock","datePreemption","url","formData","FormData","append","JSON","stringify","name","getValidAccessToken","pipe","token","headers","post","modifierProduit","file","id","productData","enStock","patch","getProduitById","productId","get","getProduitsEntreprise","boutiqueId","Authorization","error","status","Error","getProduitBoutique","getProduitsByEntrepriseId","entrepriseId","getProduitsParEntreprise","getFournisseurs","importProduitsFromExcel","getProduitsByEntrepriseIdPaginated","page","size","params","set","toString","getProduitsEntreprisePaginated","i0","ɵɵinject","i1","HttpClient","i2","UsersService","factory","ɵfac","providedIn","signal","Component","ViewEncapsulation","ChangeDetectionStrategy","inject","NgZone","RendererFactory2","Injectable","InjectionToken","ElementRef","booleanAttribute","Directive","Input","ViewContainerRef","ChangeDetectorRef","EventEmitter","Injector","afterNextRender","numberAttribute","Output","TemplateRef","NgModule","DOCUMENT","Subject","Subscription","interval","animationFrameScheduler","Observable","merge","BehaviorSubject","_","_getEventTarget","a","_getShadowRoot","isFakeTouchstartFromScreenReader","i","isFakeMousedownFromScreenReader","coerceElement","c","coerceNumberProperty","_bindEventWithOptions","takeUntil","map","take","tap","startWith","_CdkPrivateStyleLoader","ViewportRuler","ScrollDispatcher","CdkScrollableModule","CdkScrollable","ɵɵCdkScrollable","D","Directionality","_IdGenerator","coerceArray","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","toLowerCase","removeAttribute","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","source","type","value","context","getContext","drawImage","getMutableClientRect","element","rect","getBoundingClientRect","top","right","bottom","left","width","height","x","y","isInsideClientRect","clientRect","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","positions","Map","clear","cache","elements","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","event","target","cachedPosition","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","contains","window","scrollY","scrollX","getRootNode","viewRef","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","appendChild","extendStyles","dest","importantProperties","key","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","enable","userSelect","style","toggleVisibility","opacity","combineTransforms","transform","initialTransform","matchElementSize","sourceRect","getTransform","Math","round","parseCssTimeUnitsToMs","multiplier","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","getPropertyValue","split","part","trim","Set","PreviewRef","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","_renderer","_previewEmbeddedView","_preview","attach","parent","_createPreview","supportsPopover","destroy","remove","setTransform","addClass","className","classList","add","getTransitionDuration","addEventListener","handler","listen","previewConfig","previewClass","previewTemplate","template","preview","rootRect","matchSize","viewContainer","createEmbeddedView","detectChanges","setAttribute","Array","isArray","passiveEventListenerOptions","passive","activeEventListenerOptions","activeCapturingEventOptions$1","capture","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_rootElementCleanups","_cleanupShadowRootSelectStart","_previewContainer","_placeholderRef","_placeholder","_pickupPositionInElement","_anchor","_passiveTransform","_activeTransform","_hasStartedDragging","_hasMoved","_initialContainer","_initialIndex","_parentPositions","_moveEvents","_pointerDirectionDelta","_pointerPositionAtLastDirectionChange","_lastKnownPointerPosition","_ownerSVGElement","_rootElementTapHighlight","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_lastTouchEventTime","_dragStartTime","_boundaryElement","_nativeInteractionsEnabled","_previewRect","_boundaryRect","_placeholderTemplate","_handles","_disabledHandles","_dropContainer","_parentDragRef","_cachedShadowRoot","lockAxis","dragStartDelay","scale","disabled","_disabled","_toggleNativeDragInteractions","handle","beforeStarted","started","released","ended","entered","exited","dropped","moved","data","constrainPosition","withRootElement","withParent","parentDragRef","registerDragItem","getPlaceholderElement","getRootElement","getVisibleElement","isDragging","withHandles","handles","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","_pointerDown","_nativeDragStart","undefined","SVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","dispose","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","container","getFreeDragPosition","setFreeDragPosition","_applyRootElementTransform","withPreviewContainer","_sortFromLastPointerPosition","_updateActiveDropContainer","_getConstrainedPointerPosition","next","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","abs","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_getDragStartDelay","_endDragSequence","isReceiving","cancelable","preventDefault","run","_startDragSequence","constrainedPointerPosition","_updatePointerDirectionDelta","offset","activeTransform","observers","distance","_getDragDistance","delta","_pointerUp","stopDragging","webkitTapHighlightColor","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","shadowRoot","dropContainer","shadowDomSelectStart","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","ngDevMode","insertBefore","zIndex","_getPreviewInsertionPoint","body","replaceChild","start","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","Promise","resolve","placeholderRect","duration","propertyName","cleanupListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","cleanup","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","min","max","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","SingleAxisSortStrategy","_element","_sortPredicate","_itemPositions","_activeDraggables","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","transformAmount","activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","push","_cacheItemPositions","withSortPredicate","predicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","withElementContainer","elementToMeasure","b","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","floor","MixedSortStrategy","_rootNode","_activeItems","deltaX","deltaY","_relatedNodes","childNodes","nextSibling","previousSwap","toSwapWith","current","overlapElement","after","before","newOverlapElement","_getRootNode","elementFromPoint","enterIndex","_getClosestItemIndexToPointer","targetItem","root","elementAtPoint","minDistance","Infinity","minIndex","hypot","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AutoScrollVerticalDirection","AutoScrollHorizontalDirection","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_container","_isDragging","_sortStrategy","_domRect","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","NONE","_horizontalScrollDirection","_scrollNode","_stopScrollTimers","_scrollableElements","_initialScrollSnap","coercedElement","withOrientation","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","draggedItems","filter","every","connectedTo","strategy","withScrollableParents","oldContainerIndex","newContainerIndex","unshift","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","_startScrollInterval","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","scrollStep","UP","scrollBy","DOWN","LEFT","RIGHT","_canReceive","_startReceiving","activeSiblings","initiator","receiver","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","capturingEventOptions","activeCapturingEventOptions","_ResetsLoader","_ResetsLoader_Factory","__ngFactoryType__","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","decls","vars","_ResetsLoader_Template","rf","ctx","encapsulation","changeDetection","ɵsetClassMetadata","args","None","OnPush","host","DragDropRegistry","_styleLoader","createRenderer","_cleanupDocumentTouchmove","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","_domNodesToDirectives","scroll","_persistentTouchmoveListener","load","update","instances","startsWith","endEventHandler","e","toBind","_preventDefaultWhileDragging","options","_clearGlobalListeners","streams","observer","registerDirectiveNode","dragRef","WeakMap","removeDirectiveNode","getDragDirectiveForNode","ngOnDestroy","instance","some","DragDropRegistry_Factory","ɵprov","ɵɵdefineInjectable","DEFAULT_CONFIG","DragDrop","createDrag","config","createDropList","DragDrop_Factory","CDK_DRAG_PARENT","assertElementNode","CDK_DRAG_HANDLE","CdkDragHandle","_parentDrag","optional","skipSelf","_stateChanges","nativeElement","_addHandle","ngAfterViewInit","ref","_removeHandle","CdkDragHandle_Factory","ɵdir","ɵɵdefineDirective","inputs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInputTransformsFeature","providers","alias","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_viewContainerRef","_dir","_changeDetectorRef","_selfHandle","self","_destroyed","_dragRef","rootElementSelector","freeDragPosition","subscription","movedEvent","_injector","dragDrop","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","_updateRootElement","_setupHandlesListener","injector","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","removeItem","getValue","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","closest","_getBoundaryElement","boundary","dir","templateRef","parentDrag","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","handleElements","handleInstance","CdkDrag_Factory","hostVars","hostBindings","CdkDrag_HostBindings","ɵɵclassProp","outputs","exportAs","ɵɵNgOnChangesFeature","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CdkDropListGroup_Factory","CdkDropList","_scrollDispatcher","_group","_latestSortedRefs","_scrollableParentsResolved","_dropLists","getId","elementContainerSelector","_unsortedItems","_setupInputSyncSubscription","_syncItemsWithRef","getSortedItems","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","correspondingDropList","list","console","warn","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","querySelector","listAutoScrollDisabled","listOrientation","CdkDropList_Factory","CdkDropList_HostBindings","ɵɵattribute","useValue","CDK_DRAG_PREVIEW","CdkDragPreview","_drag","CdkDragPreview_Factory","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","CdkDragPlaceholder_Factory","DRAG_DROP_DIRECTIVES","DragDropModule","DragDropModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sourceRoot":"webpack:///","x_google_ignoreList":[1]}